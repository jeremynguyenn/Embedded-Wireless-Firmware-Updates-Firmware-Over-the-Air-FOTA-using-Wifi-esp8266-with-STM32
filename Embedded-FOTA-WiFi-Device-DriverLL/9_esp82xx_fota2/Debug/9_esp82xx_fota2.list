
9_esp82xx_fota2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000252c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  080026cc  080026cc  000126cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002aa8  08002aa8  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002aa8  08002aa8  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002aa8  08002aa8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002aa8  08002aa8  00012aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002aac  08002aac  00012aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002ab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b264  20000064  08002b14  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000b2c8  08002b14  0002b2c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002e10  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000102d  00000000  00000000  00022ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000368  00000000  00000000  00023ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002c0  00000000  00000000  00024240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000242e  00000000  00000000  00024500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004cdd  00000000  00000000  0002692e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000551df  00000000  00000000  0002b60b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000807ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000fbc  00000000  00000000  0008083c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080026b4 	.word	0x080026b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	080026b4 	.word	0x080026b4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <led_init>:
#define LED_PIN		PIN5
#define PIN13		(1U<<13)
#define BTN_PIN		PIN13

void led_init(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000294:	4b0b      	ldr	r3, [pc, #44]	; (80002c4 <led_init+0x34>)
 8000296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000298:	4a0a      	ldr	r2, [pc, #40]	; (80002c4 <led_init+0x34>)
 800029a:	f043 0301 	orr.w	r3, r3, #1
 800029e:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA5 mode to output mode*/
	GPIOA->MODER |=(1U<<10);
 80002a0:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <led_init+0x38>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a08      	ldr	r2, [pc, #32]	; (80002c8 <led_init+0x38>)
 80002a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002aa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 80002ac:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <led_init+0x38>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a05      	ldr	r2, [pc, #20]	; (80002c8 <led_init+0x38>)
 80002b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002b6:	6013      	str	r3, [r2, #0]
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	40023800 	.word	0x40023800
 80002c8:	40020000 	.word	0x40020000

080002cc <button_init>:
	GPIOA->ODR &=~LED_PIN;

}

void button_init(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
	/*Enable clock access to PORTC*/
	RCC->AHB1ENR |=GPIOCEN;
 80002d0:	4b0b      	ldr	r3, [pc, #44]	; (8000300 <button_init+0x34>)
 80002d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d4:	4a0a      	ldr	r2, [pc, #40]	; (8000300 <button_init+0x34>)
 80002d6:	f043 0304 	orr.w	r3, r3, #4
 80002da:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PC13 as an input pin*/
	GPIOC->MODER &=~(1U<<26);
 80002dc:	4b09      	ldr	r3, [pc, #36]	; (8000304 <button_init+0x38>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a08      	ldr	r2, [pc, #32]	; (8000304 <button_init+0x38>)
 80002e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80002e6:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~(1U<<27);
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <button_init+0x38>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a05      	ldr	r2, [pc, #20]	; (8000304 <button_init+0x38>)
 80002ee:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80002f2:	6013      	str	r3, [r2, #0]

}
 80002f4:	bf00      	nop
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	40023800 	.word	0x40023800
 8000304:	40020800 	.word	0x40020800

08000308 <get_btn_state>:


bool get_btn_state(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0

	/*Note : BTN is active low*/

	/*Check if button is pressed*/
	if(GPIOC->IDR & BTN_PIN)
 800030c:	4b06      	ldr	r3, [pc, #24]	; (8000328 <get_btn_state+0x20>)
 800030e:	691b      	ldr	r3, [r3, #16]
 8000310:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <get_btn_state+0x14>
	{
		return false;
 8000318:	2300      	movs	r3, #0
 800031a:	e000      	b.n	800031e <get_btn_state+0x16>
	}
	else
	{
		return true;
 800031c:	2301      	movs	r3, #1
	}

}
 800031e:	4618      	mov	r0, r3
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr
 8000328:	40020800 	.word	0x40020800

0800032c <circular_buffer_init>:
circular_buffer * _rx_buffer2;
circular_buffer * _tx_buffer2;


void circular_buffer_init(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
	/*Init buff pointers*/
	_rx_buffer1 =  &rx_buffer1;
 8000330:	4b0e      	ldr	r3, [pc, #56]	; (800036c <circular_buffer_init+0x40>)
 8000332:	4a0f      	ldr	r2, [pc, #60]	; (8000370 <circular_buffer_init+0x44>)
 8000334:	601a      	str	r2, [r3, #0]
	_rx_buffer2 =  &rx_buffer2;
 8000336:	4b0f      	ldr	r3, [pc, #60]	; (8000374 <circular_buffer_init+0x48>)
 8000338:	4a0f      	ldr	r2, [pc, #60]	; (8000378 <circular_buffer_init+0x4c>)
 800033a:	601a      	str	r2, [r3, #0]

	_tx_buffer1 =  &tx_buffer1;
 800033c:	4b0f      	ldr	r3, [pc, #60]	; (800037c <circular_buffer_init+0x50>)
 800033e:	4a10      	ldr	r2, [pc, #64]	; (8000380 <circular_buffer_init+0x54>)
 8000340:	601a      	str	r2, [r3, #0]
	_tx_buffer2 =  &tx_buffer2;
 8000342:	4b10      	ldr	r3, [pc, #64]	; (8000384 <circular_buffer_init+0x58>)
 8000344:	4a10      	ldr	r2, [pc, #64]	; (8000388 <circular_buffer_init+0x5c>)
 8000346:	601a      	str	r2, [r3, #0]

	/*Initial RX interrupt*/
	USART1->CR1 |=CR1_RXNEIE;
 8000348:	4b10      	ldr	r3, [pc, #64]	; (800038c <circular_buffer_init+0x60>)
 800034a:	68db      	ldr	r3, [r3, #12]
 800034c:	4a0f      	ldr	r2, [pc, #60]	; (800038c <circular_buffer_init+0x60>)
 800034e:	f043 0320 	orr.w	r3, r3, #32
 8000352:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |=CR1_RXNEIE;
 8000354:	4b0e      	ldr	r3, [pc, #56]	; (8000390 <circular_buffer_init+0x64>)
 8000356:	68db      	ldr	r3, [r3, #12]
 8000358:	4a0d      	ldr	r2, [pc, #52]	; (8000390 <circular_buffer_init+0x64>)
 800035a:	f043 0320 	orr.w	r3, r3, #32
 800035e:	60d3      	str	r3, [r2, #12]

}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	20005e60 	.word	0x20005e60
 8000370:	20000080 	.word	0x20000080
 8000374:	20005e68 	.word	0x20005e68
 8000378:	20002f70 	.word	0x20002f70
 800037c:	20005e64 	.word	0x20005e64
 8000380:	200017f8 	.word	0x200017f8
 8000384:	20005e6c 	.word	0x20005e6c
 8000388:	200046e8 	.word	0x200046e8
 800038c:	40011000 	.word	0x40011000
 8000390:	40004400 	.word	0x40004400

08000394 <buff_store_char>:


static void buff_store_char(unsigned char c, circular_buffer * buffer)
{
 8000394:	b480      	push	{r7}
 8000396:	b085      	sub	sp, #20
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	6039      	str	r1, [r7, #0]
 800039e:	71fb      	strb	r3, [r7, #7]
	int loc =  (uint32_t)(buffer->head +1 )% UART_BUFFER_SIZE;
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80003a6:	f8d3 3770 	ldr.w	r3, [r3, #1904]	; 0x770
 80003aa:	1c5a      	adds	r2, r3, #1
 80003ac:	4b12      	ldr	r3, [pc, #72]	; (80003f8 <buff_store_char+0x64>)
 80003ae:	fba3 1302 	umull	r1, r3, r3, r2
 80003b2:	09db      	lsrs	r3, r3, #7
 80003b4:	f241 7170 	movw	r1, #6000	; 0x1770
 80003b8:	fb01 f303 	mul.w	r3, r1, r3
 80003bc:	1ad3      	subs	r3, r2, r3
 80003be:	60fb      	str	r3, [r7, #12]

	/*Check if no overflow will occur*/
	if( loc != buffer->tail)
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80003c6:	f8d3 2774 	ldr.w	r2, [r3, #1908]	; 0x774
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	429a      	cmp	r2, r3
 80003ce:	d00d      	beq.n	80003ec <buff_store_char+0x58>
	{
		/*Store character*/
		buffer->buffer[buffer->head] = c;
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80003d6:	f8d3 3770 	ldr.w	r3, [r3, #1904]	; 0x770
 80003da:	683a      	ldr	r2, [r7, #0]
 80003dc:	79f9      	ldrb	r1, [r7, #7]
 80003de:	54d1      	strb	r1, [r2, r3]

		/*Update head*/
		buffer->head =  loc;
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	683a      	ldr	r2, [r7, #0]
 80003e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80003e8:	f8c2 3770 	str.w	r3, [r2, #1904]	; 0x770
	}
}
 80003ec:	bf00      	nop
 80003ee:	3714      	adds	r7, #20
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr
 80003f8:	057619f1 	.word	0x057619f1

080003fc <buffer_clear>:


void buffer_clear(portType uart)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	4603      	mov	r3, r0
 8000404:	71fb      	strb	r3, [r7, #7]
	switch(uart){
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	2b00      	cmp	r3, #0
 800040a:	d012      	beq.n	8000432 <buffer_clear+0x36>
 800040c:	2b01      	cmp	r3, #1
 800040e:	d121      	bne.n	8000454 <buffer_clear+0x58>

		case SLAVE_DEV_PORT:
			/*Set content to '\0'*/
			memset(_rx_buffer1->buffer,'\0', UART_BUFFER_SIZE);
 8000410:	4b12      	ldr	r3, [pc, #72]	; (800045c <buffer_clear+0x60>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	f241 7270 	movw	r2, #6000	; 0x1770
 8000418:	2100      	movs	r1, #0
 800041a:	4618      	mov	r0, r3
 800041c:	f001 fca0 	bl	8001d60 <memset>
			_rx_buffer1->head = 0;
 8000420:	4b0e      	ldr	r3, [pc, #56]	; (800045c <buffer_clear+0x60>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000428:	461a      	mov	r2, r3
 800042a:	2300      	movs	r3, #0
 800042c:	f8c2 3770 	str.w	r3, [r2, #1904]	; 0x770
			break;
 8000430:	e010      	b.n	8000454 <buffer_clear+0x58>
		case DEBUG_PORT:
			/*Set content to '\0'*/
			memset(_rx_buffer2->buffer,'\0', UART_BUFFER_SIZE);
 8000432:	4b0b      	ldr	r3, [pc, #44]	; (8000460 <buffer_clear+0x64>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f241 7270 	movw	r2, #6000	; 0x1770
 800043a:	2100      	movs	r1, #0
 800043c:	4618      	mov	r0, r3
 800043e:	f001 fc8f 	bl	8001d60 <memset>
			_rx_buffer2->head = 0;
 8000442:	4b07      	ldr	r3, [pc, #28]	; (8000460 <buffer_clear+0x64>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800044a:	461a      	mov	r2, r3
 800044c:	2300      	movs	r3, #0
 800044e:	f8c2 3770 	str.w	r3, [r2, #1904]	; 0x770
			break;
 8000452:	bf00      	nop

	}

}
 8000454:	bf00      	nop
 8000456:	3708      	adds	r7, #8
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	20005e60 	.word	0x20005e60
 8000460:	20005e68 	.word	0x20005e68

08000464 <buffer_peek>:

/*Check the next value in the buffer
 * without removing it*/

int buffer_peek(portType uart)
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]


	switch(uart)
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d01c      	beq.n	80004ae <buffer_peek+0x4a>
 8000474:	2b01      	cmp	r3, #1
 8000476:	d135      	bne.n	80004e4 <buffer_peek+0x80>
	{
		case SLAVE_DEV_PORT:
			if(_rx_buffer1->head  == _rx_buffer1->tail )
 8000478:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <buffer_peek+0x90>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000480:	f8d3 2770 	ldr.w	r2, [r3, #1904]	; 0x770
 8000484:	4b1b      	ldr	r3, [pc, #108]	; (80004f4 <buffer_peek+0x90>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800048c:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 8000490:	429a      	cmp	r2, r3
 8000492:	d102      	bne.n	800049a <buffer_peek+0x36>
			{
				/*Return error*/
				return -1;
 8000494:	f04f 33ff 	mov.w	r3, #4294967295
 8000498:	e026      	b.n	80004e8 <buffer_peek+0x84>
			}
			else
			{
				return _rx_buffer1->buffer[_rx_buffer1->tail];
 800049a:	4b16      	ldr	r3, [pc, #88]	; (80004f4 <buffer_peek+0x90>)
 800049c:	681a      	ldr	r2, [r3, #0]
 800049e:	4b15      	ldr	r3, [pc, #84]	; (80004f4 <buffer_peek+0x90>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80004a6:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 80004aa:	5cd3      	ldrb	r3, [r2, r3]
 80004ac:	e01c      	b.n	80004e8 <buffer_peek+0x84>
			}
			break;

     case DEBUG_PORT:
			if(_rx_buffer2->head  == _rx_buffer2->tail )
 80004ae:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <buffer_peek+0x94>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80004b6:	f8d3 2770 	ldr.w	r2, [r3, #1904]	; 0x770
 80004ba:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <buffer_peek+0x94>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80004c2:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 80004c6:	429a      	cmp	r2, r3
 80004c8:	d102      	bne.n	80004d0 <buffer_peek+0x6c>
			{
				/*Return error*/
				return -1;
 80004ca:	f04f 33ff 	mov.w	r3, #4294967295
 80004ce:	e00b      	b.n	80004e8 <buffer_peek+0x84>
			}
			else
			{
				return _rx_buffer2->buffer[_rx_buffer2->tail];
 80004d0:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <buffer_peek+0x94>)
 80004d2:	681a      	ldr	r2, [r3, #0]
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <buffer_peek+0x94>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80004dc:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 80004e0:	5cd3      	ldrb	r3, [r2, r3]
 80004e2:	e001      	b.n	80004e8 <buffer_peek+0x84>
			}
			 break;


      default:
		return -1;
 80004e4:	f04f 33ff 	mov.w	r3, #4294967295
	}

}
 80004e8:	4618      	mov	r0, r3
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr
 80004f4:	20005e60 	.word	0x20005e60
 80004f8:	20005e68 	.word	0x20005e68

080004fc <buffer_read>:

/*Function to read(and remove) the next value
 * in the buffer */

int buffer_read(portType uart)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	71fb      	strb	r3, [r7, #7]

	int ret;

	switch(uart){
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d036      	beq.n	800057a <buffer_read+0x7e>
 800050c:	2b01      	cmp	r3, #1
 800050e:	d169      	bne.n	80005e4 <buffer_read+0xe8>
	case SLAVE_DEV_PORT:

		if(_rx_buffer1->head  == _rx_buffer1->tail )
 8000510:	4b3a      	ldr	r3, [pc, #232]	; (80005fc <buffer_read+0x100>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000518:	f8d3 2770 	ldr.w	r2, [r3, #1904]	; 0x770
 800051c:	4b37      	ldr	r3, [pc, #220]	; (80005fc <buffer_read+0x100>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000524:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 8000528:	429a      	cmp	r2, r3
 800052a:	d103      	bne.n	8000534 <buffer_read+0x38>
		{
			/*Return error*/
			ret = -1;
 800052c:	f04f 33ff 	mov.w	r3, #4294967295
 8000530:	60fb      	str	r3, [r7, #12]
		{
			unsigned char c =  _rx_buffer1->buffer[_rx_buffer1->tail];
			_rx_buffer1->tail =  (uint32_t)(_rx_buffer1->tail + 1)%UART_BUFFER_SIZE;
			ret =  c;
		}
		break;
 8000532:	e05b      	b.n	80005ec <buffer_read+0xf0>
			unsigned char c =  _rx_buffer1->buffer[_rx_buffer1->tail];
 8000534:	4b31      	ldr	r3, [pc, #196]	; (80005fc <buffer_read+0x100>)
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	4b30      	ldr	r3, [pc, #192]	; (80005fc <buffer_read+0x100>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000540:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 8000544:	5cd3      	ldrb	r3, [r2, r3]
 8000546:	72fb      	strb	r3, [r7, #11]
			_rx_buffer1->tail =  (uint32_t)(_rx_buffer1->tail + 1)%UART_BUFFER_SIZE;
 8000548:	4b2c      	ldr	r3, [pc, #176]	; (80005fc <buffer_read+0x100>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000550:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 8000554:	1c5a      	adds	r2, r3, #1
 8000556:	4b29      	ldr	r3, [pc, #164]	; (80005fc <buffer_read+0x100>)
 8000558:	6819      	ldr	r1, [r3, #0]
 800055a:	4b29      	ldr	r3, [pc, #164]	; (8000600 <buffer_read+0x104>)
 800055c:	fba3 0302 	umull	r0, r3, r3, r2
 8000560:	09db      	lsrs	r3, r3, #7
 8000562:	f241 7070 	movw	r0, #6000	; 0x1770
 8000566:	fb00 f303 	mul.w	r3, r0, r3
 800056a:	1ad3      	subs	r3, r2, r3
 800056c:	f501 5280 	add.w	r2, r1, #4096	; 0x1000
 8000570:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
			ret =  c;
 8000574:	7afb      	ldrb	r3, [r7, #11]
 8000576:	60fb      	str	r3, [r7, #12]
		break;
 8000578:	e038      	b.n	80005ec <buffer_read+0xf0>

    case DEBUG_PORT:
		if(_rx_buffer2->head  == _rx_buffer2->tail )
 800057a:	4b22      	ldr	r3, [pc, #136]	; (8000604 <buffer_read+0x108>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000582:	f8d3 2770 	ldr.w	r2, [r3, #1904]	; 0x770
 8000586:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <buffer_read+0x108>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800058e:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 8000592:	429a      	cmp	r2, r3
 8000594:	d103      	bne.n	800059e <buffer_read+0xa2>
		{
			/*Return error*/
			ret = -1;
 8000596:	f04f 33ff 	mov.w	r3, #4294967295
 800059a:	60fb      	str	r3, [r7, #12]
			unsigned char c =  _rx_buffer2->buffer[_rx_buffer2->tail];
			_rx_buffer2->tail =  (uint32_t)(_rx_buffer2->tail + 1)%UART_BUFFER_SIZE;
			ret = c;
		}

	  break;
 800059c:	e026      	b.n	80005ec <buffer_read+0xf0>
			unsigned char c =  _rx_buffer2->buffer[_rx_buffer2->tail];
 800059e:	4b19      	ldr	r3, [pc, #100]	; (8000604 <buffer_read+0x108>)
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	4b18      	ldr	r3, [pc, #96]	; (8000604 <buffer_read+0x108>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80005aa:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 80005ae:	5cd3      	ldrb	r3, [r2, r3]
 80005b0:	72bb      	strb	r3, [r7, #10]
			_rx_buffer2->tail =  (uint32_t)(_rx_buffer2->tail + 1)%UART_BUFFER_SIZE;
 80005b2:	4b14      	ldr	r3, [pc, #80]	; (8000604 <buffer_read+0x108>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80005ba:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 80005be:	1c5a      	adds	r2, r3, #1
 80005c0:	4b10      	ldr	r3, [pc, #64]	; (8000604 <buffer_read+0x108>)
 80005c2:	6819      	ldr	r1, [r3, #0]
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <buffer_read+0x104>)
 80005c6:	fba3 0302 	umull	r0, r3, r3, r2
 80005ca:	09db      	lsrs	r3, r3, #7
 80005cc:	f241 7070 	movw	r0, #6000	; 0x1770
 80005d0:	fb00 f303 	mul.w	r3, r0, r3
 80005d4:	1ad3      	subs	r3, r2, r3
 80005d6:	f501 5280 	add.w	r2, r1, #4096	; 0x1000
 80005da:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
			ret = c;
 80005de:	7abb      	ldrb	r3, [r7, #10]
 80005e0:	60fb      	str	r3, [r7, #12]
	  break;
 80005e2:	e003      	b.n	80005ec <buffer_read+0xf0>

    default:
		ret = -1;
 80005e4:	f04f 33ff 	mov.w	r3, #4294967295
 80005e8:	60fb      	str	r3, [r7, #12]
		break;
 80005ea:	bf00      	nop
	}

	return ret;
 80005ec:	68fb      	ldr	r3, [r7, #12]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	20005e60 	.word	0x20005e60
 8000600:	057619f1 	.word	0x057619f1
 8000604:	20005e68 	.word	0x20005e68

08000608 <buffer_write>:


void buffer_write(unsigned char c, portType uart)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	460a      	mov	r2, r1
 8000612:	71fb      	strb	r3, [r7, #7]
 8000614:	4613      	mov	r3, r2
 8000616:	71bb      	strb	r3, [r7, #6]

	int loc;

	switch(uart){
 8000618:	79bb      	ldrb	r3, [r7, #6]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d034      	beq.n	8000688 <buffer_write+0x80>
 800061e:	2b01      	cmp	r3, #1
 8000620:	d165      	bne.n	80006ee <buffer_write+0xe6>

	case SLAVE_DEV_PORT:

		 loc =  (uint32_t)(_tx_buffer1->head + 1)%UART_BUFFER_SIZE;
 8000622:	4b36      	ldr	r3, [pc, #216]	; (80006fc <buffer_write+0xf4>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800062a:	f8d3 3770 	ldr.w	r3, [r3, #1904]	; 0x770
 800062e:	1c5a      	adds	r2, r3, #1
 8000630:	4b33      	ldr	r3, [pc, #204]	; (8000700 <buffer_write+0xf8>)
 8000632:	fba3 1302 	umull	r1, r3, r3, r2
 8000636:	09db      	lsrs	r3, r3, #7
 8000638:	f241 7170 	movw	r1, #6000	; 0x1770
 800063c:	fb01 f303 	mul.w	r3, r1, r3
 8000640:	1ad3      	subs	r3, r2, r3
 8000642:	60fb      	str	r3, [r7, #12]

		while(loc ==  _tx_buffer1->tail){}
 8000644:	bf00      	nop
 8000646:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <buffer_write+0xf4>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800064e:	f8d3 2774 	ldr.w	r2, [r3, #1908]	; 0x774
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	429a      	cmp	r2, r3
 8000656:	d0f6      	beq.n	8000646 <buffer_write+0x3e>
		_tx_buffer1->buffer[_tx_buffer1->head] = c;
 8000658:	4b28      	ldr	r3, [pc, #160]	; (80006fc <buffer_write+0xf4>)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	4b27      	ldr	r3, [pc, #156]	; (80006fc <buffer_write+0xf4>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000664:	f8d3 3770 	ldr.w	r3, [r3, #1904]	; 0x770
 8000668:	79f9      	ldrb	r1, [r7, #7]
 800066a:	54d1      	strb	r1, [r2, r3]
		_tx_buffer1->head = loc;
 800066c:	4b23      	ldr	r3, [pc, #140]	; (80006fc <buffer_write+0xf4>)
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000676:	f8c2 3770 	str.w	r3, [r2, #1904]	; 0x770

		/*Initial TX interrupt*/
		USART1->CR1 |=CR1_TXEIE;
 800067a:	4b22      	ldr	r3, [pc, #136]	; (8000704 <buffer_write+0xfc>)
 800067c:	68db      	ldr	r3, [r3, #12]
 800067e:	4a21      	ldr	r2, [pc, #132]	; (8000704 <buffer_write+0xfc>)
 8000680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000684:	60d3      	str	r3, [r2, #12]
	break;
 8000686:	e033      	b.n	80006f0 <buffer_write+0xe8>

    case DEBUG_PORT:

		 loc =  (uint32_t)(_tx_buffer2->head + 1)%UART_BUFFER_SIZE;
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <buffer_write+0x100>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000690:	f8d3 3770 	ldr.w	r3, [r3, #1904]	; 0x770
 8000694:	1c5a      	adds	r2, r3, #1
 8000696:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <buffer_write+0xf8>)
 8000698:	fba3 1302 	umull	r1, r3, r3, r2
 800069c:	09db      	lsrs	r3, r3, #7
 800069e:	f241 7170 	movw	r1, #6000	; 0x1770
 80006a2:	fb01 f303 	mul.w	r3, r1, r3
 80006a6:	1ad3      	subs	r3, r2, r3
 80006a8:	60fb      	str	r3, [r7, #12]

		while(loc ==  _tx_buffer2->tail){}
 80006aa:	bf00      	nop
 80006ac:	4b16      	ldr	r3, [pc, #88]	; (8000708 <buffer_write+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006b4:	f8d3 2774 	ldr.w	r2, [r3, #1908]	; 0x774
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d0f6      	beq.n	80006ac <buffer_write+0xa4>
		_tx_buffer2->buffer[_tx_buffer2->head] = c;
 80006be:	4b12      	ldr	r3, [pc, #72]	; (8000708 <buffer_write+0x100>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <buffer_write+0x100>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ca:	f8d3 3770 	ldr.w	r3, [r3, #1904]	; 0x770
 80006ce:	79f9      	ldrb	r1, [r7, #7]
 80006d0:	54d1      	strb	r1, [r2, r3]
		_tx_buffer2->head = loc;
 80006d2:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <buffer_write+0x100>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80006dc:	f8c2 3770 	str.w	r3, [r2, #1904]	; 0x770

		/*Initial TX interrupt*/
		USART2->CR1 |=CR1_TXEIE;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <buffer_write+0x104>)
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	4a09      	ldr	r2, [pc, #36]	; (800070c <buffer_write+0x104>)
 80006e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ea:	60d3      	str	r3, [r2, #12]

	break;
 80006ec:	e000      	b.n	80006f0 <buffer_write+0xe8>

    default:
    	break;
 80006ee:	bf00      	nop
	}
}
 80006f0:	bf00      	nop
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	20005e64 	.word	0x20005e64
 8000700:	057619f1 	.word	0x057619f1
 8000704:	40011000 	.word	0x40011000
 8000708:	20005e6c 	.word	0x20005e6c
 800070c:	40004400 	.word	0x40004400

08000710 <is_data>:

/*Function to check if there is data in the buffer*/
int is_data(portType uart)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]
	int ret;
	switch(uart)
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d01c      	beq.n	800075a <is_data+0x4a>
 8000720:	2b01      	cmp	r3, #1
 8000722:	d135      	bne.n	8000790 <is_data+0x80>
	{
	case  SLAVE_DEV_PORT:
	      ret = (uint32_t)(UART_BUFFER_SIZE +  _rx_buffer1->head -  _rx_buffer1->tail)%UART_BUFFER_SIZE;
 8000724:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <is_data+0x90>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800072c:	f8d3 2770 	ldr.w	r2, [r3, #1904]	; 0x770
 8000730:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <is_data+0x90>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000738:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 800073c:	1ad3      	subs	r3, r2, r3
 800073e:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8000742:	3310      	adds	r3, #16
 8000744:	4a17      	ldr	r2, [pc, #92]	; (80007a4 <is_data+0x94>)
 8000746:	fba2 1203 	umull	r1, r2, r2, r3
 800074a:	09d2      	lsrs	r2, r2, #7
 800074c:	f241 7170 	movw	r1, #6000	; 0x1770
 8000750:	fb01 f202 	mul.w	r2, r1, r2
 8000754:	1a9a      	subs	r2, r3, r2
 8000756:	60fa      	str	r2, [r7, #12]
	      break;
 8000758:	e01b      	b.n	8000792 <is_data+0x82>

	case  DEBUG_PORT:
	      ret =  (uint32_t)(UART_BUFFER_SIZE +  _rx_buffer2->head -  _rx_buffer2->tail)%UART_BUFFER_SIZE;
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <is_data+0x98>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000762:	f8d3 2770 	ldr.w	r2, [r3, #1904]	; 0x770
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <is_data+0x98>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800076e:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 8000772:	1ad3      	subs	r3, r2, r3
 8000774:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8000778:	3310      	adds	r3, #16
 800077a:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <is_data+0x94>)
 800077c:	fba2 1203 	umull	r1, r2, r2, r3
 8000780:	09d2      	lsrs	r2, r2, #7
 8000782:	f241 7170 	movw	r1, #6000	; 0x1770
 8000786:	fb01 f202 	mul.w	r2, r1, r2
 800078a:	1a9a      	subs	r2, r3, r2
 800078c:	60fa      	str	r2, [r7, #12]
	      break;
 800078e:	e000      	b.n	8000792 <is_data+0x82>
	default:
		break;
 8000790:	bf00      	nop
	}

	return ret;
 8000792:	68fb      	ldr	r3, [r7, #12]

}
 8000794:	4618      	mov	r0, r3
 8000796:	3714      	adds	r7, #20
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	20005e60 	.word	0x20005e60
 80007a4:	057619f1 	.word	0x057619f1
 80007a8:	20005e68 	.word	0x20005e68

080007ac <get_first_char>:

/*Get first character of a specified string from buffer*/
static void get_first_char(char *str)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	/*Make sure there is data in the buffer*/
	while(!is_data(SLAVE_DEV_PORT)){}
 80007b4:	bf00      	nop
 80007b6:	2001      	movs	r0, #1
 80007b8:	f7ff ffaa 	bl	8000710 <is_data>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d0f9      	beq.n	80007b6 <get_first_char+0xa>

	while(buffer_peek(SLAVE_DEV_PORT) != str[0])
 80007c2:	e01f      	b.n	8000804 <get_first_char+0x58>
	{
		_rx_buffer1->tail =  (uint16_t)(_rx_buffer1->tail +1)%UART_BUFFER_SIZE;
 80007c4:	4b16      	ldr	r3, [pc, #88]	; (8000820 <get_first_char+0x74>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007cc:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	3301      	adds	r3, #1
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	4a13      	ldr	r2, [pc, #76]	; (8000824 <get_first_char+0x78>)
 80007d8:	fba2 1203 	umull	r1, r2, r2, r3
 80007dc:	09d2      	lsrs	r2, r2, #7
 80007de:	f241 7170 	movw	r1, #6000	; 0x1770
 80007e2:	fb01 f202 	mul.w	r2, r1, r2
 80007e6:	1a9b      	subs	r3, r3, r2
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <get_first_char+0x74>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007f2:	f8c3 2774 	str.w	r2, [r3, #1908]	; 0x774

		while(!is_data(SLAVE_DEV_PORT)){}
 80007f6:	bf00      	nop
 80007f8:	2001      	movs	r0, #1
 80007fa:	f7ff ff89 	bl	8000710 <is_data>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d0f9      	beq.n	80007f8 <get_first_char+0x4c>
	while(buffer_peek(SLAVE_DEV_PORT) != str[0])
 8000804:	2001      	movs	r0, #1
 8000806:	f7ff fe2d 	bl	8000464 <buffer_peek>
 800080a:	4602      	mov	r2, r0
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	429a      	cmp	r2, r3
 8000812:	d1d7      	bne.n	80007c4 <get_first_char+0x18>
	}
}
 8000814:	bf00      	nop
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20005e60 	.word	0x20005e60
 8000824:	057619f1 	.word	0x057619f1

08000828 <is_response>:

/*Function to check if a certain response is present in the buffer*/

int is_response(char *str)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	int curr_pos = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	60fb      	str	r3, [r7, #12]
	int len =  strlen(str);
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f7ff fcd3 	bl	80001e0 <strlen>
 800083a:	4603      	mov	r3, r0
 800083c:	60bb      	str	r3, [r7, #8]

	while(curr_pos != len)
 800083e:	e022      	b.n	8000886 <is_response+0x5e>
	{
		 curr_pos = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]
		 get_first_char(str);
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f7ff ffb1 	bl	80007ac <get_first_char>

		 while(buffer_peek(SLAVE_DEV_PORT) == str[curr_pos])
 800084a:	e012      	b.n	8000872 <is_response+0x4a>
		 {
			 curr_pos++;
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	3301      	adds	r3, #1
 8000850:	60fb      	str	r3, [r7, #12]
			 buffer_read(SLAVE_DEV_PORT);
 8000852:	2001      	movs	r0, #1
 8000854:	f7ff fe52 	bl	80004fc <buffer_read>
			 if(curr_pos ==  len)
 8000858:	68fa      	ldr	r2, [r7, #12]
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	429a      	cmp	r2, r3
 800085e:	d101      	bne.n	8000864 <is_response+0x3c>
			 {
				 /*Success*/
				 return 1;
 8000860:	2301      	movs	r3, #1
 8000862:	e016      	b.n	8000892 <is_response+0x6a>
			 }

			 while(!is_data(SLAVE_DEV_PORT)){}
 8000864:	bf00      	nop
 8000866:	2001      	movs	r0, #1
 8000868:	f7ff ff52 	bl	8000710 <is_data>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d0f9      	beq.n	8000866 <is_response+0x3e>
		 while(buffer_peek(SLAVE_DEV_PORT) == str[curr_pos])
 8000872:	2001      	movs	r0, #1
 8000874:	f7ff fdf6 	bl	8000464 <buffer_peek>
 8000878:	4601      	mov	r1, r0
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	4413      	add	r3, r2
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	4299      	cmp	r1, r3
 8000884:	d0e2      	beq.n	800084c <is_response+0x24>
	while(curr_pos != len)
 8000886:	68fa      	ldr	r2, [r7, #12]
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	429a      	cmp	r2, r3
 800088c:	d1d8      	bne.n	8000840 <is_response+0x18>
		 }

	}
	return -1;
 800088e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000892:	4618      	mov	r0, r3
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <buffer_send_string>:
	}
}

/*Function to send a string to the buffer*/
void buffer_send_string(const char *s,portType uart)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
 80008a2:	460b      	mov	r3, r1
 80008a4:	70fb      	strb	r3, [r7, #3]
	while( *s != '\0')
 80008a6:	e008      	b.n	80008ba <buffer_send_string+0x20>
	{
		buffer_write(*s++,uart);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	1c5a      	adds	r2, r3, #1
 80008ac:	607a      	str	r2, [r7, #4]
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	78fa      	ldrb	r2, [r7, #3]
 80008b2:	4611      	mov	r1, r2
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff fea7 	bl	8000608 <buffer_write>
	while( *s != '\0')
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d1f2      	bne.n	80008a8 <buffer_send_string+0xe>
	}
}
 80008c2:	bf00      	nop
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <slave_dev_uart_callback>:

void slave_dev_uart_callback(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
	/*Check if RXNE is raised and RXNEIE is enabled*/
	if(((USART1->SR & SR_RXNE ) != 0) &&((USART1->CR1 & CR1_RXNEIE) !=0))
 80008d2:	4b2c      	ldr	r3, [pc, #176]	; (8000984 <slave_dev_uart_callback+0xb8>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f003 0320 	and.w	r3, r3, #32
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d00f      	beq.n	80008fe <slave_dev_uart_callback+0x32>
 80008de:	4b29      	ldr	r3, [pc, #164]	; (8000984 <slave_dev_uart_callback+0xb8>)
 80008e0:	68db      	ldr	r3, [r3, #12]
 80008e2:	f003 0320 	and.w	r3, r3, #32
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d009      	beq.n	80008fe <slave_dev_uart_callback+0x32>
	{
	  unsigned char c =  USART1->DR;
 80008ea:	4b26      	ldr	r3, [pc, #152]	; (8000984 <slave_dev_uart_callback+0xb8>)
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	71fb      	strb	r3, [r7, #7]
	  buff_store_char(c,_rx_buffer1);
 80008f0:	4b25      	ldr	r3, [pc, #148]	; (8000988 <slave_dev_uart_callback+0xbc>)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	4611      	mov	r1, r2
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff fd4b 	bl	8000394 <buff_store_char>
	}

	/*Check if TXE is raised and TXEIE is enabled*/
	if(((USART1->SR & SR_TXE ) != 0) &&((USART1->CR1 & CR1_TXEIE) !=0))
 80008fe:	4b21      	ldr	r3, [pc, #132]	; (8000984 <slave_dev_uart_callback+0xb8>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000906:	2b00      	cmp	r3, #0
 8000908:	d037      	beq.n	800097a <slave_dev_uart_callback+0xae>
 800090a:	4b1e      	ldr	r3, [pc, #120]	; (8000984 <slave_dev_uart_callback+0xb8>)
 800090c:	68db      	ldr	r3, [r3, #12]
 800090e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000912:	2b00      	cmp	r3, #0
 8000914:	d031      	beq.n	800097a <slave_dev_uart_callback+0xae>
	{
		if(tx_buffer1.head == tx_buffer1.tail)
 8000916:	4b1d      	ldr	r3, [pc, #116]	; (800098c <slave_dev_uart_callback+0xc0>)
 8000918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800091c:	f8d3 2770 	ldr.w	r2, [r3, #1904]	; 0x770
 8000920:	4b1a      	ldr	r3, [pc, #104]	; (800098c <slave_dev_uart_callback+0xc0>)
 8000922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000926:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 800092a:	429a      	cmp	r2, r3
 800092c:	d106      	bne.n	800093c <slave_dev_uart_callback+0x70>
		{
			USART1->CR1 &= ~CR1_TXEIE;
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <slave_dev_uart_callback+0xb8>)
 8000930:	68db      	ldr	r3, [r3, #12]
 8000932:	4a14      	ldr	r2, [pc, #80]	; (8000984 <slave_dev_uart_callback+0xb8>)
 8000934:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000938:	60d3      	str	r3, [r2, #12]
			USART1->DR =  c;
		}
	}


}
 800093a:	e01e      	b.n	800097a <slave_dev_uart_callback+0xae>
			unsigned char c =  tx_buffer1.buffer[tx_buffer1.tail];
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <slave_dev_uart_callback+0xc0>)
 800093e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000942:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 8000946:	4a11      	ldr	r2, [pc, #68]	; (800098c <slave_dev_uart_callback+0xc0>)
 8000948:	5cd3      	ldrb	r3, [r2, r3]
 800094a:	71bb      	strb	r3, [r7, #6]
			tx_buffer1.tail =  (uint32_t)(tx_buffer1.tail +1)%UART_BUFFER_SIZE;
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <slave_dev_uart_callback+0xc0>)
 800094e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000952:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 8000956:	1c5a      	adds	r2, r3, #1
 8000958:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <slave_dev_uart_callback+0xc4>)
 800095a:	fba3 1302 	umull	r1, r3, r3, r2
 800095e:	09db      	lsrs	r3, r3, #7
 8000960:	f241 7170 	movw	r1, #6000	; 0x1770
 8000964:	fb01 f303 	mul.w	r3, r1, r3
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	4a08      	ldr	r2, [pc, #32]	; (800098c <slave_dev_uart_callback+0xc0>)
 800096c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000970:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
			USART1->DR =  c;
 8000974:	4a03      	ldr	r2, [pc, #12]	; (8000984 <slave_dev_uart_callback+0xb8>)
 8000976:	79bb      	ldrb	r3, [r7, #6]
 8000978:	6053      	str	r3, [r2, #4]
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40011000 	.word	0x40011000
 8000988:	20005e60 	.word	0x20005e60
 800098c:	200017f8 	.word	0x200017f8
 8000990:	057619f1 	.word	0x057619f1

08000994 <debug_uart_callback>:


void debug_uart_callback(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
	/*Check if RXNE is raised and RXNEIE is enabled*/
	if(((USART2->SR & SR_RXNE ) != 0) &&((USART2->CR1 & CR1_RXNEIE) !=0))
 800099a:	4b2c      	ldr	r3, [pc, #176]	; (8000a4c <debug_uart_callback+0xb8>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f003 0320 	and.w	r3, r3, #32
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d00f      	beq.n	80009c6 <debug_uart_callback+0x32>
 80009a6:	4b29      	ldr	r3, [pc, #164]	; (8000a4c <debug_uart_callback+0xb8>)
 80009a8:	68db      	ldr	r3, [r3, #12]
 80009aa:	f003 0320 	and.w	r3, r3, #32
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d009      	beq.n	80009c6 <debug_uart_callback+0x32>
	{
	  unsigned char c =  USART2->DR;
 80009b2:	4b26      	ldr	r3, [pc, #152]	; (8000a4c <debug_uart_callback+0xb8>)
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	71fb      	strb	r3, [r7, #7]
	  buff_store_char(c,_rx_buffer2);
 80009b8:	4b25      	ldr	r3, [pc, #148]	; (8000a50 <debug_uart_callback+0xbc>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	4611      	mov	r1, r2
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff fce7 	bl	8000394 <buff_store_char>
	}

	/*Check if TXE is raised and TXEIE is enabled*/
	if(((USART2->SR & SR_TXE ) != 0) &&((USART2->CR1 & CR1_TXEIE) !=0))
 80009c6:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <debug_uart_callback+0xb8>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d037      	beq.n	8000a42 <debug_uart_callback+0xae>
 80009d2:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <debug_uart_callback+0xb8>)
 80009d4:	68db      	ldr	r3, [r3, #12]
 80009d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d031      	beq.n	8000a42 <debug_uart_callback+0xae>
	{
		if(tx_buffer2.head == tx_buffer2.tail)
 80009de:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <debug_uart_callback+0xc0>)
 80009e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80009e4:	f8d3 2770 	ldr.w	r2, [r3, #1904]	; 0x770
 80009e8:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <debug_uart_callback+0xc0>)
 80009ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80009ee:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d106      	bne.n	8000a04 <debug_uart_callback+0x70>
		{
			USART2->CR1 &= ~CR1_TXEIE;
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <debug_uart_callback+0xb8>)
 80009f8:	68db      	ldr	r3, [r3, #12]
 80009fa:	4a14      	ldr	r2, [pc, #80]	; (8000a4c <debug_uart_callback+0xb8>)
 80009fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000a00:	60d3      	str	r3, [r2, #12]
			USART2->DR =  c;
		}
	}


}
 8000a02:	e01e      	b.n	8000a42 <debug_uart_callback+0xae>
			unsigned char c =  tx_buffer2.buffer[tx_buffer2.tail];
 8000a04:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <debug_uart_callback+0xc0>)
 8000a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a0a:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 8000a0e:	4a11      	ldr	r2, [pc, #68]	; (8000a54 <debug_uart_callback+0xc0>)
 8000a10:	5cd3      	ldrb	r3, [r2, r3]
 8000a12:	71bb      	strb	r3, [r7, #6]
			tx_buffer2.tail =  (uint32_t)(tx_buffer2.tail +1)%UART_BUFFER_SIZE;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <debug_uart_callback+0xc0>)
 8000a16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a1a:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 8000a1e:	1c5a      	adds	r2, r3, #1
 8000a20:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <debug_uart_callback+0xc4>)
 8000a22:	fba3 1302 	umull	r1, r3, r3, r2
 8000a26:	09db      	lsrs	r3, r3, #7
 8000a28:	f241 7170 	movw	r1, #6000	; 0x1770
 8000a2c:	fb01 f303 	mul.w	r3, r1, r3
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <debug_uart_callback+0xc0>)
 8000a34:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000a38:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
			USART2->DR =  c;
 8000a3c:	4a03      	ldr	r2, [pc, #12]	; (8000a4c <debug_uart_callback+0xb8>)
 8000a3e:	79bb      	ldrb	r3, [r7, #6]
 8000a40:	6053      	str	r3, [r2, #4]
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40004400 	.word	0x40004400
 8000a50:	20005e68 	.word	0x20005e68
 8000a54:	200046e8 	.word	0x200046e8
 8000a58:	057619f1 	.word	0x057619f1

08000a5c <process_copy>:




static int8_t process_copy(char * str, char * dest_buffer, int start_pos)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b088      	sub	sp, #32
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
	int curr_pos = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
	int len =  strlen(str);
 8000a6c:	68f8      	ldr	r0, [r7, #12]
 8000a6e:	f7ff fbb7 	bl	80001e0 <strlen>
 8000a72:	4603      	mov	r3, r0
 8000a74:	617b      	str	r3, [r7, #20]
	int indx = start_pos;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	61bb      	str	r3, [r7, #24]

	while(!is_data(SLAVE_DEV_PORT)){}
 8000a7a:	bf00      	nop
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f7ff fe47 	bl	8000710 <is_data>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d0f9      	beq.n	8000a7c <process_copy+0x20>

	while(buffer_peek(SLAVE_DEV_PORT) != str[curr_pos] )
 8000a88:	e02f      	b.n	8000aea <process_copy+0x8e>
	{
		dest_buffer[indx] =  _rx_buffer1->buffer[_rx_buffer1->tail];
 8000a8a:	4b3c      	ldr	r3, [pc, #240]	; (8000b7c <process_copy+0x120>)
 8000a8c:	6819      	ldr	r1, [r3, #0]
 8000a8e:	4b3b      	ldr	r3, [pc, #236]	; (8000b7c <process_copy+0x120>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a96:	f8d3 2774 	ldr.w	r2, [r3, #1908]	; 0x774
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	68b8      	ldr	r0, [r7, #8]
 8000a9e:	4403      	add	r3, r0
 8000aa0:	5c8a      	ldrb	r2, [r1, r2]
 8000aa2:	701a      	strb	r2, [r3, #0]
		_rx_buffer1->tail =  (uint16_t)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8000aa4:	4b35      	ldr	r3, [pc, #212]	; (8000b7c <process_copy+0x120>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000aac:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	4a32      	ldr	r2, [pc, #200]	; (8000b80 <process_copy+0x124>)
 8000ab8:	fba2 1203 	umull	r1, r2, r2, r3
 8000abc:	09d2      	lsrs	r2, r2, #7
 8000abe:	f241 7170 	movw	r1, #6000	; 0x1770
 8000ac2:	fb01 f202 	mul.w	r2, r1, r2
 8000ac6:	1a9b      	subs	r3, r3, r2
 8000ac8:	b29a      	uxth	r2, r3
 8000aca:	4b2c      	ldr	r3, [pc, #176]	; (8000b7c <process_copy+0x120>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ad2:	f8c3 2774 	str.w	r2, [r3, #1908]	; 0x774
		indx++;
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	61bb      	str	r3, [r7, #24]

		while(!is_data(SLAVE_DEV_PORT)){}
 8000adc:	bf00      	nop
 8000ade:	2001      	movs	r0, #1
 8000ae0:	f7ff fe16 	bl	8000710 <is_data>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d0f9      	beq.n	8000ade <process_copy+0x82>
	while(buffer_peek(SLAVE_DEV_PORT) != str[curr_pos] )
 8000aea:	2001      	movs	r0, #1
 8000aec:	f7ff fcba 	bl	8000464 <buffer_peek>
 8000af0:	4601      	mov	r1, r0
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	68fa      	ldr	r2, [r7, #12]
 8000af6:	4413      	add	r3, r2
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	4299      	cmp	r1, r3
 8000afc:	d1c5      	bne.n	8000a8a <process_copy+0x2e>


	}

	while(buffer_peek(SLAVE_DEV_PORT) == str[curr_pos])
 8000afe:	e01b      	b.n	8000b38 <process_copy+0xdc>
	{
		curr_pos++;
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	3301      	adds	r3, #1
 8000b04:	61fb      	str	r3, [r7, #28]
		dest_buffer[indx++] = buffer_read(SLAVE_DEV_PORT);
 8000b06:	2001      	movs	r0, #1
 8000b08:	f7ff fcf8 	bl	80004fc <buffer_read>
 8000b0c:	4601      	mov	r1, r0
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	1c5a      	adds	r2, r3, #1
 8000b12:	61ba      	str	r2, [r7, #24]
 8000b14:	461a      	mov	r2, r3
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	4413      	add	r3, r2
 8000b1a:	b2ca      	uxtb	r2, r1
 8000b1c:	701a      	strb	r2, [r3, #0]

		if(curr_pos == len){
 8000b1e:	69fa      	ldr	r2, [r7, #28]
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d101      	bne.n	8000b2a <process_copy+0xce>

			return 1;
 8000b26:	2301      	movs	r3, #1
 8000b28:	e023      	b.n	8000b72 <process_copy+0x116>
		}

		while(!is_data(SLAVE_DEV_PORT)){}
 8000b2a:	bf00      	nop
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	f7ff fdef 	bl	8000710 <is_data>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d0f9      	beq.n	8000b2c <process_copy+0xd0>
	while(buffer_peek(SLAVE_DEV_PORT) == str[curr_pos])
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f7ff fc93 	bl	8000464 <buffer_peek>
 8000b3e:	4601      	mov	r1, r0
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	68fa      	ldr	r2, [r7, #12]
 8000b44:	4413      	add	r3, r2
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	4299      	cmp	r1, r3
 8000b4a:	d0d9      	beq.n	8000b00 <process_copy+0xa4>

	}

	if(curr_pos != len)
 8000b4c:	69fa      	ldr	r2, [r7, #28]
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d006      	beq.n	8000b62 <process_copy+0x106>
	{
		curr_pos = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]

		process_copy(str, dest_buffer, indx);
 8000b58:	69ba      	ldr	r2, [r7, #24]
 8000b5a:	68b9      	ldr	r1, [r7, #8]
 8000b5c:	68f8      	ldr	r0, [r7, #12]
 8000b5e:	f7ff ff7d 	bl	8000a5c <process_copy>

	}

	if(curr_pos  ==  len)
 8000b62:	69fa      	ldr	r2, [r7, #28]
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d101      	bne.n	8000b6e <process_copy+0x112>
	{
		return 1;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e001      	b.n	8000b72 <process_copy+0x116>
	}
	else
	{
		return -1;
 8000b6e:	f04f 33ff 	mov.w	r3, #4294967295
	}



}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3720      	adds	r7, #32
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20005e60 	.word	0x20005e60
 8000b80:	057619f1 	.word	0x057619f1

08000b84 <copy_up_to_string>:
int8_t copy_up_to_string(char * str, char * dest_buffer)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
	/*Process copy*/
	return (process_copy(str,dest_buffer, 0));
 8000b8e:	2200      	movs	r2, #0
 8000b90:	6839      	ldr	r1, [r7, #0]
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f7ff ff62 	bl	8000a5c <process_copy>
 8000b98:	4603      	mov	r3, r0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <USART2_IRQHandler>:
void USART2_IRQHandler (void)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	af00      	add	r7, sp, #0
	debug_uart_callback();
 8000ba6:	f7ff fef5 	bl	8000994 <debug_uart_callback>
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}

08000bae <USART1_IRQHandler>:

void USART1_IRQHandler (void)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	af00      	add	r7, sp, #0
	slave_dev_uart_callback();
 8000bb2:	f7ff fe8b 	bl	80008cc <slave_dev_uart_callback>
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	db0b      	blt.n	8000be6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	f003 021f 	and.w	r2, r3, #31
 8000bd4:	4907      	ldr	r1, [pc, #28]	; (8000bf4 <__NVIC_EnableIRQ+0x38>)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	095b      	lsrs	r3, r3, #5
 8000bdc:	2001      	movs	r0, #1
 8000bde:	fa00 f202 	lsl.w	r2, r0, r2
 8000be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000e100 	.word	0xe000e100

08000bf8 <debug_uart_init>:
	uart_write(ch);
	return ch;
}

void debug_uart_init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000bfc:	4b36      	ldr	r3, [pc, #216]	; (8000cd8 <debug_uart_init+0xe0>)
 8000bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c00:	4a35      	ldr	r2, [pc, #212]	; (8000cd8 <debug_uart_init+0xe0>)
 8000c02:	f043 0301 	orr.w	r3, r3, #1
 8000c06:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set the mode of PA2 to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 8000c08:	4b34      	ldr	r3, [pc, #208]	; (8000cdc <debug_uart_init+0xe4>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a33      	ldr	r2, [pc, #204]	; (8000cdc <debug_uart_init+0xe4>)
 8000c0e:	f023 0310 	bic.w	r3, r3, #16
 8000c12:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 8000c14:	4b31      	ldr	r3, [pc, #196]	; (8000cdc <debug_uart_init+0xe4>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a30      	ldr	r2, [pc, #192]	; (8000cdc <debug_uart_init+0xe4>)
 8000c1a:	f043 0320 	orr.w	r3, r3, #32
 8000c1e:	6013      	str	r3, [r2, #0]

	/*Set the mode of PA3 to alternate function mode*/
	GPIOA->MODER &=~(1U<<6);
 8000c20:	4b2e      	ldr	r3, [pc, #184]	; (8000cdc <debug_uart_init+0xe4>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a2d      	ldr	r2, [pc, #180]	; (8000cdc <debug_uart_init+0xe4>)
 8000c26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c2a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<7);
 8000c2c:	4b2b      	ldr	r3, [pc, #172]	; (8000cdc <debug_uart_init+0xe4>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a2a      	ldr	r2, [pc, #168]	; (8000cdc <debug_uart_init+0xe4>)
 8000c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c36:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF7(UART2_TX)*/
	GPIOA->AFR[0] |=(1U<<8);
 8000c38:	4b28      	ldr	r3, [pc, #160]	; (8000cdc <debug_uart_init+0xe4>)
 8000c3a:	6a1b      	ldr	r3, [r3, #32]
 8000c3c:	4a27      	ldr	r2, [pc, #156]	; (8000cdc <debug_uart_init+0xe4>)
 8000c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c42:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 8000c44:	4b25      	ldr	r3, [pc, #148]	; (8000cdc <debug_uart_init+0xe4>)
 8000c46:	6a1b      	ldr	r3, [r3, #32]
 8000c48:	4a24      	ldr	r2, [pc, #144]	; (8000cdc <debug_uart_init+0xe4>)
 8000c4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c4e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 8000c50:	4b22      	ldr	r3, [pc, #136]	; (8000cdc <debug_uart_init+0xe4>)
 8000c52:	6a1b      	ldr	r3, [r3, #32]
 8000c54:	4a21      	ldr	r2, [pc, #132]	; (8000cdc <debug_uart_init+0xe4>)
 8000c56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c5a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8000c5c:	4b1f      	ldr	r3, [pc, #124]	; (8000cdc <debug_uart_init+0xe4>)
 8000c5e:	6a1b      	ldr	r3, [r3, #32]
 8000c60:	4a1e      	ldr	r2, [pc, #120]	; (8000cdc <debug_uart_init+0xe4>)
 8000c62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000c66:	6213      	str	r3, [r2, #32]


	/*Set alternate function type to AF7(UART2_RX)*/
	GPIOA->AFR[0] |=(1U<<12);
 8000c68:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <debug_uart_init+0xe4>)
 8000c6a:	6a1b      	ldr	r3, [r3, #32]
 8000c6c:	4a1b      	ldr	r2, [pc, #108]	; (8000cdc <debug_uart_init+0xe4>)
 8000c6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c72:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<13);
 8000c74:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <debug_uart_init+0xe4>)
 8000c76:	6a1b      	ldr	r3, [r3, #32]
 8000c78:	4a18      	ldr	r2, [pc, #96]	; (8000cdc <debug_uart_init+0xe4>)
 8000c7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c7e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<14);
 8000c80:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <debug_uart_init+0xe4>)
 8000c82:	6a1b      	ldr	r3, [r3, #32]
 8000c84:	4a15      	ldr	r2, [pc, #84]	; (8000cdc <debug_uart_init+0xe4>)
 8000c86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c8a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<15);
 8000c8c:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <debug_uart_init+0xe4>)
 8000c8e:	6a1b      	ldr	r3, [r3, #32]
 8000c90:	4a12      	ldr	r2, [pc, #72]	; (8000cdc <debug_uart_init+0xe4>)
 8000c92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000c96:	6213      	str	r3, [r2, #32]

	/*Enable clock access to UART2*/
     RCC->APB1ENR |=	UART2EN;
 8000c98:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <debug_uart_init+0xe0>)
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9c:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <debug_uart_init+0xe0>)
 8000c9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca2:	6413      	str	r3, [r2, #64]	; 0x40


 	/*Disable UART Module*/
      USART2->CR1 &= ~CR1_UE;
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <debug_uart_init+0xe8>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	; (8000ce0 <debug_uart_init+0xe8>)
 8000caa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000cae:	60d3      	str	r3, [r2, #12]

	/*Configure uart baudrate*/
     uart_set_baudrate(APB1_CLK,DBG_UART_BAUDRATE);
 8000cb0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000cb4:	480b      	ldr	r0, [pc, #44]	; (8000ce4 <debug_uart_init+0xec>)
 8000cb6:	f000 f8a7 	bl	8000e08 <uart_set_baudrate>

	/*Configure transfer direction*/
     USART2->CR1 = CR1_TE | CR1_RE;
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <debug_uart_init+0xe8>)
 8000cbc:	220c      	movs	r2, #12
 8000cbe:	60da      	str	r2, [r3, #12]

     //NOTE:  Enable Tranmit Interrupt and Receive interrupt
     //In a separate function

     /*Enable interrupt in NVIC*/
    NVIC_EnableIRQ(USART2_IRQn);
 8000cc0:	2026      	movs	r0, #38	; 0x26
 8000cc2:	f7ff ff7b 	bl	8000bbc <__NVIC_EnableIRQ>

	/*Enable UART Module*/
     USART2->CR1 |= CR1_UE;
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <debug_uart_init+0xe8>)
 8000cc8:	68db      	ldr	r3, [r3, #12]
 8000cca:	4a05      	ldr	r2, [pc, #20]	; (8000ce0 <debug_uart_init+0xe8>)
 8000ccc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cd0:	60d3      	str	r3, [r2, #12]
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020000 	.word	0x40020000
 8000ce0:	40004400 	.word	0x40004400
 8000ce4:	00f42400 	.word	0x00f42400

08000ce8 <esp_uart_init>:
{
	/*Set Pa8 to high*/
	GPIOA->ODR |=(1U<<8);
}
void esp_uart_init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000cec:	4b38      	ldr	r3, [pc, #224]	; (8000dd0 <esp_uart_init+0xe8>)
 8000cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf0:	4a37      	ldr	r2, [pc, #220]	; (8000dd0 <esp_uart_init+0xe8>)
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set the mode of PA9 to alternate function mode*/
	GPIOA->MODER &=~(1U<<18);
 8000cf8:	4b36      	ldr	r3, [pc, #216]	; (8000dd4 <esp_uart_init+0xec>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a35      	ldr	r2, [pc, #212]	; (8000dd4 <esp_uart_init+0xec>)
 8000cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d02:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<19);
 8000d04:	4b33      	ldr	r3, [pc, #204]	; (8000dd4 <esp_uart_init+0xec>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a32      	ldr	r2, [pc, #200]	; (8000dd4 <esp_uart_init+0xec>)
 8000d0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d0e:	6013      	str	r3, [r2, #0]

	/*Set the mode of PA10 to alternate function mode*/
	GPIOA->MODER &=~(1U<<20);
 8000d10:	4b30      	ldr	r3, [pc, #192]	; (8000dd4 <esp_uart_init+0xec>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a2f      	ldr	r2, [pc, #188]	; (8000dd4 <esp_uart_init+0xec>)
 8000d16:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000d1a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<21);
 8000d1c:	4b2d      	ldr	r3, [pc, #180]	; (8000dd4 <esp_uart_init+0xec>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a2c      	ldr	r2, [pc, #176]	; (8000dd4 <esp_uart_init+0xec>)
 8000d22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d26:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF7(UART2_TX)*/
	GPIOA->AFR[1] |=(1U<<4);
 8000d28:	4b2a      	ldr	r3, [pc, #168]	; (8000dd4 <esp_uart_init+0xec>)
 8000d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d2c:	4a29      	ldr	r2, [pc, #164]	; (8000dd4 <esp_uart_init+0xec>)
 8000d2e:	f043 0310 	orr.w	r3, r3, #16
 8000d32:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=(1U<<5);
 8000d34:	4b27      	ldr	r3, [pc, #156]	; (8000dd4 <esp_uart_init+0xec>)
 8000d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d38:	4a26      	ldr	r2, [pc, #152]	; (8000dd4 <esp_uart_init+0xec>)
 8000d3a:	f043 0320 	orr.w	r3, r3, #32
 8000d3e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=(1U<<6);
 8000d40:	4b24      	ldr	r3, [pc, #144]	; (8000dd4 <esp_uart_init+0xec>)
 8000d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d44:	4a23      	ldr	r2, [pc, #140]	; (8000dd4 <esp_uart_init+0xec>)
 8000d46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d4a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &=~(1U<<7);
 8000d4c:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <esp_uart_init+0xec>)
 8000d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d50:	4a20      	ldr	r2, [pc, #128]	; (8000dd4 <esp_uart_init+0xec>)
 8000d52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d56:	6253      	str	r3, [r2, #36]	; 0x24


	/*Set alternate function type to AF7(UART2_RX)*/
	GPIOA->AFR[1] |=(1U<<8);
 8000d58:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <esp_uart_init+0xec>)
 8000d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5c:	4a1d      	ldr	r2, [pc, #116]	; (8000dd4 <esp_uart_init+0xec>)
 8000d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d62:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=(1U<<9);
 8000d64:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <esp_uart_init+0xec>)
 8000d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d68:	4a1a      	ldr	r2, [pc, #104]	; (8000dd4 <esp_uart_init+0xec>)
 8000d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d6e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=(1U<<10);
 8000d70:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <esp_uart_init+0xec>)
 8000d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d74:	4a17      	ldr	r2, [pc, #92]	; (8000dd4 <esp_uart_init+0xec>)
 8000d76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d7a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &=~(1U<<11);
 8000d7c:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <esp_uart_init+0xec>)
 8000d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d80:	4a14      	ldr	r2, [pc, #80]	; (8000dd4 <esp_uart_init+0xec>)
 8000d82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000d86:	6253      	str	r3, [r2, #36]	; 0x24

	/*Enable clock access to UART1*/
     RCC->APB2ENR |=	UART1EN;
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <esp_uart_init+0xe8>)
 8000d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8c:	4a10      	ldr	r2, [pc, #64]	; (8000dd0 <esp_uart_init+0xe8>)
 8000d8e:	f043 0310 	orr.w	r3, r3, #16
 8000d92:	6453      	str	r3, [r2, #68]	; 0x44


 	/*Disable UART Module*/
     USART1->CR1 &= ~CR1_UE;
 8000d94:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <esp_uart_init+0xf0>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	4a0f      	ldr	r2, [pc, #60]	; (8000dd8 <esp_uart_init+0xf0>)
 8000d9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000d9e:	60d3      	str	r3, [r2, #12]

	/*Configure uart baudrate*/
     USART1->BRR = compute_uart_bd(APB2_CLK,DBG_UART_BAUDRATE);
 8000da0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000da4:	480d      	ldr	r0, [pc, #52]	; (8000ddc <esp_uart_init+0xf4>)
 8000da6:	f000 f81b 	bl	8000de0 <compute_uart_bd>
 8000daa:	4603      	mov	r3, r0
 8000dac:	461a      	mov	r2, r3
 8000dae:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <esp_uart_init+0xf0>)
 8000db0:	609a      	str	r2, [r3, #8]

	/*Configure transfer direction*/
     USART1->CR1 = CR1_TE | CR1_RE;
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <esp_uart_init+0xf0>)
 8000db4:	220c      	movs	r2, #12
 8000db6:	60da      	str	r2, [r3, #12]

     //NOTE:  Enable Tranmit Interrupt and Receive interrupt
     //In a separate function

     /*Enable interrupt in NVIC*/
    NVIC_EnableIRQ(USART1_IRQn);
 8000db8:	2025      	movs	r0, #37	; 0x25
 8000dba:	f7ff feff 	bl	8000bbc <__NVIC_EnableIRQ>

	/*Enable UART Module*/
     USART1->CR1 |= CR1_UE;
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <esp_uart_init+0xf0>)
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <esp_uart_init+0xf0>)
 8000dc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dc8:	60d3      	str	r3, [r2, #12]
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40020000 	.word	0x40020000
 8000dd8:	40011000 	.word	0x40011000
 8000ddc:	00f42400 	.word	0x00f42400

08000de0 <compute_uart_bd>:

	/*Write to transmit data register*/
	USART1->DR =(ch & 0xFF);
}
static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
	return((periph_clk + (baudrate/2U))/baudrate);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	085a      	lsrs	r2, r3, #1
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	441a      	add	r2, r3
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df8:	b29b      	uxth	r3, r3
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
	...

08000e08 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 8000e12:	6839      	ldr	r1, [r7, #0]
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff ffe3 	bl	8000de0 <compute_uart_bd>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <uart_set_baudrate+0x24>)
 8000e20:	609a      	str	r2, [r3, #8]
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40004400 	.word	0x40004400

08000e30 <esp8266_init>:
static void esp82xx_startup_test(void);
static void esp82xx_sta_mode(void);
static void esp82xx_ap_connect(char *ssid, char *password);

void esp8266_init(char *ssid, char *password)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
	esp82xx_reset();
 8000e3a:	f000 f829 	bl	8000e90 <esp82xx_reset>
	esp82xx_startup_test();
 8000e3e:	f000 f80b 	bl	8000e58 <esp82xx_startup_test>
	esp82xx_sta_mode();
 8000e42:	f000 f845 	bl	8000ed0 <esp82xx_sta_mode>
	esp82xx_ap_connect(ssid, password);
 8000e46:	6839      	ldr	r1, [r7, #0]
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f000 f85d 	bl	8000f08 <esp82xx_ap_connect>
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <esp82xx_startup_test>:
 static void esp82xx_startup_test(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
	/*Clear ESP uart buffer*/
	buffer_clear(esp82xx_port);
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f7ff facd 	bl	80003fc <buffer_clear>

	/*Send test command*/
	buffer_send_string("AT\r\n",esp82xx_port);
 8000e62:	2101      	movs	r1, #1
 8000e64:	4807      	ldr	r0, [pc, #28]	; (8000e84 <esp82xx_startup_test+0x2c>)
 8000e66:	f7ff fd18 	bl	800089a <buffer_send_string>

	/*Wait for "OK" response*/
	while(!(is_response("OK\r\n"))){}
 8000e6a:	bf00      	nop
 8000e6c:	4806      	ldr	r0, [pc, #24]	; (8000e88 <esp82xx_startup_test+0x30>)
 8000e6e:	f7ff fcdb 	bl	8000828 <is_response>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d0f9      	beq.n	8000e6c <esp82xx_startup_test+0x14>


	buffer_send_string("AT startup test successful....\n\r",debug_port);
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4804      	ldr	r0, [pc, #16]	; (8000e8c <esp82xx_startup_test+0x34>)
 8000e7c:	f7ff fd0d 	bl	800089a <buffer_send_string>
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	080026cc 	.word	0x080026cc
 8000e88:	080026d4 	.word	0x080026d4
 8000e8c:	080026dc 	.word	0x080026dc

08000e90 <esp82xx_reset>:


static void esp82xx_reset(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
	/*Clear ESP uart buffer*/
	buffer_clear(esp82xx_port);
 8000e94:	2001      	movs	r0, #1
 8000e96:	f7ff fab1 	bl	80003fc <buffer_clear>

	/*Send test command*/
	buffer_send_string("AT+RST\r\n",esp82xx_port);
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	4809      	ldr	r0, [pc, #36]	; (8000ec4 <esp82xx_reset+0x34>)
 8000e9e:	f7ff fcfc 	bl	800089a <buffer_send_string>

	/*Delay for 1 second*/
	systick_delay_ms(1000);
 8000ea2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ea6:	f000 fe9b 	bl	8001be0 <systick_delay_ms>

	/*Wait for "OK" response*/
	while(!(is_response("OK\r\n"))){}
 8000eaa:	bf00      	nop
 8000eac:	4806      	ldr	r0, [pc, #24]	; (8000ec8 <esp82xx_reset+0x38>)
 8000eae:	f7ff fcbb 	bl	8000828 <is_response>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d0f9      	beq.n	8000eac <esp82xx_reset+0x1c>

	buffer_send_string("Reset was successful....\n\r",debug_port);
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4804      	ldr	r0, [pc, #16]	; (8000ecc <esp82xx_reset+0x3c>)
 8000ebc:	f7ff fced 	bl	800089a <buffer_send_string>
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	08002700 	.word	0x08002700
 8000ec8:	080026d4 	.word	0x080026d4
 8000ecc:	0800270c 	.word	0x0800270c

08000ed0 <esp82xx_sta_mode>:


static void esp82xx_sta_mode(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	/*Clear ESP uart buffer*/
	buffer_clear(esp82xx_port);
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	f7ff fa91 	bl	80003fc <buffer_clear>

	/*Send test command*/
	buffer_send_string("AT+CWMODE=1\r\n",esp82xx_port);
 8000eda:	2101      	movs	r1, #1
 8000edc:	4807      	ldr	r0, [pc, #28]	; (8000efc <esp82xx_sta_mode+0x2c>)
 8000ede:	f7ff fcdc 	bl	800089a <buffer_send_string>

	/*Wait for "OK" response*/
	while(!(is_response("OK\r\n"))){}
 8000ee2:	bf00      	nop
 8000ee4:	4806      	ldr	r0, [pc, #24]	; (8000f00 <esp82xx_sta_mode+0x30>)
 8000ee6:	f7ff fc9f 	bl	8000828 <is_response>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d0f9      	beq.n	8000ee4 <esp82xx_sta_mode+0x14>


	buffer_send_string("STA Mode set successful....\n\r",debug_port);
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4804      	ldr	r0, [pc, #16]	; (8000f04 <esp82xx_sta_mode+0x34>)
 8000ef4:	f7ff fcd1 	bl	800089a <buffer_send_string>
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	08002728 	.word	0x08002728
 8000f00:	080026d4 	.word	0x080026d4
 8000f04:	08002738 	.word	0x08002738

08000f08 <esp82xx_ap_connect>:


static void esp82xx_ap_connect(char *ssid, char *password)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b096      	sub	sp, #88	; 0x58
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
	char data[80];

	/*Clear ESP uart buffer*/
	buffer_clear(esp82xx_port);
 8000f12:	2001      	movs	r0, #1
 8000f14:	f7ff fa72 	bl	80003fc <buffer_clear>

	buffer_send_string("Connecting to access point....\n\r",debug_port);
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4814      	ldr	r0, [pc, #80]	; (8000f6c <esp82xx_ap_connect+0x64>)
 8000f1c:	f7ff fcbd 	bl	800089a <buffer_send_string>

	/*Pust ssid, password and command into one string packet*/
	sprintf(data,"AT+CWJAP=\"%s\",\"%s\"\r\n",ssid,password);
 8000f20:	f107 0008 	add.w	r0, r7, #8
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	4911      	ldr	r1, [pc, #68]	; (8000f70 <esp82xx_ap_connect+0x68>)
 8000f2a:	f000 ff55 	bl	8001dd8 <siprintf>

	/*Send test command*/
	buffer_send_string(data,esp82xx_port);
 8000f2e:	f107 0308 	add.w	r3, r7, #8
 8000f32:	2101      	movs	r1, #1
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fcb0 	bl	800089a <buffer_send_string>

	/*Wait for "OK" response*/
	while(!(is_response("OK\r\n"))){}
 8000f3a:	bf00      	nop
 8000f3c:	480d      	ldr	r0, [pc, #52]	; (8000f74 <esp82xx_ap_connect+0x6c>)
 8000f3e:	f7ff fc73 	bl	8000828 <is_response>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d0f9      	beq.n	8000f3c <esp82xx_ap_connect+0x34>

    sprintf(data,"Connected : \"%s\"\r\n",ssid);
 8000f48:	f107 0308 	add.w	r3, r7, #8
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	490a      	ldr	r1, [pc, #40]	; (8000f78 <esp82xx_ap_connect+0x70>)
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 ff41 	bl	8001dd8 <siprintf>

	buffer_send_string(data,debug_port);
 8000f56:	f107 0308 	add.w	r3, r7, #8
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fc9c 	bl	800089a <buffer_send_string>
}
 8000f62:	bf00      	nop
 8000f64:	3758      	adds	r7, #88	; 0x58
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	08002758 	.word	0x08002758
 8000f70:	0800277c 	.word	0x0800277c
 8000f74:	080026d4 	.word	0x080026d4
 8000f78:	08002794 	.word	0x08002794

08000f7c <esp82xx_get_firmware>:

void esp82xx_get_firmware(char *dest_buffer, const char *firmware_file)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000f88:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8000f8c:	6018      	str	r0, [r3, #0]
 8000f8e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000f92:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8000f96:	6019      	str	r1, [r3, #0]
	/*Buffer to hold HTTP GET request and other string*/
	char request_buffer[TEMP_BUFF_LNG_SZ] = {0};
 8000f98:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000f9c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	f44f 7215 	mov.w	r2, #596	; 0x254
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 fed7 	bl	8001d60 <memset>
	char send_command_buffer[TEMP_BUFF2_SHT_SZ] = {0};
 8000fb2:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000fb6:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	3304      	adds	r3, #4
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
 8000fcc:	615a      	str	r2, [r3, #20]
 8000fce:	831a      	strh	r2, [r3, #24]

	/*Clear esp uart buffer*/
	buffer_clear(esp82xx_port);
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	f7ff fa13 	bl	80003fc <buffer_clear>

	/*Establish a TCP connection to the server*/
	buffer_send_string(TCP_START_COMMAND,esp82xx_port);
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	482c      	ldr	r0, [pc, #176]	; (800108c <esp82xx_get_firmware+0x110>)
 8000fda:	f7ff fc5e 	bl	800089a <buffer_send_string>

	/*Wait until connection is successfully established*/
	while(!is_response(OK_RESPONSE)){}
 8000fde:	bf00      	nop
 8000fe0:	482b      	ldr	r0, [pc, #172]	; (8001090 <esp82xx_get_firmware+0x114>)
 8000fe2:	f7ff fc21 	bl	8000828 <is_response>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d0f9      	beq.n	8000fe0 <esp82xx_get_firmware+0x64>

	/*Prepare the HTTP GET request to retrieve the file*/
	snprintf(request_buffer, sizeof(request_buffer),HTTP_GET_REQUEST_FIRM,firmware_file);
 8000fec:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000ff0:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8000ff4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a26      	ldr	r2, [pc, #152]	; (8001094 <esp82xx_get_firmware+0x118>)
 8000ffc:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001000:	f000 feb6 	bl	8001d70 <sniprintf>

	/*Get the length of the prepared request*/
	int request_length = strlen(request_buffer);
 8001004:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff f8e9 	bl	80001e0 <strlen>
 800100e:	4603      	mov	r3, r0
 8001010:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284

	/*Prepare the AT+CIPSEND command with the request length */

	snprintf(send_command_buffer,sizeof(send_command_buffer),CIPSEND_COMMAND,request_length);
 8001014:	f107 000c 	add.w	r0, r7, #12
 8001018:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 800101c:	4a1e      	ldr	r2, [pc, #120]	; (8001098 <esp82xx_get_firmware+0x11c>)
 800101e:	211e      	movs	r1, #30
 8001020:	f000 fea6 	bl	8001d70 <sniprintf>

	/*Send the AT+CIPSEND command */
	buffer_send_string(send_command_buffer,esp82xx_port);
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	2101      	movs	r1, #1
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fc35 	bl	800089a <buffer_send_string>

	/*Wait for the ESP to be ready to receive the HTTP GET request*/
	while(!is_response(SEND_PROMPT)){}
 8001030:	bf00      	nop
 8001032:	481a      	ldr	r0, [pc, #104]	; (800109c <esp82xx_get_firmware+0x120>)
 8001034:	f7ff fbf8 	bl	8000828 <is_response>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d0f9      	beq.n	8001032 <esp82xx_get_firmware+0xb6>

	/*Send the actual HTTP GET request to the server*/
	buffer_send_string(request_buffer,esp82xx_port);
 800103e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001042:	2101      	movs	r1, #1
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fc28 	bl	800089a <buffer_send_string>

	/*Wait to confirm that the data was sent*/
	while(!is_response(SEND_OK_RESPONSE)){}
 800104a:	bf00      	nop
 800104c:	4814      	ldr	r0, [pc, #80]	; (80010a0 <esp82xx_get_firmware+0x124>)
 800104e:	f7ff fbeb 	bl	8000828 <is_response>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0f9      	beq.n	800104c <esp82xx_get_firmware+0xd0>

	/*Wait for the HTTP response header to finish*/
	while(!is_response(END_OF_HEADERS)){}
 8001058:	bf00      	nop
 800105a:	4812      	ldr	r0, [pc, #72]	; (80010a4 <esp82xx_get_firmware+0x128>)
 800105c:	f7ff fbe4 	bl	8000828 <is_response>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0f9      	beq.n	800105a <esp82xx_get_firmware+0xde>

	/*Copy the data to destination buffer*/
	while(!copy_up_to_string(CLOSED_RESPONSE,dest_buffer)){}
 8001066:	bf00      	nop
 8001068:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800106c:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8001070:	6819      	ldr	r1, [r3, #0]
 8001072:	480d      	ldr	r0, [pc, #52]	; (80010a8 <esp82xx_get_firmware+0x12c>)
 8001074:	f7ff fd86 	bl	8000b84 <copy_up_to_string>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0f4      	beq.n	8001068 <esp82xx_get_firmware+0xec>



}
 800107e:	bf00      	nop
 8001080:	bf00      	nop
 8001082:	f507 7722 	add.w	r7, r7, #648	; 0x288
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	080027a8 	.word	0x080027a8
 8001090:	080026d4 	.word	0x080026d4
 8001094:	080027e0 	.word	0x080027e0
 8001098:	08002838 	.word	0x08002838
 800109c:	08002848 	.word	0x08002848
 80010a0:	0800284c 	.word	0x0800284c
 80010a4:	08002858 	.word	0x08002858
 80010a8:	08002860 	.word	0x08002860

080010ac <esp82xx_get_version_file>:


void esp82xx_get_version_file(char *dest_buffer)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80010b8:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80010bc:	6018      	str	r0, [r3, #0]
	/*Buffer to hold HTTP GET request and other string*/
	char request_buffer[TEMP_BUFF_LNG_SZ] = {0};
 80010be:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80010c2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	3304      	adds	r3, #4
 80010cc:	f44f 7215 	mov.w	r2, #596	; 0x254
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 fe44 	bl	8001d60 <memset>
	char send_command_buffer[TEMP_BUFF2_SHT_SZ] = {0};
 80010d8:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80010dc:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	3304      	adds	r3, #4
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
 80010f0:	611a      	str	r2, [r3, #16]
 80010f2:	615a      	str	r2, [r3, #20]
 80010f4:	831a      	strh	r2, [r3, #24]

	/*Clear esp uart buffer*/
	buffer_clear(esp82xx_port);
 80010f6:	2001      	movs	r0, #1
 80010f8:	f7ff f980 	bl	80003fc <buffer_clear>

	/*Establish a TCP connection to the server*/
	buffer_send_string(TCP_START_COMMAND,esp82xx_port);
 80010fc:	2101      	movs	r1, #1
 80010fe:	482a      	ldr	r0, [pc, #168]	; (80011a8 <esp82xx_get_version_file+0xfc>)
 8001100:	f7ff fbcb 	bl	800089a <buffer_send_string>

	/*Wait until connection is successfully established*/
	while(!is_response(OK_RESPONSE)){}
 8001104:	bf00      	nop
 8001106:	4829      	ldr	r0, [pc, #164]	; (80011ac <esp82xx_get_version_file+0x100>)
 8001108:	f7ff fb8e 	bl	8000828 <is_response>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0f9      	beq.n	8001106 <esp82xx_get_version_file+0x5a>

	/*Prepare the HTTP GET request to retrieve the file*/
	snprintf(request_buffer, sizeof(request_buffer),HTTP_GET_REQUEST_VER_FILE);
 8001112:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001116:	4a26      	ldr	r2, [pc, #152]	; (80011b0 <esp82xx_get_version_file+0x104>)
 8001118:	f44f 7116 	mov.w	r1, #600	; 0x258
 800111c:	4618      	mov	r0, r3
 800111e:	f000 fe27 	bl	8001d70 <sniprintf>

	/*Get the length of the prepared request*/
	int request_length = strlen(request_buffer);
 8001122:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff f85a 	bl	80001e0 <strlen>
 800112c:	4603      	mov	r3, r0
 800112e:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284

	/*Prepare the AT+CIPSEND command with the request length */

	snprintf(send_command_buffer,sizeof(send_command_buffer),CIPSEND_COMMAND,request_length);
 8001132:	f107 000c 	add.w	r0, r7, #12
 8001136:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 800113a:	4a1e      	ldr	r2, [pc, #120]	; (80011b4 <esp82xx_get_version_file+0x108>)
 800113c:	211e      	movs	r1, #30
 800113e:	f000 fe17 	bl	8001d70 <sniprintf>

	/*Send the AT+CIPSEND command */
	buffer_send_string(send_command_buffer,esp82xx_port);
 8001142:	f107 030c 	add.w	r3, r7, #12
 8001146:	2101      	movs	r1, #1
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fba6 	bl	800089a <buffer_send_string>

	/*Wait for the ESP to be ready to receive the HTTP GET request*/
	while(!is_response(SEND_PROMPT)){}
 800114e:	bf00      	nop
 8001150:	4819      	ldr	r0, [pc, #100]	; (80011b8 <esp82xx_get_version_file+0x10c>)
 8001152:	f7ff fb69 	bl	8000828 <is_response>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d0f9      	beq.n	8001150 <esp82xx_get_version_file+0xa4>

	/*Send the actual HTTP GET request to the server*/
	buffer_send_string(request_buffer,esp82xx_port);
 800115c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001160:	2101      	movs	r1, #1
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fb99 	bl	800089a <buffer_send_string>

	/*Wait to confirm that the data was sent*/
	while(!is_response(SEND_OK_RESPONSE)){}
 8001168:	bf00      	nop
 800116a:	4814      	ldr	r0, [pc, #80]	; (80011bc <esp82xx_get_version_file+0x110>)
 800116c:	f7ff fb5c 	bl	8000828 <is_response>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0f9      	beq.n	800116a <esp82xx_get_version_file+0xbe>

	/*Wait for the HTTP response header to finish*/
	while(!is_response(END_OF_HEADERS)){}
 8001176:	bf00      	nop
 8001178:	4811      	ldr	r0, [pc, #68]	; (80011c0 <esp82xx_get_version_file+0x114>)
 800117a:	f7ff fb55 	bl	8000828 <is_response>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d0f9      	beq.n	8001178 <esp82xx_get_version_file+0xcc>

	/*Copy the data to destination buffer*/
	while(!copy_up_to_string(CLOSED_RESPONSE,dest_buffer)){}
 8001184:	bf00      	nop
 8001186:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800118a:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800118e:	6819      	ldr	r1, [r3, #0]
 8001190:	480c      	ldr	r0, [pc, #48]	; (80011c4 <esp82xx_get_version_file+0x118>)
 8001192:	f7ff fcf7 	bl	8000b84 <copy_up_to_string>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d0f4      	beq.n	8001186 <esp82xx_get_version_file+0xda>



}
 800119c:	bf00      	nop
 800119e:	bf00      	nop
 80011a0:	f507 7722 	add.w	r7, r7, #648	; 0x288
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	080027a8 	.word	0x080027a8
 80011ac:	080026d4 	.word	0x080026d4
 80011b0:	0800286c 	.word	0x0800286c
 80011b4:	08002838 	.word	0x08002838
 80011b8:	08002848 	.word	0x08002848
 80011bc:	0800284c 	.word	0x0800284c
 80011c0:	08002858 	.word	0x08002858
 80011c4:	08002860 	.word	0x08002860

080011c8 <flash_ex_erase>:
StatusTypeDef  flash_wait_for_last_operation(uint32_t timeout);
static void flush_caches(void);


StatusTypeDef flash_ex_erase(FLASH_EraseInitTypeDef *pt_erase_init, uint32_t *sect_err)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
	StatusTypeDef  status =  DEV_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	73fb      	strb	r3, [r7, #15]
	uint32_t index = 0U;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]

	/*wait for last operation to be completed*/
	status = flash_wait_for_last_operation(FLASH_TIMEOUT_VALUE);
 80011da:	f24c 3050 	movw	r0, #50000	; 0xc350
 80011de:	f000 f8b9 	bl	8001354 <flash_wait_for_last_operation>
 80011e2:	4603      	mov	r3, r0
 80011e4:	73fb      	strb	r3, [r7, #15]

	if( status  == DEV_OK)
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d145      	bne.n	8001278 <flash_ex_erase+0xb0>
	{
	   *sect_err =  0xFFFFFFFFU;
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	f04f 32ff 	mov.w	r2, #4294967295
 80011f2:	601a      	str	r2, [r3, #0]

	   if(pt_erase_init->TypeErase ==  FLASH_TYPEERASE_MASSERASE)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d112      	bne.n	8001222 <flash_ex_erase+0x5a>
	   {
		   /*Mass erase*/
		   flash_mass_erase((uint8_t)pt_erase_init->VoltageRange);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	b2db      	uxtb	r3, r3
 8001202:	4618      	mov	r0, r3
 8001204:	f000 f884 	bl	8001310 <flash_mass_erase>

			/*wait for last operation to be completed*/
			status = flash_wait_for_last_operation(FLASH_TIMEOUT_VALUE);
 8001208:	f24c 3050 	movw	r0, #50000	; 0xc350
 800120c:	f000 f8a2 	bl	8001354 <flash_wait_for_last_operation>
 8001210:	4603      	mov	r3, r0
 8001212:	73fb      	strb	r3, [r7, #15]

			/*Disable MER bit*/
			FLASH->CR &=~(1U<<2);
 8001214:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <flash_ex_erase+0xbc>)
 8001216:	691b      	ldr	r3, [r3, #16]
 8001218:	4a1a      	ldr	r2, [pc, #104]	; (8001284 <flash_ex_erase+0xbc>)
 800121a:	f023 0304 	bic.w	r3, r3, #4
 800121e:	6113      	str	r3, [r2, #16]
 8001220:	e028      	b.n	8001274 <flash_ex_erase+0xac>
	   }
	   else
	   {
		   /*Sector erase*/
		   for(index = pt_erase_init->Sector; index <  (pt_erase_init->NbSectors + pt_erase_init->Sector); index++)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	e01c      	b.n	8001264 <flash_ex_erase+0x9c>
		   {
			   flash_sector_erase(index, (uint8_t)pt_erase_init->VoltageRange);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	b2db      	uxtb	r3, r3
 8001230:	4619      	mov	r1, r3
 8001232:	68b8      	ldr	r0, [r7, #8]
 8001234:	f000 f828 	bl	8001288 <flash_sector_erase>

				/*wait for last operation to be completed*/
				status = flash_wait_for_last_operation(FLASH_TIMEOUT_VALUE);
 8001238:	f24c 3050 	movw	r0, #50000	; 0xc350
 800123c:	f000 f88a 	bl	8001354 <flash_wait_for_last_operation>
 8001240:	4603      	mov	r3, r0
 8001242:	73fb      	strb	r3, [r7, #15]

				/*Clear SNB bit and SER bit*/
				CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <flash_ex_erase+0xbc>)
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	4a0e      	ldr	r2, [pc, #56]	; (8001284 <flash_ex_erase+0xbc>)
 800124a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800124e:	6113      	str	r3, [r2, #16]

				if(status !=DEV_OK)
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <flash_ex_erase+0x96>
				{
					*sect_err =  index;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	68ba      	ldr	r2, [r7, #8]
 800125a:	601a      	str	r2, [r3, #0]
					break;
 800125c:	e00a      	b.n	8001274 <flash_ex_erase+0xac>
		   for(index = pt_erase_init->Sector; index <  (pt_erase_init->NbSectors + pt_erase_init->Sector); index++)
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	3301      	adds	r3, #1
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	4413      	add	r3, r2
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	429a      	cmp	r2, r3
 8001272:	d3da      	bcc.n	800122a <flash_ex_erase+0x62>
				}
		   }
	   }

	   flush_caches();
 8001274:	f000 f984 	bl	8001580 <flush_caches>

	}

	return status;
 8001278:	7bfb      	ldrb	r3, [r7, #15]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40023c00 	.word	0x40023c00

08001288 <flash_sector_erase>:


void flash_sector_erase(uint32_t sector, uint8_t voltage_range)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp_psize = 0U;
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]

	if(voltage_range ==  FLASH_VOLTAGE_RANGE_1)
 8001298:	78fb      	ldrb	r3, [r7, #3]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d102      	bne.n	80012a4 <flash_sector_erase+0x1c>
	{
		tmp_psize = FLASH_PSIZE_BYTE;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	e010      	b.n	80012c6 <flash_sector_erase+0x3e>
	}
	else if(voltage_range ==  FLASH_VOLTAGE_RANGE_2)
 80012a4:	78fb      	ldrb	r3, [r7, #3]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d103      	bne.n	80012b2 <flash_sector_erase+0x2a>
	{
		tmp_psize = FLASH_PSIZE_HALF_WORD;
 80012aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	e009      	b.n	80012c6 <flash_sector_erase+0x3e>
	}
	else if(voltage_range ==  FLASH_VOLTAGE_RANGE_3)
 80012b2:	78fb      	ldrb	r3, [r7, #3]
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d103      	bne.n	80012c0 <flash_sector_erase+0x38>
	{
		tmp_psize = FLASH_PSIZE_WORD;
 80012b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	e002      	b.n	80012c6 <flash_sector_erase+0x3e>
	}
	else
	{
		tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80012c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012c4:	60fb      	str	r3, [r7, #12]

	}

	FLASH->CR &=~FLASH_CR_PSIZE;
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <flash_sector_erase+0x84>)
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	4a10      	ldr	r2, [pc, #64]	; (800130c <flash_sector_erase+0x84>)
 80012cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012d0:	6113      	str	r3, [r2, #16]
	FLASH->CR |= tmp_psize;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <flash_sector_erase+0x84>)
 80012d4:	691a      	ldr	r2, [r3, #16]
 80012d6:	490d      	ldr	r1, [pc, #52]	; (800130c <flash_sector_erase+0x84>)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4313      	orrs	r3, r2
 80012dc:	610b      	str	r3, [r1, #16]

	/*Set SER bit and select sector*/
	FLASH->CR |=  FLASH_CR_SER |(sector << FLASH_CR_SNB_Pos);
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <flash_sector_erase+0x84>)
 80012e0:	691a      	ldr	r2, [r3, #16]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	4313      	orrs	r3, r2
 80012e8:	4a08      	ldr	r2, [pc, #32]	; (800130c <flash_sector_erase+0x84>)
 80012ea:	f043 0302 	orr.w	r3, r3, #2
 80012ee:	6113      	str	r3, [r2, #16]

	/*Very IMPORTANT*/
	FLASH->CR |= FLASH_CR_STRT;
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <flash_sector_erase+0x84>)
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	4a05      	ldr	r2, [pc, #20]	; (800130c <flash_sector_erase+0x84>)
 80012f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012fa:	6113      	str	r3, [r2, #16]
	flash_wait_for_last_operation(5);
 80012fc:	2005      	movs	r0, #5
 80012fe:	f000 f829 	bl	8001354 <flash_wait_for_last_operation>


}
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40023c00 	.word	0x40023c00

08001310 <flash_mass_erase>:

void flash_mass_erase(uint8_t voltage_range)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
	/*Clear PSIZE field*/
	FLASH->CR &=~FLASH_CR_PSIZE;
 800131a:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <flash_mass_erase+0x40>)
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	4a0c      	ldr	r2, [pc, #48]	; (8001350 <flash_mass_erase+0x40>)
 8001320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001324:	6113      	str	r3, [r2, #16]

	/*Set MER bit*/
	FLASH->CR |= FLASH_CR_MER;
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <flash_mass_erase+0x40>)
 8001328:	691b      	ldr	r3, [r3, #16]
 800132a:	4a09      	ldr	r2, [pc, #36]	; (8001350 <flash_mass_erase+0x40>)
 800132c:	f043 0304 	orr.w	r3, r3, #4
 8001330:	6113      	str	r3, [r2, #16]
	/*Set Start bit and voltage*/
	FLASH->CR |=  FLASH_CR_STRT |((uint32_t)voltage_range <<8U);
 8001332:	4b07      	ldr	r3, [pc, #28]	; (8001350 <flash_mass_erase+0x40>)
 8001334:	691a      	ldr	r2, [r3, #16]
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	021b      	lsls	r3, r3, #8
 800133a:	4313      	orrs	r3, r2
 800133c:	4a04      	ldr	r2, [pc, #16]	; (8001350 <flash_mass_erase+0x40>)
 800133e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001342:	6113      	str	r3, [r2, #16]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	40023c00 	.word	0x40023c00

08001354 <flash_wait_for_last_operation>:

StatusTypeDef  flash_wait_for_last_operation(uint32_t timeout)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]

   pFlash.ErrorCode = 0;
 8001360:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <flash_wait_for_last_operation+0x64>)
 8001362:	2200      	movs	r2, #0
 8001364:	615a      	str	r2, [r3, #20]

   tickstart = get_tick();
 8001366:	f000 fc59 	bl	8001c1c <get_tick>
 800136a:	60f8      	str	r0, [r7, #12]

   while((FLASH->SR & FLASH_SR_BSY) != RESET)
 800136c:	e010      	b.n	8001390 <flash_wait_for_last_operation+0x3c>
   {
	   if(timeout != MAX_DELAY)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001374:	d00c      	beq.n	8001390 <flash_wait_for_last_operation+0x3c>
	   {
		   if((timeout  == 0) || ((get_tick() -  tickstart) > timeout))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d007      	beq.n	800138c <flash_wait_for_last_operation+0x38>
 800137c:	f000 fc4e 	bl	8001c1c <get_tick>
 8001380:	4602      	mov	r2, r0
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	429a      	cmp	r2, r3
 800138a:	d201      	bcs.n	8001390 <flash_wait_for_last_operation+0x3c>
		   {
			   return DEV_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e00f      	b.n	80013b0 <flash_wait_for_last_operation+0x5c>
   while((FLASH->SR & FLASH_SR_BSY) != RESET)
 8001390:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <flash_wait_for_last_operation+0x68>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1e8      	bne.n	800136e <flash_wait_for_last_operation+0x1a>
		   }
	   }
   }

   /*Check end of operation flag*/
   if((FLASH->SR & (1U<<0)) != RESET)
 800139c:	4b07      	ldr	r3, [pc, #28]	; (80013bc <flash_wait_for_last_operation+0x68>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d002      	beq.n	80013ae <flash_wait_for_last_operation+0x5a>
   {
	   /*Clear flash end of operation pending bit*/
	   FLASH->SR = (1U<<0);
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <flash_wait_for_last_operation+0x68>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	60da      	str	r2, [r3, #12]
   }

   return DEV_OK;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20005e70 	.word	0x20005e70
 80013bc:	40023c00 	.word	0x40023c00

080013c0 <flash_program>:


StatusTypeDef flash_program(uint32_t prg_type,  uint32_t address, uint64_t data)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	e9c7 2300 	strd	r2, r3, [r7]
	StatusTypeDef status = DEV_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	75fb      	strb	r3, [r7, #23]

	/*wait for last operation to be completed*/
	status = flash_wait_for_last_operation(FLASH_TIMEOUT_VALUE);
 80013d2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013d6:	f7ff ffbd 	bl	8001354 <flash_wait_for_last_operation>
 80013da:	4603      	mov	r3, r0
 80013dc:	75fb      	strb	r3, [r7, #23]

	if( status == DEV_OK)
 80013de:	7dfb      	ldrb	r3, [r7, #23]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d12b      	bne.n	800143c <flash_program+0x7c>
	{
		if(prg_type == FLASH_TYPEPROGRAM_BYTE)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d105      	bne.n	80013f6 <flash_program+0x36>
		{
			flash_program_byte(address,(uint8_t)data);
 80013ea:	783b      	ldrb	r3, [r7, #0]
 80013ec:	4619      	mov	r1, r3
 80013ee:	68b8      	ldr	r0, [r7, #8]
 80013f0:	f000 f82c 	bl	800144c <flash_program_byte>
 80013f4:	e016      	b.n	8001424 <flash_program+0x64>
		}

		else if(prg_type == FLASH_TYPEPROGRAM_HALFWORD)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d105      	bne.n	8001408 <flash_program+0x48>
		{
			flash_program_halfword(address,(uint16_t)data);
 80013fc:	883b      	ldrh	r3, [r7, #0]
 80013fe:	4619      	mov	r1, r3
 8001400:	68b8      	ldr	r0, [r7, #8]
 8001402:	f000 f845 	bl	8001490 <flash_program_halfword>
 8001406:	e00d      	b.n	8001424 <flash_program+0x64>
		}
		else if(prg_type == FLASH_TYPEPROGRAM_WORD)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2b02      	cmp	r3, #2
 800140c:	d105      	bne.n	800141a <flash_program+0x5a>
		{
			flash_program_word(address,(uint32_t)data);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	4619      	mov	r1, r3
 8001412:	68b8      	ldr	r0, [r7, #8]
 8001414:	f000 f860 	bl	80014d8 <flash_program_word>
 8001418:	e004      	b.n	8001424 <flash_program+0x64>
		}
		else
		{
			flash_program_doubleword(address,data);
 800141a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800141e:	68b8      	ldr	r0, [r7, #8]
 8001420:	f000 f87c 	bl	800151c <flash_program_doubleword>

		}

		/*wait for last operation to be completed*/
		status = flash_wait_for_last_operation(FLASH_TIMEOUT_VALUE);
 8001424:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001428:	f7ff ff94 	bl	8001354 <flash_wait_for_last_operation>
 800142c:	4603      	mov	r3, r0
 800142e:	75fb      	strb	r3, [r7, #23]

		/*Clear Program bit*/
		FLASH->CR &=~FLASH_CR_PG;
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <flash_program+0x88>)
 8001432:	691b      	ldr	r3, [r3, #16]
 8001434:	4a04      	ldr	r2, [pc, #16]	; (8001448 <flash_program+0x88>)
 8001436:	f023 0301 	bic.w	r3, r3, #1
 800143a:	6113      	str	r3, [r2, #16]
	}

	return status;
 800143c:	7dfb      	ldrb	r3, [r7, #23]
}
 800143e:	4618      	mov	r0, r3
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40023c00 	.word	0x40023c00

0800144c <flash_program_byte>:
void flash_program_byte(uint32_t address, uint8_t data)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	70fb      	strb	r3, [r7, #3]
	/*Clear PSIZE field*/
	FLASH->CR &=~FLASH_CR_PSIZE;
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <flash_program_byte+0x40>)
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	4a0b      	ldr	r2, [pc, #44]	; (800148c <flash_program_byte+0x40>)
 800145e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001462:	6113      	str	r3, [r2, #16]

	/*Set PSIZE for byte*/
	FLASH->CR |=FLASH_PSIZE_BYTE;
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <flash_program_byte+0x40>)
 8001466:	4a09      	ldr	r2, [pc, #36]	; (800148c <flash_program_byte+0x40>)
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	6113      	str	r3, [r2, #16]

	/*Set PG bit*/
	FLASH->CR |= FLASH_CR_PG;
 800146c:	4b07      	ldr	r3, [pc, #28]	; (800148c <flash_program_byte+0x40>)
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	4a06      	ldr	r2, [pc, #24]	; (800148c <flash_program_byte+0x40>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	6113      	str	r3, [r2, #16]

	/*Put data at the address*/
	*(__IO uint8_t *)address =  data;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	78fa      	ldrb	r2, [r7, #3]
 800147c:	701a      	strb	r2, [r3, #0]
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	40023c00 	.word	0x40023c00

08001490 <flash_program_halfword>:

void flash_program_halfword(uint32_t address, uint16_t data)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	807b      	strh	r3, [r7, #2]
	/*Clear PSIZE field*/
	FLASH->CR &=~FLASH_CR_PSIZE;
 800149c:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <flash_program_halfword+0x44>)
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	4a0c      	ldr	r2, [pc, #48]	; (80014d4 <flash_program_halfword+0x44>)
 80014a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014a6:	6113      	str	r3, [r2, #16]

	/*Set PSIZE for halfword*/
	FLASH->CR |=FLASH_PSIZE_HALF_WORD;
 80014a8:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <flash_program_halfword+0x44>)
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	4a09      	ldr	r2, [pc, #36]	; (80014d4 <flash_program_halfword+0x44>)
 80014ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b2:	6113      	str	r3, [r2, #16]

	/*Set PG bit*/
	FLASH->CR |= FLASH_CR_PG;
 80014b4:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <flash_program_halfword+0x44>)
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	4a06      	ldr	r2, [pc, #24]	; (80014d4 <flash_program_halfword+0x44>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	6113      	str	r3, [r2, #16]

	/*Put data at the address*/
	*(__IO uint16_t *)address =  data;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	887a      	ldrh	r2, [r7, #2]
 80014c4:	801a      	strh	r2, [r3, #0]
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40023c00 	.word	0x40023c00

080014d8 <flash_program_word>:

void flash_program_word(uint32_t address, uint32_t data)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
	/*Clear PSIZE field*/
	FLASH->CR &=~FLASH_CR_PSIZE;
 80014e2:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <flash_program_word+0x40>)
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	4a0c      	ldr	r2, [pc, #48]	; (8001518 <flash_program_word+0x40>)
 80014e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014ec:	6113      	str	r3, [r2, #16]

	/*Set PSIZE for halfword*/
	FLASH->CR |=FLASH_PSIZE_WORD;
 80014ee:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <flash_program_word+0x40>)
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	4a09      	ldr	r2, [pc, #36]	; (8001518 <flash_program_word+0x40>)
 80014f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014f8:	6113      	str	r3, [r2, #16]

	/*Set PG bit*/
	FLASH->CR |= FLASH_CR_PG;
 80014fa:	4b07      	ldr	r3, [pc, #28]	; (8001518 <flash_program_word+0x40>)
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	4a06      	ldr	r2, [pc, #24]	; (8001518 <flash_program_word+0x40>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6113      	str	r3, [r2, #16]

	/*Put data at the address*/
	*(__IO uint32_t *)address =  data;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	601a      	str	r2, [r3, #0]
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	40023c00 	.word	0x40023c00

0800151c <flash_program_doubleword>:

void flash_program_doubleword(uint32_t address, uint64_t data)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	e9c7 2300 	strd	r2, r3, [r7]
	/*Clear PSIZE field*/
	FLASH->CR &=~FLASH_CR_PSIZE;
 8001528:	4b14      	ldr	r3, [pc, #80]	; (800157c <flash_program_doubleword+0x60>)
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	4a13      	ldr	r2, [pc, #76]	; (800157c <flash_program_doubleword+0x60>)
 800152e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001532:	6113      	str	r3, [r2, #16]

	/*Set PSIZE for halfword*/
	FLASH->CR |=FLASH_PSIZE_DOUBLE_WORD;
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <flash_program_doubleword+0x60>)
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	4a10      	ldr	r2, [pc, #64]	; (800157c <flash_program_doubleword+0x60>)
 800153a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800153e:	6113      	str	r3, [r2, #16]

	/*Set PG bit*/
	FLASH->CR |= FLASH_CR_PG;
 8001540:	4b0e      	ldr	r3, [pc, #56]	; (800157c <flash_program_doubleword+0x60>)
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	4a0d      	ldr	r2, [pc, #52]	; (800157c <flash_program_doubleword+0x60>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	6113      	str	r3, [r2, #16]

	/*Put  first word at the address*/
	*(__IO uint32_t *)address =  (uint32_t)data;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001552:	f3bf 8f6f 	isb	sy
}
 8001556:	bf00      	nop

	/*Flush pipeline : ensure programming is performed steps.*/
	__ISB();

	/*Put  second word at the address*/
	*(__IO uint32_t *)(address+4) =  (uint32_t)(data>>32);
 8001558:	e9d7 0100 	ldrd	r0, r1, [r7]
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	f04f 0300 	mov.w	r3, #0
 8001564:	000a      	movs	r2, r1
 8001566:	2300      	movs	r3, #0
 8001568:	68f9      	ldr	r1, [r7, #12]
 800156a:	3104      	adds	r1, #4
 800156c:	4613      	mov	r3, r2
 800156e:	600b      	str	r3, [r1, #0]
}
 8001570:	bf00      	nop
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	40023c00 	.word	0x40023c00

08001580 <flush_caches>:

static void flush_caches(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
	/*Flush instruction cache*/
	  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001584:	4b20      	ldr	r3, [pc, #128]	; (8001608 <flush_caches+0x88>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800158c:	2b00      	cmp	r3, #0
 800158e:	d017      	beq.n	80015c0 <flush_caches+0x40>
	  {
		    /* Disable instruction cache  */
			  FLASH->ACR &= (~FLASH_ACR_ICEN);
 8001590:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <flush_caches+0x88>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a1c      	ldr	r2, [pc, #112]	; (8001608 <flush_caches+0x88>)
 8001596:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800159a:	6013      	str	r3, [r2, #0]

			/* Reset instruction cache */
			  FLASH->ACR |= FLASH_ACR_ICRST;
 800159c:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <flush_caches+0x88>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a19      	ldr	r2, [pc, #100]	; (8001608 <flush_caches+0x88>)
 80015a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015a6:	6013      	str	r3, [r2, #0]
			 FLASH->ACR &= ~FLASH_ACR_ICRST;
 80015a8:	4b17      	ldr	r3, [pc, #92]	; (8001608 <flush_caches+0x88>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a16      	ldr	r2, [pc, #88]	; (8001608 <flush_caches+0x88>)
 80015ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80015b2:	6013      	str	r3, [r2, #0]


			 /* Enable instruction cache */
			 FLASH->ACR |= FLASH_ACR_ICEN;
 80015b4:	4b14      	ldr	r3, [pc, #80]	; (8001608 <flush_caches+0x88>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a13      	ldr	r2, [pc, #76]	; (8001608 <flush_caches+0x88>)
 80015ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015be:	6013      	str	r3, [r2, #0]
	  }

	  /*Flush data cache*/

	  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80015c0:	4b11      	ldr	r3, [pc, #68]	; (8001608 <flush_caches+0x88>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d017      	beq.n	80015fc <flush_caches+0x7c>
	  {
	    /* Disable data cache  */
		  FLASH->ACR &= (~FLASH_ACR_DCEN);
 80015cc:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <flush_caches+0x88>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a0d      	ldr	r2, [pc, #52]	; (8001608 <flush_caches+0x88>)
 80015d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015d6:	6013      	str	r3, [r2, #0]

	    /* Reset data cache */
	    FLASH->ACR |= FLASH_ACR_DCRST;
 80015d8:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <flush_caches+0x88>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a0a      	ldr	r2, [pc, #40]	; (8001608 <flush_caches+0x88>)
 80015de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015e2:	6013      	str	r3, [r2, #0]
	    FLASH->ACR &= ~FLASH_ACR_DCRST;
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <flush_caches+0x88>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a07      	ldr	r2, [pc, #28]	; (8001608 <flush_caches+0x88>)
 80015ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015ee:	6013      	str	r3, [r2, #0]

	    /* Enable data cache */
	    FLASH->ACR |= FLASH_ACR_DCEN;
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <flush_caches+0x88>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a04      	ldr	r2, [pc, #16]	; (8001608 <flush_caches+0x88>)
 80015f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015fa:	6013      	str	r3, [r2, #0]
	  }
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40023c00 	.word	0x40023c00

0800160c <flash_unlock>:


StatusTypeDef flash_unlock(void)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
	StatusTypeDef status = DEV_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	71fb      	strb	r3, [r7, #7]

	if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001616:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <flash_unlock+0x38>)
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	2b00      	cmp	r3, #0
 800161c:	da0b      	bge.n	8001636 <flash_unlock+0x2a>
	{

		/*Authorize flash write access*/
		FLASH->KEYR  =  FLASH_KEY1;
 800161e:	4b09      	ldr	r3, [pc, #36]	; (8001644 <flash_unlock+0x38>)
 8001620:	4a09      	ldr	r2, [pc, #36]	; (8001648 <flash_unlock+0x3c>)
 8001622:	605a      	str	r2, [r3, #4]
		FLASH->KEYR  =  FLASH_KEY2;
 8001624:	4b07      	ldr	r3, [pc, #28]	; (8001644 <flash_unlock+0x38>)
 8001626:	4a09      	ldr	r2, [pc, #36]	; (800164c <flash_unlock+0x40>)
 8001628:	605a      	str	r2, [r3, #4]

		if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <flash_unlock+0x38>)
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	2b00      	cmp	r3, #0
 8001630:	da01      	bge.n	8001636 <flash_unlock+0x2a>
		{
			status =  DEV_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	71fb      	strb	r3, [r7, #7]
		}

	}

	return status;
 8001636:	79fb      	ldrb	r3, [r7, #7]
}
 8001638:	4618      	mov	r0, r3
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	40023c00 	.word	0x40023c00
 8001648:	45670123 	.word	0x45670123
 800164c:	cdef89ab 	.word	0xcdef89ab

08001650 <flash_get_error>:
	return DEV_OK;
}


uint32_t flash_get_error(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
	return pFlash.ErrorCode;
 8001654:	4b03      	ldr	r3, [pc, #12]	; (8001664 <flash_get_error+0x14>)
 8001656:	695b      	ldr	r3, [r3, #20]
}
 8001658:	4618      	mov	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	20005e70 	.word	0x20005e70

08001668 <get_sector>:

static uint32_t get_sector(uint32_t address)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	uint32_t sector = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
	if((address < 0x08003FFF) && (address >= 0x08000000))
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a2e      	ldr	r2, [pc, #184]	; (8001730 <get_sector+0xc8>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d806      	bhi.n	800168a <get_sector+0x22>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001682:	d302      	bcc.n	800168a <get_sector+0x22>
	 {
	     sector = FLASH_SECTOR_0;
 8001684:	2300      	movs	r3, #0
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	e04b      	b.n	8001722 <get_sector+0xba>
	 }
   else if((address < 0x08007FFF) && (address >= 0x08004000))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a29      	ldr	r2, [pc, #164]	; (8001734 <get_sector+0xcc>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d806      	bhi.n	80016a0 <get_sector+0x38>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a28      	ldr	r2, [pc, #160]	; (8001738 <get_sector+0xd0>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d302      	bcc.n	80016a0 <get_sector+0x38>
   {
	 sector = FLASH_SECTOR_1;
 800169a:	2301      	movs	r3, #1
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	e040      	b.n	8001722 <get_sector+0xba>
   }
   else if((address < 0x0800BFFF) && (address >= 0x08008000))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a26      	ldr	r2, [pc, #152]	; (800173c <get_sector+0xd4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d806      	bhi.n	80016b6 <get_sector+0x4e>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a25      	ldr	r2, [pc, #148]	; (8001740 <get_sector+0xd8>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d302      	bcc.n	80016b6 <get_sector+0x4e>
   {
	 sector = FLASH_SECTOR_2;
 80016b0:	2302      	movs	r3, #2
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	e035      	b.n	8001722 <get_sector+0xba>
   }
   else if((address < 0x0800FFFF) && (address >= 0x0800C000))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a22      	ldr	r2, [pc, #136]	; (8001744 <get_sector+0xdc>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d206      	bcs.n	80016cc <get_sector+0x64>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a21      	ldr	r2, [pc, #132]	; (8001748 <get_sector+0xe0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d302      	bcc.n	80016cc <get_sector+0x64>
   {
	 sector = FLASH_SECTOR_3;
 80016c6:	2303      	movs	r3, #3
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	e02a      	b.n	8001722 <get_sector+0xba>
   }
   else if((address < 0x0801FFFF) && (address >= 0x08010000))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a1f      	ldr	r2, [pc, #124]	; (800174c <get_sector+0xe4>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d206      	bcs.n	80016e2 <get_sector+0x7a>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a1b      	ldr	r2, [pc, #108]	; (8001744 <get_sector+0xdc>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d902      	bls.n	80016e2 <get_sector+0x7a>
   {
	 sector = FLASH_SECTOR_4;
 80016dc:	2304      	movs	r3, #4
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	e01f      	b.n	8001722 <get_sector+0xba>
   }
   else if((address < 0x0803FFFF) && (address >= 0x08020000))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a1a      	ldr	r2, [pc, #104]	; (8001750 <get_sector+0xe8>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d206      	bcs.n	80016f8 <get_sector+0x90>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a17      	ldr	r2, [pc, #92]	; (800174c <get_sector+0xe4>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d902      	bls.n	80016f8 <get_sector+0x90>
   {
	 sector = FLASH_SECTOR_5;
 80016f2:	2305      	movs	r3, #5
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	e014      	b.n	8001722 <get_sector+0xba>
   }
   else if((address < 0x0805FFFF) && (address >= 0x08040000))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a16      	ldr	r2, [pc, #88]	; (8001754 <get_sector+0xec>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d206      	bcs.n	800170e <get_sector+0xa6>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a13      	ldr	r2, [pc, #76]	; (8001750 <get_sector+0xe8>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d902      	bls.n	800170e <get_sector+0xa6>
   {
	 sector = FLASH_SECTOR_6;
 8001708:	2306      	movs	r3, #6
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	e009      	b.n	8001722 <get_sector+0xba>
   }
   else if((address < 0x0807FFFF) && (address >= 0x08060000))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a11      	ldr	r2, [pc, #68]	; (8001758 <get_sector+0xf0>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d205      	bcs.n	8001722 <get_sector+0xba>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a0e      	ldr	r2, [pc, #56]	; (8001754 <get_sector+0xec>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d901      	bls.n	8001722 <get_sector+0xba>
   {
	 sector = FLASH_SECTOR_7;
 800171e:	2307      	movs	r3, #7
 8001720:	60fb      	str	r3, [r7, #12]
   else
   {
     //Do something
   }

	return sector;
 8001722:	68fb      	ldr	r3, [r7, #12]

}
 8001724:	4618      	mov	r0, r3
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	08003ffe 	.word	0x08003ffe
 8001734:	08007ffe 	.word	0x08007ffe
 8001738:	08004000 	.word	0x08004000
 800173c:	0800bffe 	.word	0x0800bffe
 8001740:	08008000 	.word	0x08008000
 8001744:	0800ffff 	.word	0x0800ffff
 8001748:	0800c000 	.word	0x0800c000
 800174c:	0801ffff 	.word	0x0801ffff
 8001750:	0803ffff 	.word	0x0803ffff
 8001754:	0805ffff 	.word	0x0805ffff
 8001758:	0807ffff 	.word	0x0807ffff

0800175c <flash_write_data_byte>:

uint32_t flash_write_data_byte(uint32_t start_sect_addr, uint8_t *data, uint16_t numberofbytes)
{
 800175c:	b5b0      	push	{r4, r5, r7, lr}
 800175e:	b08e      	sub	sp, #56	; 0x38
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	4613      	mov	r3, r2
 8001768:	80fb      	strh	r3, [r7, #6]
    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t sect_err;
    uint16_t write_count  = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	86fb      	strh	r3, [r7, #54]	; 0x36

    /* Unlock flash */
    flash_unlock();
 800176e:	f7ff ff4d 	bl	800160c <flash_unlock>

    /* Get Number of sectors to erase starting from the first sector */
    uint32_t start_sector = get_sector(start_sect_addr);
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	f7ff ff78 	bl	8001668 <get_sector>
 8001778:	6338      	str	r0, [r7, #48]	; 0x30
    uint32_t end_sect_addr = start_sect_addr + numberofbytes;
 800177a:	88fb      	ldrh	r3, [r7, #6]
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	4413      	add	r3, r2
 8001780:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t end_sector = get_sector(end_sect_addr);
 8001782:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001784:	f7ff ff70 	bl	8001668 <get_sector>
 8001788:	62b8      	str	r0, [r7, #40]	; 0x28

    /* Initialize EraseInit Struct */
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800178a:	2300      	movs	r3, #0
 800178c:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800178e:	2302      	movs	r3, #2
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
    EraseInitStruct.Sector = start_sector;
 8001792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001794:	61fb      	str	r3, [r7, #28]
    EraseInitStruct.NbSectors = (end_sector - start_sector) + 1;
 8001796:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	3301      	adds	r3, #1
 800179e:	623b      	str	r3, [r7, #32]

    if(flash_ex_erase(&EraseInitStruct, &sect_err) != DEV_OK)
 80017a0:	f107 0214 	add.w	r2, r7, #20
 80017a4:	f107 0318 	add.w	r3, r7, #24
 80017a8:	4611      	mov	r1, r2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fd0c 	bl	80011c8 <flash_ex_erase>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d01f      	beq.n	80017f6 <flash_write_data_byte+0x9a>
    {
        return flash_get_error();
 80017b6:	f7ff ff4b 	bl	8001650 <flash_get_error>
 80017ba:	4603      	mov	r3, r0
 80017bc:	e020      	b.n	8001800 <flash_write_data_byte+0xa4>
    }

    /* Program flash byte-by-byte */
    while(write_count < numberofbytes)
    {
        if(flash_program(FLASH_TYPEPROGRAM_BYTE, start_sect_addr, data[write_count]) == DEV_OK)
 80017be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80017c0:	68ba      	ldr	r2, [r7, #8]
 80017c2:	4413      	add	r3, r2
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2200      	movs	r2, #0
 80017ca:	461c      	mov	r4, r3
 80017cc:	4615      	mov	r5, r2
 80017ce:	4622      	mov	r2, r4
 80017d0:	462b      	mov	r3, r5
 80017d2:	68f9      	ldr	r1, [r7, #12]
 80017d4:	2000      	movs	r0, #0
 80017d6:	f7ff fdf3 	bl	80013c0 <flash_program>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d106      	bne.n	80017ee <flash_write_data_byte+0x92>
        {
            start_sect_addr += 1;  // Move to the next byte address
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	3301      	adds	r3, #1
 80017e4:	60fb      	str	r3, [r7, #12]
            write_count++;
 80017e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80017e8:	3301      	adds	r3, #1
 80017ea:	86fb      	strh	r3, [r7, #54]	; 0x36
 80017ec:	e003      	b.n	80017f6 <flash_write_data_byte+0x9a>
        }
        else
        {
            return flash_get_error();
 80017ee:	f7ff ff2f 	bl	8001650 <flash_get_error>
 80017f2:	4603      	mov	r3, r0
 80017f4:	e004      	b.n	8001800 <flash_write_data_byte+0xa4>
    while(write_count < numberofbytes)
 80017f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80017f8:	88fb      	ldrh	r3, [r7, #6]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d3df      	bcc.n	80017be <flash_write_data_byte+0x62>
        }
    }

    return 0;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	3738      	adds	r7, #56	; 0x38
 8001804:	46bd      	mov	sp, r7
 8001806:	bdb0      	pop	{r4, r5, r7, pc}

08001808 <jump_to_app>:

#define EMPTY_MEM		0xFFFFFFFF
typedef void (*func_ptr)(void);

void jump_to_app(uint32_t address)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001810:	b672      	cpsid	i
}
 8001812:	bf00      	nop
	func_ptr jump_to_app;

	/*Preparing for jump*/

	__disable_irq();   /*Disable global interrupts*/
	SysTick->CTRL = 0; /*Disable Systick*/
 8001814:	4b10      	ldr	r3, [pc, #64]	; (8001858 <jump_to_app+0x50>)
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]

	/*Disable and re-enable clock for AHB*/
	RCC->AHB1RSTR  =  0xFFFFFFFF;
 800181a:	4b10      	ldr	r3, [pc, #64]	; (800185c <jump_to_app+0x54>)
 800181c:	f04f 32ff 	mov.w	r2, #4294967295
 8001820:	611a      	str	r2, [r3, #16]
	RCC->AHB1RSTR  =  0x00000000;
 8001822:	4b0e      	ldr	r3, [pc, #56]	; (800185c <jump_to_app+0x54>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]

	if(  (*(uint32_t *)address) != EMPTY_MEM)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001830:	d00e      	beq.n	8001850 <jump_to_app+0x48>
	{
		/*Get reset handler address*/
		app_start_address =  *(uint32_t *)(address + 4);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3304      	adds	r3, #4
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	617b      	str	r3, [r7, #20]

		/*Convert to function pointer*/
		jump_to_app =  (func_ptr)app_start_address;
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	613b      	str	r3, [r7, #16]

		/*Initial the MSP*/
		__set_MSP(*(uint32_t *)address);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f383 8808 	msr	MSP, r3
}
 800184a:	bf00      	nop

		/*Jump*/
		jump_to_app();
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	4798      	blx	r3

		//Deal with emptiness

	}

}
 8001850:	bf00      	nop
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	e000e010 	.word	0xe000e010
 800185c:	40023800 	.word	0x40023800

08001860 <string_length>:
 * @brief Calculates the length of a null-terminated string.
 *
 * @param str Pointer to the null-terminated string.
 * @return The length of the string (number of characters before the null terminator).
 */
int string_length(const char *str) {
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
    int length = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	60fb      	str	r3, [r7, #12]

    // Iterate through the string until the null terminator is found
    while (str[length] != '\0') {
 800186c:	e002      	b.n	8001874 <string_length+0x14>
        length++;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	3301      	adds	r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
    while (str[length] != '\0') {
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1f6      	bne.n	800186e <string_length+0xe>
    }

    return length;
 8001880:	68fb      	ldr	r3, [r7, #12]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <find_substring>:
 * @param substr Pointer to the substring to search for.
 * @param str_size The size of the main string.
 * @return Pointer to the first occurrence of the substring within the main string,
 *         or NULL if the substring is not found.
 */
char* find_substring(const char *str, const char *substr, int str_size) {
 800188e:	b580      	push	{r7, lr}
 8001890:	b088      	sub	sp, #32
 8001892:	af00      	add	r7, sp, #0
 8001894:	60f8      	str	r0, [r7, #12]
 8001896:	60b9      	str	r1, [r7, #8]
 8001898:	607a      	str	r2, [r7, #4]
    int str_len = string_length(substr);
 800189a:	68b8      	ldr	r0, [r7, #8]
 800189c:	f7ff ffe0 	bl	8001860 <string_length>
 80018a0:	6138      	str	r0, [r7, #16]
    char *found_ptr = NULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]

    // Iterate through the main string up to the point where the substring could fully fit
    for (int i = 0; i <= (str_size - str_len); i++) {
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
 80018aa:	e022      	b.n	80018f2 <find_substring+0x64>
        int j = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]

        // Check if the substring matches at this position
        while (j < str_len && str[i + j] == substr[j]) {
 80018b0:	e002      	b.n	80018b8 <find_substring+0x2a>
            j++;
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	3301      	adds	r3, #1
 80018b6:	617b      	str	r3, [r7, #20]
        while (j < str_len && str[i + j] == substr[j]) {
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	429a      	cmp	r2, r3
 80018be:	da0c      	bge.n	80018da <find_substring+0x4c>
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	4413      	add	r3, r2
 80018c6:	461a      	mov	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4413      	add	r3, r2
 80018cc:	781a      	ldrb	r2, [r3, #0]
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	68b9      	ldr	r1, [r7, #8]
 80018d2:	440b      	add	r3, r1
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d0eb      	beq.n	80018b2 <find_substring+0x24>
        }

        // If we matched the entire substring, return the pointer to the start of the match
        if (j == str_len) {
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d104      	bne.n	80018ec <find_substring+0x5e>
            found_ptr = (char *)&str[i];
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	4413      	add	r3, r2
 80018e8:	61fb      	str	r3, [r7, #28]
            break;
 80018ea:	e008      	b.n	80018fe <find_substring+0x70>
    for (int i = 0; i <= (str_size - str_len); i++) {
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	3301      	adds	r3, #1
 80018f0:	61bb      	str	r3, [r7, #24]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	ddd6      	ble.n	80018ac <find_substring+0x1e>
        }
    }

    return found_ptr;
 80018fe:	69fb      	ldr	r3, [r7, #28]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3720      	adds	r7, #32
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <firmware_parse>:
 *
 * @param dst Pointer to the destination buffer where parsed data will be stored.
 * @param src Pointer to the source buffer containing the raw firmware data.
 * @param size The size of the source buffer in bytes.
 */
void firmware_parse(char *dst, const char *src, int size) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b08c      	sub	sp, #48	; 0x30
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
    uint16_t dst_index = 0;            // Index for tracking the position in the destination buffer
 8001914:	2300      	movs	r3, #0
 8001916:	85fb      	strh	r3, [r7, #46]	; 0x2e
    const char *current_pos = src;     // Pointer to the current position in the source buffer
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	62bb      	str	r3, [r7, #40]	; 0x28
    int remaining_size = size;         // Tracks the remaining bytes to process in the source buffer
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	627b      	str	r3, [r7, #36]	; 0x24

    // Iterate over the source buffer, extracting valid firmware data
    while (find_substring(current_pos, IPD_MARKER, remaining_size)) {
 8001920:	e037      	b.n	8001992 <firmware_parse+0x8a>
        // Calculate the number of valid bytes before the IPD_MARKER
        uint16_t valid_data_length = find_substring(current_pos, IPD_MARKER, remaining_size) - current_pos;
 8001922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001924:	4930      	ldr	r1, [pc, #192]	; (80019e8 <firmware_parse+0xe0>)
 8001926:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001928:	f7ff ffb1 	bl	800188e <find_substring>
 800192c:	4602      	mov	r2, r0
 800192e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	833b      	strh	r3, [r7, #24]

        // Copy the valid data to the destination buffer
        for (int i = 0; i < valid_data_length; i++) {
 8001934:	2300      	movs	r3, #0
 8001936:	623b      	str	r3, [r7, #32]
 8001938:	e00d      	b.n	8001956 <firmware_parse+0x4e>
            dst[dst_index] = current_pos[i];
 800193a:	6a3b      	ldr	r3, [r7, #32]
 800193c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800193e:	441a      	add	r2, r3
 8001940:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001942:	68f9      	ldr	r1, [r7, #12]
 8001944:	440b      	add	r3, r1
 8001946:	7812      	ldrb	r2, [r2, #0]
 8001948:	701a      	strb	r2, [r3, #0]
            dst_index++;
 800194a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800194c:	3301      	adds	r3, #1
 800194e:	85fb      	strh	r3, [r7, #46]	; 0x2e
        for (int i = 0; i < valid_data_length; i++) {
 8001950:	6a3b      	ldr	r3, [r7, #32]
 8001952:	3301      	adds	r3, #1
 8001954:	623b      	str	r3, [r7, #32]
 8001956:	8b3b      	ldrh	r3, [r7, #24]
 8001958:	6a3a      	ldr	r2, [r7, #32]
 800195a:	429a      	cmp	r2, r3
 800195c:	dbed      	blt.n	800193a <firmware_parse+0x32>
        }

        // Move the current position past the valid data and the IPD_MARKER
        current_pos += (valid_data_length + sizeof(IPD_MARKER) - 1);
 800195e:	8b3b      	ldrh	r3, [r7, #24]
 8001960:	3307      	adds	r3, #7
 8001962:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001964:	4413      	add	r3, r2
 8001966:	62bb      	str	r3, [r7, #40]	; 0x28
        remaining_size -= (valid_data_length + sizeof(IPD_MARKER) - 1);
 8001968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800196a:	8b3b      	ldrh	r3, [r7, #24]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	3b07      	subs	r3, #7
 8001970:	627b      	str	r3, [r7, #36]	; 0x24

        // Find the position of the next COLON_MARKER and adjust the remaining size
        const char* next_colon_pos = find_substring(current_pos, COLON_MARKER, remaining_size);
 8001972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001974:	491d      	ldr	r1, [pc, #116]	; (80019ec <firmware_parse+0xe4>)
 8001976:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001978:	f7ff ff89 	bl	800188e <find_substring>
 800197c:	6178      	str	r0, [r7, #20]
        remaining_size -= (int)(next_colon_pos + 1 - current_pos);
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	1c5a      	adds	r2, r3, #1
 8001982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
        current_pos = (next_colon_pos + 1);  // Move to the position after the colon
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	3301      	adds	r3, #1
 8001990:	62bb      	str	r3, [r7, #40]	; 0x28
    while (find_substring(current_pos, IPD_MARKER, remaining_size)) {
 8001992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001994:	4914      	ldr	r1, [pc, #80]	; (80019e8 <firmware_parse+0xe0>)
 8001996:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001998:	f7ff ff79 	bl	800188e <find_substring>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1bf      	bne.n	8001922 <firmware_parse+0x1a>
    }

    // Extract any remaining valid data before the CLOSED_MARKER
    uint16_t valid_data_length = find_substring(current_pos, CLOSED_MARKER, remaining_size) - current_pos;
 80019a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a4:	4912      	ldr	r1, [pc, #72]	; (80019f0 <firmware_parse+0xe8>)
 80019a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80019a8:	f7ff ff71 	bl	800188e <find_substring>
 80019ac:	4602      	mov	r2, r0
 80019ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	837b      	strh	r3, [r7, #26]

    // Copy the remaining valid data to the destination buffer
    for (int i = 0; i < valid_data_length; i++) {
 80019b4:	2300      	movs	r3, #0
 80019b6:	61fb      	str	r3, [r7, #28]
 80019b8:	e00d      	b.n	80019d6 <firmware_parse+0xce>
        dst[dst_index] = current_pos[i];
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019be:	441a      	add	r2, r3
 80019c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80019c2:	68f9      	ldr	r1, [r7, #12]
 80019c4:	440b      	add	r3, r1
 80019c6:	7812      	ldrb	r2, [r2, #0]
 80019c8:	701a      	strb	r2, [r3, #0]
        dst_index++;
 80019ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80019cc:	3301      	adds	r3, #1
 80019ce:	85fb      	strh	r3, [r7, #46]	; 0x2e
    for (int i = 0; i < valid_data_length; i++) {
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	3301      	adds	r3, #1
 80019d4:	61fb      	str	r3, [r7, #28]
 80019d6:	8b7b      	ldrh	r3, [r7, #26]
 80019d8:	69fa      	ldr	r2, [r7, #28]
 80019da:	429a      	cmp	r2, r3
 80019dc:	dbed      	blt.n	80019ba <firmware_parse+0xb2>
    }
}
 80019de:	bf00      	nop
 80019e0:	bf00      	nop
 80019e2:	3730      	adds	r7, #48	; 0x30
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	080028d4 	.word	0x080028d4
 80019ec:	080028dc 	.word	0x080028dc
 80019f0:	080028e0 	.word	0x080028e0

080019f4 <firmware_update>:


void firmware_update(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0

#ifdef DEBUG_OUTPUT
		buffer_send_string("STAGE: Getting the firmware....\r\n",debug_port);
 80019f8:	2100      	movs	r1, #0
 80019fa:	480e      	ldr	r0, [pc, #56]	; (8001a34 <firmware_update+0x40>)
 80019fc:	f7fe ff4d 	bl	800089a <buffer_send_string>

#endif

	/*Copy firmware from rx_buffer and put into temp_rx_buffer*/
	 esp82xx_get_firmware(temp_rx_buffer,FIRMWARE);
 8001a00:	490d      	ldr	r1, [pc, #52]	; (8001a38 <firmware_update+0x44>)
 8001a02:	480e      	ldr	r0, [pc, #56]	; (8001a3c <firmware_update+0x48>)
 8001a04:	f7ff faba 	bl	8000f7c <esp82xx_get_firmware>
#ifdef DEBUG_OUTPUT
		buffer_send_string("STAGE: Parsing the firmware....\r\n",debug_port);
 8001a08:	2100      	movs	r1, #0
 8001a0a:	480d      	ldr	r0, [pc, #52]	; (8001a40 <firmware_update+0x4c>)
 8001a0c:	f7fe ff45 	bl	800089a <buffer_send_string>

#endif

	 /*Parse firmware data from content temp_rx_buffer*/
	 firmware_parse(firmware_buffer, temp_rx_buffer, sizeof(firmware_buffer));
 8001a10:	f642 1204 	movw	r2, #10500	; 0x2904
 8001a14:	4909      	ldr	r1, [pc, #36]	; (8001a3c <firmware_update+0x48>)
 8001a16:	480b      	ldr	r0, [pc, #44]	; (8001a44 <firmware_update+0x50>)
 8001a18:	f7ff ff76 	bl	8001908 <firmware_parse>
#ifdef DEBUG_OUTPUT
		buffer_send_string("STAGE: Writing the firmware to memory....\r\n",debug_port);
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	480a      	ldr	r0, [pc, #40]	; (8001a48 <firmware_update+0x54>)
 8001a20:	f7fe ff3b 	bl	800089a <buffer_send_string>

#endif

	 /*Write firmware data to microcontroller's flash memory*/
	 flash_write_data_byte(NEW_FIRMWARE_START_ADDRESS,(uint8_t *) firmware_buffer, sizeof(firmware_buffer));
 8001a24:	f642 1204 	movw	r2, #10500	; 0x2904
 8001a28:	4906      	ldr	r1, [pc, #24]	; (8001a44 <firmware_update+0x50>)
 8001a2a:	4808      	ldr	r0, [pc, #32]	; (8001a4c <firmware_update+0x58>)
 8001a2c:	f7ff fe96 	bl	800175c <flash_write_data_byte>

}
 8001a30:	bf00      	nop
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	080028ec 	.word	0x080028ec
 8001a38:	08002910 	.word	0x08002910
 8001a3c:	2000878c 	.word	0x2000878c
 8001a40:	08002924 	.word	0x08002924
 8001a44:	20005e88 	.word	0x20005e88
 8001a48:	08002948 	.word	0x08002948
 8001a4c:	08008000 	.word	0x08008000

08001a50 <fpu_enable>:
#include "stm32f4xx.h"



void fpu_enable(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
	/*Enable floating point unit:  Enable CP10 and CP11 full access*/
	SCB->CPACR |=(1<<20);
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <fpu_enable+0x50>)
 8001a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a5a:	4a11      	ldr	r2, [pc, #68]	; (8001aa0 <fpu_enable+0x50>)
 8001a5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<<21);
 8001a64:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <fpu_enable+0x50>)
 8001a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a6a:	4a0d      	ldr	r2, [pc, #52]	; (8001aa0 <fpu_enable+0x50>)
 8001a6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<<22);
 8001a74:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <fpu_enable+0x50>)
 8001a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a7a:	4a09      	ldr	r2, [pc, #36]	; (8001aa0 <fpu_enable+0x50>)
 8001a7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<<23);
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <fpu_enable+0x50>)
 8001a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a8a:	4a05      	ldr	r2, [pc, #20]	; (8001aa0 <fpu_enable+0x50>)
 8001a8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <main>:
char version_buff[10] = {0};
char temp_ver_buffer[25] = {0};


int main()
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
	/*Enable FPU*/
	fpu_enable();
 8001aa8:	f7ff ffd2 	bl	8001a50 <fpu_enable>

	/*Initialize debug UART*/
	debug_uart_init();
 8001aac:	f7ff f8a4 	bl	8000bf8 <debug_uart_init>
	esp_uart_init();
 8001ab0:	f7ff f91a 	bl	8000ce8 <esp_uart_init>

	/*Initialize timebase*/
	timebase_init();
 8001ab4:	f000 f8d6 	bl	8001c64 <timebase_init>

	/*Initialize LED*/
	led_init();
 8001ab8:	f7fe fbea 	bl	8000290 <led_init>

	/*Initialize Push button*/
	button_init();
 8001abc:	f7fe fc06 	bl	80002cc <button_init>


	/*Initialize circular buffer*/
	circular_buffer_init();
 8001ac0:	f7fe fc34 	bl	800032c <circular_buffer_init>


	if(get_btn_state()){
 8001ac4:	f7fe fc20 	bl	8000308 <get_btn_state>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d02d      	beq.n	8001b2a <main+0x86>


#ifdef DEBUG_OUTPUT
		buffer_send_string("************************************************\n\r",debug_port);
 8001ace:	2100      	movs	r1, #0
 8001ad0:	481d      	ldr	r0, [pc, #116]	; (8001b48 <main+0xa4>)
 8001ad2:	f7fe fee2 	bl	800089a <buffer_send_string>
		buffer_send_string("............Initiating FOTA System.........\n\r",debug_port);
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	481c      	ldr	r0, [pc, #112]	; (8001b4c <main+0xa8>)
 8001ada:	f7fe fede 	bl	800089a <buffer_send_string>

#endif

		esp8266_init(SSID_NAME,PASSKEY);
 8001ade:	491c      	ldr	r1, [pc, #112]	; (8001b50 <main+0xac>)
 8001ae0:	481c      	ldr	r0, [pc, #112]	; (8001b54 <main+0xb0>)
 8001ae2:	f7ff f9a5 	bl	8000e30 <esp8266_init>

#ifdef DEBUG_OUTPUT
		buffer_send_string("Getting firmware version\n\r",debug_port);
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	481b      	ldr	r0, [pc, #108]	; (8001b58 <main+0xb4>)
 8001aea:	f7fe fed6 	bl	800089a <buffer_send_string>

#endif

		esp82xx_get_version_file(version_buff);
 8001aee:	481b      	ldr	r0, [pc, #108]	; (8001b5c <main+0xb8>)
 8001af0:	f7ff fadc 	bl	80010ac <esp82xx_get_version_file>
		sprintf(temp_ver_buffer,"Version:  %s\r\n", version_buff);
 8001af4:	4a19      	ldr	r2, [pc, #100]	; (8001b5c <main+0xb8>)
 8001af6:	491a      	ldr	r1, [pc, #104]	; (8001b60 <main+0xbc>)
 8001af8:	481a      	ldr	r0, [pc, #104]	; (8001b64 <main+0xc0>)
 8001afa:	f000 f96d 	bl	8001dd8 <siprintf>

#ifdef DEBUG_OUTPUT
		buffer_send_string(temp_ver_buffer,debug_port);
 8001afe:	2100      	movs	r1, #0
 8001b00:	4818      	ldr	r0, [pc, #96]	; (8001b64 <main+0xc0>)
 8001b02:	f7fe feca 	bl	800089a <buffer_send_string>

#endif

		firmware_update();
 8001b06:	f7ff ff75 	bl	80019f4 <firmware_update>

#ifdef DEBUG_OUTPUT
		buffer_send_string("STAGE: Jumping to new firmware....\r\n",debug_port);
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4816      	ldr	r0, [pc, #88]	; (8001b68 <main+0xc4>)
 8001b0e:	f7fe fec4 	bl	800089a <buffer_send_string>
		buffer_send_string("************************************************\n\r",debug_port);
 8001b12:	2100      	movs	r1, #0
 8001b14:	480c      	ldr	r0, [pc, #48]	; (8001b48 <main+0xa4>)
 8001b16:	f7fe fec0 	bl	800089a <buffer_send_string>

		systick_delay_ms(2000);
 8001b1a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b1e:	f000 f85f 	bl	8001be0 <systick_delay_ms>

#endif

		jump_to_app(NEW_FIRMWARE_START_ADDRESS);
 8001b22:	4812      	ldr	r0, [pc, #72]	; (8001b6c <main+0xc8>)
 8001b24:	f7ff fe70 	bl	8001808 <jump_to_app>
 8001b28:	e00a      	b.n	8001b40 <main+0x9c>

	}
	else
	{
#ifdef DEBUG_OUTPUT
		buffer_send_string("............Running Last Update.........\n\r",debug_port);
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4810      	ldr	r0, [pc, #64]	; (8001b70 <main+0xcc>)
 8001b2e:	f7fe feb4 	bl	800089a <buffer_send_string>
		systick_delay_ms(2000);
 8001b32:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b36:	f000 f853 	bl	8001be0 <systick_delay_ms>
#endif


		jump_to_app(NEW_FIRMWARE_START_ADDRESS);
 8001b3a:	480c      	ldr	r0, [pc, #48]	; (8001b6c <main+0xc8>)
 8001b3c:	f7ff fe64 	bl	8001808 <jump_to_app>

	}

	return 0;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	08002974 	.word	0x08002974
 8001b4c:	080029a8 	.word	0x080029a8
 8001b50:	080029d8 	.word	0x080029d8
 8001b54:	080029e4 	.word	0x080029e4
 8001b58:	080029f4 	.word	0x080029f4
 8001b5c:	2000b284 	.word	0x2000b284
 8001b60:	08002a10 	.word	0x08002a10
 8001b64:	2000b290 	.word	0x2000b290
 8001b68:	08002a20 	.word	0x08002a20
 8001b6c:	08008000 	.word	0x08008000
 8001b70:	08002a48 	.word	0x08002a48

08001b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b7c:	4a14      	ldr	r2, [pc, #80]	; (8001bd0 <_sbrk+0x5c>)
 8001b7e:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <_sbrk+0x60>)
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b88:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <_sbrk+0x64>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d102      	bne.n	8001b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <_sbrk+0x64>)
 8001b92:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <_sbrk+0x68>)
 8001b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <_sbrk+0x64>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d207      	bcs.n	8001bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ba4:	f000 f8b2 	bl	8001d0c <__errno>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	220c      	movs	r2, #12
 8001bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bae:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb2:	e009      	b.n	8001bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <_sbrk+0x64>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bba:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <_sbrk+0x64>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	4a05      	ldr	r2, [pc, #20]	; (8001bd8 <_sbrk+0x64>)
 8001bc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20020000 	.word	0x20020000
 8001bd4:	00000400 	.word	0x00000400
 8001bd8:	2000b2ac 	.word	0x2000b2ac
 8001bdc:	2000b2c8 	.word	0x2000b2c8

08001be0 <systick_delay_ms>:
volatile uint32_t g_curr_tick_p;


/*Delay in seconds*/
void systick_delay_ms(uint32_t delay)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
	uint32_t tickstart =  get_tick();
 8001be8:	f000 f818 	bl	8001c1c <get_tick>
 8001bec:	60b8      	str	r0, [r7, #8]
	uint32_t wait =  delay;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	60fb      	str	r3, [r7, #12]

	if(wait < MAX_DELAY)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf8:	d002      	beq.n	8001c00 <systick_delay_ms+0x20>
	{
		wait += (uint32_t)TICK_FREQ;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	60fb      	str	r3, [r7, #12]
	}

    while((get_tick() - tickstart) < wait){}
 8001c00:	bf00      	nop
 8001c02:	f000 f80b 	bl	8001c1c <get_tick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d8f7      	bhi.n	8001c02 <systick_delay_ms+0x22>

}
 8001c12:	bf00      	nop
 8001c14:	bf00      	nop
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <get_tick>:

uint32_t get_tick(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c20:	b672      	cpsid	i
}
 8001c22:	bf00      	nop
	__disable_irq();
	g_curr_tick_p = g_curr_tick;
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <get_tick+0x24>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a06      	ldr	r2, [pc, #24]	; (8001c44 <get_tick+0x28>)
 8001c2a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001c2c:	b662      	cpsie	i
}
 8001c2e:	bf00      	nop
	__enable_irq();

	return g_curr_tick_p;
 8001c30:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <get_tick+0x28>)
 8001c32:	681b      	ldr	r3, [r3, #0]

}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	2000b2b0 	.word	0x2000b2b0
 8001c44:	2000b2b4 	.word	0x2000b2b4

08001c48 <tick_increment>:
static void tick_increment(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
	g_curr_tick += TICK_FREQ;
 8001c4c:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <tick_increment+0x18>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	3301      	adds	r3, #1
 8001c52:	4a03      	ldr	r2, [pc, #12]	; (8001c60 <tick_increment+0x18>)
 8001c54:	6013      	str	r3, [r2, #0]
}
 8001c56:	bf00      	nop
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	2000b2b0 	.word	0x2000b2b0

08001c64 <timebase_init>:
void timebase_init(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c68:	b672      	cpsid	i
}
 8001c6a:	bf00      	nop

	/*Disable global interrupts*/
	__disable_irq();

    /*Load the timer with number of clock cycles per msecond*/
	SysTick->LOAD =  ONE_MSEC_LOAD - 1;
 8001c6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <timebase_init+0x44>)
 8001c6e:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001c72:	605a      	str	r2, [r3, #4]

    /*Clear systick current value register*/
	SysTick->VAL = 0;
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <timebase_init+0x44>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]

    /*Select internal clock source*/
	SysTick->CTRL = CTRL_CLCKSRC;
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <timebase_init+0x44>)
 8001c7c:	2204      	movs	r2, #4
 8001c7e:	601a      	str	r2, [r3, #0]

    /*Enable interrupt*/
	SysTick->CTRL |= CTRL_TICKINT;
 8001c80:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <timebase_init+0x44>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a08      	ldr	r2, [pc, #32]	; (8001ca8 <timebase_init+0x44>)
 8001c86:	f043 0302 	orr.w	r3, r3, #2
 8001c8a:	6013      	str	r3, [r2, #0]

	/*Enable systick*/
	SysTick->CTRL |=CTRL_ENABLE;
 8001c8c:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <timebase_init+0x44>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a05      	ldr	r2, [pc, #20]	; (8001ca8 <timebase_init+0x44>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001c98:	b662      	cpsie	i
}
 8001c9a:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	e000e010 	.word	0xe000e010

08001cac <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
	tick_increment();
 8001cb0:	f7ff ffca 	bl	8001c48 <tick_increment>
}
 8001cb4:	bf00      	nop
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cb8:	480d      	ldr	r0, [pc, #52]	; (8001cf0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cba:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001cbc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cc0:	480c      	ldr	r0, [pc, #48]	; (8001cf4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cc2:	490d      	ldr	r1, [pc, #52]	; (8001cf8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cc4:	4a0d      	ldr	r2, [pc, #52]	; (8001cfc <LoopForever+0xe>)
  movs r3, #0
 8001cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc8:	e002      	b.n	8001cd0 <LoopCopyDataInit>

08001cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cce:	3304      	adds	r3, #4

08001cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cd4:	d3f9      	bcc.n	8001cca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cd8:	4c0a      	ldr	r4, [pc, #40]	; (8001d04 <LoopForever+0x16>)
  movs r3, #0
 8001cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cdc:	e001      	b.n	8001ce2 <LoopFillZerobss>

08001cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ce0:	3204      	adds	r2, #4

08001ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ce4:	d3fb      	bcc.n	8001cde <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ce6:	f000 f817 	bl	8001d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cea:	f7ff fedb 	bl	8001aa4 <main>

08001cee <LoopForever>:

LoopForever:
    b LoopForever
 8001cee:	e7fe      	b.n	8001cee <LoopForever>
  ldr   r0, =_estack
 8001cf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001cfc:	08002ab0 	.word	0x08002ab0
  ldr r2, =_sbss
 8001d00:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001d04:	2000b2c8 	.word	0x2000b2c8

08001d08 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d08:	e7fe      	b.n	8001d08 <ADC_IRQHandler>
	...

08001d0c <__errno>:
 8001d0c:	4b01      	ldr	r3, [pc, #4]	; (8001d14 <__errno+0x8>)
 8001d0e:	6818      	ldr	r0, [r3, #0]
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	20000000 	.word	0x20000000

08001d18 <__libc_init_array>:
 8001d18:	b570      	push	{r4, r5, r6, lr}
 8001d1a:	4d0d      	ldr	r5, [pc, #52]	; (8001d50 <__libc_init_array+0x38>)
 8001d1c:	4c0d      	ldr	r4, [pc, #52]	; (8001d54 <__libc_init_array+0x3c>)
 8001d1e:	1b64      	subs	r4, r4, r5
 8001d20:	10a4      	asrs	r4, r4, #2
 8001d22:	2600      	movs	r6, #0
 8001d24:	42a6      	cmp	r6, r4
 8001d26:	d109      	bne.n	8001d3c <__libc_init_array+0x24>
 8001d28:	4d0b      	ldr	r5, [pc, #44]	; (8001d58 <__libc_init_array+0x40>)
 8001d2a:	4c0c      	ldr	r4, [pc, #48]	; (8001d5c <__libc_init_array+0x44>)
 8001d2c:	f000 fcc2 	bl	80026b4 <_init>
 8001d30:	1b64      	subs	r4, r4, r5
 8001d32:	10a4      	asrs	r4, r4, #2
 8001d34:	2600      	movs	r6, #0
 8001d36:	42a6      	cmp	r6, r4
 8001d38:	d105      	bne.n	8001d46 <__libc_init_array+0x2e>
 8001d3a:	bd70      	pop	{r4, r5, r6, pc}
 8001d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d40:	4798      	blx	r3
 8001d42:	3601      	adds	r6, #1
 8001d44:	e7ee      	b.n	8001d24 <__libc_init_array+0xc>
 8001d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d4a:	4798      	blx	r3
 8001d4c:	3601      	adds	r6, #1
 8001d4e:	e7f2      	b.n	8001d36 <__libc_init_array+0x1e>
 8001d50:	08002aa8 	.word	0x08002aa8
 8001d54:	08002aa8 	.word	0x08002aa8
 8001d58:	08002aa8 	.word	0x08002aa8
 8001d5c:	08002aac 	.word	0x08002aac

08001d60 <memset>:
 8001d60:	4402      	add	r2, r0
 8001d62:	4603      	mov	r3, r0
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d100      	bne.n	8001d6a <memset+0xa>
 8001d68:	4770      	bx	lr
 8001d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8001d6e:	e7f9      	b.n	8001d64 <memset+0x4>

08001d70 <sniprintf>:
 8001d70:	b40c      	push	{r2, r3}
 8001d72:	b530      	push	{r4, r5, lr}
 8001d74:	4b17      	ldr	r3, [pc, #92]	; (8001dd4 <sniprintf+0x64>)
 8001d76:	1e0c      	subs	r4, r1, #0
 8001d78:	681d      	ldr	r5, [r3, #0]
 8001d7a:	b09d      	sub	sp, #116	; 0x74
 8001d7c:	da08      	bge.n	8001d90 <sniprintf+0x20>
 8001d7e:	238b      	movs	r3, #139	; 0x8b
 8001d80:	602b      	str	r3, [r5, #0]
 8001d82:	f04f 30ff 	mov.w	r0, #4294967295
 8001d86:	b01d      	add	sp, #116	; 0x74
 8001d88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001d8c:	b002      	add	sp, #8
 8001d8e:	4770      	bx	lr
 8001d90:	f44f 7302 	mov.w	r3, #520	; 0x208
 8001d94:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001d98:	bf14      	ite	ne
 8001d9a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8001d9e:	4623      	moveq	r3, r4
 8001da0:	9304      	str	r3, [sp, #16]
 8001da2:	9307      	str	r3, [sp, #28]
 8001da4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001da8:	9002      	str	r0, [sp, #8]
 8001daa:	9006      	str	r0, [sp, #24]
 8001dac:	f8ad 3016 	strh.w	r3, [sp, #22]
 8001db0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001db2:	ab21      	add	r3, sp, #132	; 0x84
 8001db4:	a902      	add	r1, sp, #8
 8001db6:	4628      	mov	r0, r5
 8001db8:	9301      	str	r3, [sp, #4]
 8001dba:	f000 f889 	bl	8001ed0 <_svfiprintf_r>
 8001dbe:	1c43      	adds	r3, r0, #1
 8001dc0:	bfbc      	itt	lt
 8001dc2:	238b      	movlt	r3, #139	; 0x8b
 8001dc4:	602b      	strlt	r3, [r5, #0]
 8001dc6:	2c00      	cmp	r4, #0
 8001dc8:	d0dd      	beq.n	8001d86 <sniprintf+0x16>
 8001dca:	9b02      	ldr	r3, [sp, #8]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
 8001dd0:	e7d9      	b.n	8001d86 <sniprintf+0x16>
 8001dd2:	bf00      	nop
 8001dd4:	20000000 	.word	0x20000000

08001dd8 <siprintf>:
 8001dd8:	b40e      	push	{r1, r2, r3}
 8001dda:	b500      	push	{lr}
 8001ddc:	b09c      	sub	sp, #112	; 0x70
 8001dde:	ab1d      	add	r3, sp, #116	; 0x74
 8001de0:	9002      	str	r0, [sp, #8]
 8001de2:	9006      	str	r0, [sp, #24]
 8001de4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001de8:	4809      	ldr	r0, [pc, #36]	; (8001e10 <siprintf+0x38>)
 8001dea:	9107      	str	r1, [sp, #28]
 8001dec:	9104      	str	r1, [sp, #16]
 8001dee:	4909      	ldr	r1, [pc, #36]	; (8001e14 <siprintf+0x3c>)
 8001df0:	f853 2b04 	ldr.w	r2, [r3], #4
 8001df4:	9105      	str	r1, [sp, #20]
 8001df6:	6800      	ldr	r0, [r0, #0]
 8001df8:	9301      	str	r3, [sp, #4]
 8001dfa:	a902      	add	r1, sp, #8
 8001dfc:	f000 f868 	bl	8001ed0 <_svfiprintf_r>
 8001e00:	9b02      	ldr	r3, [sp, #8]
 8001e02:	2200      	movs	r2, #0
 8001e04:	701a      	strb	r2, [r3, #0]
 8001e06:	b01c      	add	sp, #112	; 0x70
 8001e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8001e0c:	b003      	add	sp, #12
 8001e0e:	4770      	bx	lr
 8001e10:	20000000 	.word	0x20000000
 8001e14:	ffff0208 	.word	0xffff0208

08001e18 <__ssputs_r>:
 8001e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e1c:	688e      	ldr	r6, [r1, #8]
 8001e1e:	429e      	cmp	r6, r3
 8001e20:	4682      	mov	sl, r0
 8001e22:	460c      	mov	r4, r1
 8001e24:	4690      	mov	r8, r2
 8001e26:	461f      	mov	r7, r3
 8001e28:	d838      	bhi.n	8001e9c <__ssputs_r+0x84>
 8001e2a:	898a      	ldrh	r2, [r1, #12]
 8001e2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001e30:	d032      	beq.n	8001e98 <__ssputs_r+0x80>
 8001e32:	6825      	ldr	r5, [r4, #0]
 8001e34:	6909      	ldr	r1, [r1, #16]
 8001e36:	eba5 0901 	sub.w	r9, r5, r1
 8001e3a:	6965      	ldr	r5, [r4, #20]
 8001e3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001e40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001e44:	3301      	adds	r3, #1
 8001e46:	444b      	add	r3, r9
 8001e48:	106d      	asrs	r5, r5, #1
 8001e4a:	429d      	cmp	r5, r3
 8001e4c:	bf38      	it	cc
 8001e4e:	461d      	movcc	r5, r3
 8001e50:	0553      	lsls	r3, r2, #21
 8001e52:	d531      	bpl.n	8001eb8 <__ssputs_r+0xa0>
 8001e54:	4629      	mov	r1, r5
 8001e56:	f000 fb63 	bl	8002520 <_malloc_r>
 8001e5a:	4606      	mov	r6, r0
 8001e5c:	b950      	cbnz	r0, 8001e74 <__ssputs_r+0x5c>
 8001e5e:	230c      	movs	r3, #12
 8001e60:	f8ca 3000 	str.w	r3, [sl]
 8001e64:	89a3      	ldrh	r3, [r4, #12]
 8001e66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e6a:	81a3      	strh	r3, [r4, #12]
 8001e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e74:	6921      	ldr	r1, [r4, #16]
 8001e76:	464a      	mov	r2, r9
 8001e78:	f000 fabe 	bl	80023f8 <memcpy>
 8001e7c:	89a3      	ldrh	r3, [r4, #12]
 8001e7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e86:	81a3      	strh	r3, [r4, #12]
 8001e88:	6126      	str	r6, [r4, #16]
 8001e8a:	6165      	str	r5, [r4, #20]
 8001e8c:	444e      	add	r6, r9
 8001e8e:	eba5 0509 	sub.w	r5, r5, r9
 8001e92:	6026      	str	r6, [r4, #0]
 8001e94:	60a5      	str	r5, [r4, #8]
 8001e96:	463e      	mov	r6, r7
 8001e98:	42be      	cmp	r6, r7
 8001e9a:	d900      	bls.n	8001e9e <__ssputs_r+0x86>
 8001e9c:	463e      	mov	r6, r7
 8001e9e:	6820      	ldr	r0, [r4, #0]
 8001ea0:	4632      	mov	r2, r6
 8001ea2:	4641      	mov	r1, r8
 8001ea4:	f000 fab6 	bl	8002414 <memmove>
 8001ea8:	68a3      	ldr	r3, [r4, #8]
 8001eaa:	1b9b      	subs	r3, r3, r6
 8001eac:	60a3      	str	r3, [r4, #8]
 8001eae:	6823      	ldr	r3, [r4, #0]
 8001eb0:	4433      	add	r3, r6
 8001eb2:	6023      	str	r3, [r4, #0]
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	e7db      	b.n	8001e70 <__ssputs_r+0x58>
 8001eb8:	462a      	mov	r2, r5
 8001eba:	f000 fba5 	bl	8002608 <_realloc_r>
 8001ebe:	4606      	mov	r6, r0
 8001ec0:	2800      	cmp	r0, #0
 8001ec2:	d1e1      	bne.n	8001e88 <__ssputs_r+0x70>
 8001ec4:	6921      	ldr	r1, [r4, #16]
 8001ec6:	4650      	mov	r0, sl
 8001ec8:	f000 fabe 	bl	8002448 <_free_r>
 8001ecc:	e7c7      	b.n	8001e5e <__ssputs_r+0x46>
	...

08001ed0 <_svfiprintf_r>:
 8001ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ed4:	4698      	mov	r8, r3
 8001ed6:	898b      	ldrh	r3, [r1, #12]
 8001ed8:	061b      	lsls	r3, r3, #24
 8001eda:	b09d      	sub	sp, #116	; 0x74
 8001edc:	4607      	mov	r7, r0
 8001ede:	460d      	mov	r5, r1
 8001ee0:	4614      	mov	r4, r2
 8001ee2:	d50e      	bpl.n	8001f02 <_svfiprintf_r+0x32>
 8001ee4:	690b      	ldr	r3, [r1, #16]
 8001ee6:	b963      	cbnz	r3, 8001f02 <_svfiprintf_r+0x32>
 8001ee8:	2140      	movs	r1, #64	; 0x40
 8001eea:	f000 fb19 	bl	8002520 <_malloc_r>
 8001eee:	6028      	str	r0, [r5, #0]
 8001ef0:	6128      	str	r0, [r5, #16]
 8001ef2:	b920      	cbnz	r0, 8001efe <_svfiprintf_r+0x2e>
 8001ef4:	230c      	movs	r3, #12
 8001ef6:	603b      	str	r3, [r7, #0]
 8001ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8001efc:	e0d1      	b.n	80020a2 <_svfiprintf_r+0x1d2>
 8001efe:	2340      	movs	r3, #64	; 0x40
 8001f00:	616b      	str	r3, [r5, #20]
 8001f02:	2300      	movs	r3, #0
 8001f04:	9309      	str	r3, [sp, #36]	; 0x24
 8001f06:	2320      	movs	r3, #32
 8001f08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001f0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8001f10:	2330      	movs	r3, #48	; 0x30
 8001f12:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80020bc <_svfiprintf_r+0x1ec>
 8001f16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001f1a:	f04f 0901 	mov.w	r9, #1
 8001f1e:	4623      	mov	r3, r4
 8001f20:	469a      	mov	sl, r3
 8001f22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f26:	b10a      	cbz	r2, 8001f2c <_svfiprintf_r+0x5c>
 8001f28:	2a25      	cmp	r2, #37	; 0x25
 8001f2a:	d1f9      	bne.n	8001f20 <_svfiprintf_r+0x50>
 8001f2c:	ebba 0b04 	subs.w	fp, sl, r4
 8001f30:	d00b      	beq.n	8001f4a <_svfiprintf_r+0x7a>
 8001f32:	465b      	mov	r3, fp
 8001f34:	4622      	mov	r2, r4
 8001f36:	4629      	mov	r1, r5
 8001f38:	4638      	mov	r0, r7
 8001f3a:	f7ff ff6d 	bl	8001e18 <__ssputs_r>
 8001f3e:	3001      	adds	r0, #1
 8001f40:	f000 80aa 	beq.w	8002098 <_svfiprintf_r+0x1c8>
 8001f44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001f46:	445a      	add	r2, fp
 8001f48:	9209      	str	r2, [sp, #36]	; 0x24
 8001f4a:	f89a 3000 	ldrb.w	r3, [sl]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 80a2 	beq.w	8002098 <_svfiprintf_r+0x1c8>
 8001f54:	2300      	movs	r3, #0
 8001f56:	f04f 32ff 	mov.w	r2, #4294967295
 8001f5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f5e:	f10a 0a01 	add.w	sl, sl, #1
 8001f62:	9304      	str	r3, [sp, #16]
 8001f64:	9307      	str	r3, [sp, #28]
 8001f66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001f6a:	931a      	str	r3, [sp, #104]	; 0x68
 8001f6c:	4654      	mov	r4, sl
 8001f6e:	2205      	movs	r2, #5
 8001f70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f74:	4851      	ldr	r0, [pc, #324]	; (80020bc <_svfiprintf_r+0x1ec>)
 8001f76:	f7fe f93b 	bl	80001f0 <memchr>
 8001f7a:	9a04      	ldr	r2, [sp, #16]
 8001f7c:	b9d8      	cbnz	r0, 8001fb6 <_svfiprintf_r+0xe6>
 8001f7e:	06d0      	lsls	r0, r2, #27
 8001f80:	bf44      	itt	mi
 8001f82:	2320      	movmi	r3, #32
 8001f84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001f88:	0711      	lsls	r1, r2, #28
 8001f8a:	bf44      	itt	mi
 8001f8c:	232b      	movmi	r3, #43	; 0x2b
 8001f8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001f92:	f89a 3000 	ldrb.w	r3, [sl]
 8001f96:	2b2a      	cmp	r3, #42	; 0x2a
 8001f98:	d015      	beq.n	8001fc6 <_svfiprintf_r+0xf6>
 8001f9a:	9a07      	ldr	r2, [sp, #28]
 8001f9c:	4654      	mov	r4, sl
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	f04f 0c0a 	mov.w	ip, #10
 8001fa4:	4621      	mov	r1, r4
 8001fa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001faa:	3b30      	subs	r3, #48	; 0x30
 8001fac:	2b09      	cmp	r3, #9
 8001fae:	d94e      	bls.n	800204e <_svfiprintf_r+0x17e>
 8001fb0:	b1b0      	cbz	r0, 8001fe0 <_svfiprintf_r+0x110>
 8001fb2:	9207      	str	r2, [sp, #28]
 8001fb4:	e014      	b.n	8001fe0 <_svfiprintf_r+0x110>
 8001fb6:	eba0 0308 	sub.w	r3, r0, r8
 8001fba:	fa09 f303 	lsl.w	r3, r9, r3
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	9304      	str	r3, [sp, #16]
 8001fc2:	46a2      	mov	sl, r4
 8001fc4:	e7d2      	b.n	8001f6c <_svfiprintf_r+0x9c>
 8001fc6:	9b03      	ldr	r3, [sp, #12]
 8001fc8:	1d19      	adds	r1, r3, #4
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	9103      	str	r1, [sp, #12]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	bfbb      	ittet	lt
 8001fd2:	425b      	neglt	r3, r3
 8001fd4:	f042 0202 	orrlt.w	r2, r2, #2
 8001fd8:	9307      	strge	r3, [sp, #28]
 8001fda:	9307      	strlt	r3, [sp, #28]
 8001fdc:	bfb8      	it	lt
 8001fde:	9204      	strlt	r2, [sp, #16]
 8001fe0:	7823      	ldrb	r3, [r4, #0]
 8001fe2:	2b2e      	cmp	r3, #46	; 0x2e
 8001fe4:	d10c      	bne.n	8002000 <_svfiprintf_r+0x130>
 8001fe6:	7863      	ldrb	r3, [r4, #1]
 8001fe8:	2b2a      	cmp	r3, #42	; 0x2a
 8001fea:	d135      	bne.n	8002058 <_svfiprintf_r+0x188>
 8001fec:	9b03      	ldr	r3, [sp, #12]
 8001fee:	1d1a      	adds	r2, r3, #4
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	9203      	str	r2, [sp, #12]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	bfb8      	it	lt
 8001ff8:	f04f 33ff 	movlt.w	r3, #4294967295
 8001ffc:	3402      	adds	r4, #2
 8001ffe:	9305      	str	r3, [sp, #20]
 8002000:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80020cc <_svfiprintf_r+0x1fc>
 8002004:	7821      	ldrb	r1, [r4, #0]
 8002006:	2203      	movs	r2, #3
 8002008:	4650      	mov	r0, sl
 800200a:	f7fe f8f1 	bl	80001f0 <memchr>
 800200e:	b140      	cbz	r0, 8002022 <_svfiprintf_r+0x152>
 8002010:	2340      	movs	r3, #64	; 0x40
 8002012:	eba0 000a 	sub.w	r0, r0, sl
 8002016:	fa03 f000 	lsl.w	r0, r3, r0
 800201a:	9b04      	ldr	r3, [sp, #16]
 800201c:	4303      	orrs	r3, r0
 800201e:	3401      	adds	r4, #1
 8002020:	9304      	str	r3, [sp, #16]
 8002022:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002026:	4826      	ldr	r0, [pc, #152]	; (80020c0 <_svfiprintf_r+0x1f0>)
 8002028:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800202c:	2206      	movs	r2, #6
 800202e:	f7fe f8df 	bl	80001f0 <memchr>
 8002032:	2800      	cmp	r0, #0
 8002034:	d038      	beq.n	80020a8 <_svfiprintf_r+0x1d8>
 8002036:	4b23      	ldr	r3, [pc, #140]	; (80020c4 <_svfiprintf_r+0x1f4>)
 8002038:	bb1b      	cbnz	r3, 8002082 <_svfiprintf_r+0x1b2>
 800203a:	9b03      	ldr	r3, [sp, #12]
 800203c:	3307      	adds	r3, #7
 800203e:	f023 0307 	bic.w	r3, r3, #7
 8002042:	3308      	adds	r3, #8
 8002044:	9303      	str	r3, [sp, #12]
 8002046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002048:	4433      	add	r3, r6
 800204a:	9309      	str	r3, [sp, #36]	; 0x24
 800204c:	e767      	b.n	8001f1e <_svfiprintf_r+0x4e>
 800204e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002052:	460c      	mov	r4, r1
 8002054:	2001      	movs	r0, #1
 8002056:	e7a5      	b.n	8001fa4 <_svfiprintf_r+0xd4>
 8002058:	2300      	movs	r3, #0
 800205a:	3401      	adds	r4, #1
 800205c:	9305      	str	r3, [sp, #20]
 800205e:	4619      	mov	r1, r3
 8002060:	f04f 0c0a 	mov.w	ip, #10
 8002064:	4620      	mov	r0, r4
 8002066:	f810 2b01 	ldrb.w	r2, [r0], #1
 800206a:	3a30      	subs	r2, #48	; 0x30
 800206c:	2a09      	cmp	r2, #9
 800206e:	d903      	bls.n	8002078 <_svfiprintf_r+0x1a8>
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0c5      	beq.n	8002000 <_svfiprintf_r+0x130>
 8002074:	9105      	str	r1, [sp, #20]
 8002076:	e7c3      	b.n	8002000 <_svfiprintf_r+0x130>
 8002078:	fb0c 2101 	mla	r1, ip, r1, r2
 800207c:	4604      	mov	r4, r0
 800207e:	2301      	movs	r3, #1
 8002080:	e7f0      	b.n	8002064 <_svfiprintf_r+0x194>
 8002082:	ab03      	add	r3, sp, #12
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	462a      	mov	r2, r5
 8002088:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <_svfiprintf_r+0x1f8>)
 800208a:	a904      	add	r1, sp, #16
 800208c:	4638      	mov	r0, r7
 800208e:	f3af 8000 	nop.w
 8002092:	1c42      	adds	r2, r0, #1
 8002094:	4606      	mov	r6, r0
 8002096:	d1d6      	bne.n	8002046 <_svfiprintf_r+0x176>
 8002098:	89ab      	ldrh	r3, [r5, #12]
 800209a:	065b      	lsls	r3, r3, #25
 800209c:	f53f af2c 	bmi.w	8001ef8 <_svfiprintf_r+0x28>
 80020a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80020a2:	b01d      	add	sp, #116	; 0x74
 80020a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020a8:	ab03      	add	r3, sp, #12
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	462a      	mov	r2, r5
 80020ae:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <_svfiprintf_r+0x1f8>)
 80020b0:	a904      	add	r1, sp, #16
 80020b2:	4638      	mov	r0, r7
 80020b4:	f000 f87a 	bl	80021ac <_printf_i>
 80020b8:	e7eb      	b.n	8002092 <_svfiprintf_r+0x1c2>
 80020ba:	bf00      	nop
 80020bc:	08002a73 	.word	0x08002a73
 80020c0:	08002a7d 	.word	0x08002a7d
 80020c4:	00000000 	.word	0x00000000
 80020c8:	08001e19 	.word	0x08001e19
 80020cc:	08002a79 	.word	0x08002a79

080020d0 <_printf_common>:
 80020d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020d4:	4616      	mov	r6, r2
 80020d6:	4699      	mov	r9, r3
 80020d8:	688a      	ldr	r2, [r1, #8]
 80020da:	690b      	ldr	r3, [r1, #16]
 80020dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80020e0:	4293      	cmp	r3, r2
 80020e2:	bfb8      	it	lt
 80020e4:	4613      	movlt	r3, r2
 80020e6:	6033      	str	r3, [r6, #0]
 80020e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80020ec:	4607      	mov	r7, r0
 80020ee:	460c      	mov	r4, r1
 80020f0:	b10a      	cbz	r2, 80020f6 <_printf_common+0x26>
 80020f2:	3301      	adds	r3, #1
 80020f4:	6033      	str	r3, [r6, #0]
 80020f6:	6823      	ldr	r3, [r4, #0]
 80020f8:	0699      	lsls	r1, r3, #26
 80020fa:	bf42      	ittt	mi
 80020fc:	6833      	ldrmi	r3, [r6, #0]
 80020fe:	3302      	addmi	r3, #2
 8002100:	6033      	strmi	r3, [r6, #0]
 8002102:	6825      	ldr	r5, [r4, #0]
 8002104:	f015 0506 	ands.w	r5, r5, #6
 8002108:	d106      	bne.n	8002118 <_printf_common+0x48>
 800210a:	f104 0a19 	add.w	sl, r4, #25
 800210e:	68e3      	ldr	r3, [r4, #12]
 8002110:	6832      	ldr	r2, [r6, #0]
 8002112:	1a9b      	subs	r3, r3, r2
 8002114:	42ab      	cmp	r3, r5
 8002116:	dc26      	bgt.n	8002166 <_printf_common+0x96>
 8002118:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800211c:	1e13      	subs	r3, r2, #0
 800211e:	6822      	ldr	r2, [r4, #0]
 8002120:	bf18      	it	ne
 8002122:	2301      	movne	r3, #1
 8002124:	0692      	lsls	r2, r2, #26
 8002126:	d42b      	bmi.n	8002180 <_printf_common+0xb0>
 8002128:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800212c:	4649      	mov	r1, r9
 800212e:	4638      	mov	r0, r7
 8002130:	47c0      	blx	r8
 8002132:	3001      	adds	r0, #1
 8002134:	d01e      	beq.n	8002174 <_printf_common+0xa4>
 8002136:	6823      	ldr	r3, [r4, #0]
 8002138:	68e5      	ldr	r5, [r4, #12]
 800213a:	6832      	ldr	r2, [r6, #0]
 800213c:	f003 0306 	and.w	r3, r3, #6
 8002140:	2b04      	cmp	r3, #4
 8002142:	bf08      	it	eq
 8002144:	1aad      	subeq	r5, r5, r2
 8002146:	68a3      	ldr	r3, [r4, #8]
 8002148:	6922      	ldr	r2, [r4, #16]
 800214a:	bf0c      	ite	eq
 800214c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002150:	2500      	movne	r5, #0
 8002152:	4293      	cmp	r3, r2
 8002154:	bfc4      	itt	gt
 8002156:	1a9b      	subgt	r3, r3, r2
 8002158:	18ed      	addgt	r5, r5, r3
 800215a:	2600      	movs	r6, #0
 800215c:	341a      	adds	r4, #26
 800215e:	42b5      	cmp	r5, r6
 8002160:	d11a      	bne.n	8002198 <_printf_common+0xc8>
 8002162:	2000      	movs	r0, #0
 8002164:	e008      	b.n	8002178 <_printf_common+0xa8>
 8002166:	2301      	movs	r3, #1
 8002168:	4652      	mov	r2, sl
 800216a:	4649      	mov	r1, r9
 800216c:	4638      	mov	r0, r7
 800216e:	47c0      	blx	r8
 8002170:	3001      	adds	r0, #1
 8002172:	d103      	bne.n	800217c <_printf_common+0xac>
 8002174:	f04f 30ff 	mov.w	r0, #4294967295
 8002178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800217c:	3501      	adds	r5, #1
 800217e:	e7c6      	b.n	800210e <_printf_common+0x3e>
 8002180:	18e1      	adds	r1, r4, r3
 8002182:	1c5a      	adds	r2, r3, #1
 8002184:	2030      	movs	r0, #48	; 0x30
 8002186:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800218a:	4422      	add	r2, r4
 800218c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002190:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002194:	3302      	adds	r3, #2
 8002196:	e7c7      	b.n	8002128 <_printf_common+0x58>
 8002198:	2301      	movs	r3, #1
 800219a:	4622      	mov	r2, r4
 800219c:	4649      	mov	r1, r9
 800219e:	4638      	mov	r0, r7
 80021a0:	47c0      	blx	r8
 80021a2:	3001      	adds	r0, #1
 80021a4:	d0e6      	beq.n	8002174 <_printf_common+0xa4>
 80021a6:	3601      	adds	r6, #1
 80021a8:	e7d9      	b.n	800215e <_printf_common+0x8e>
	...

080021ac <_printf_i>:
 80021ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80021b0:	7e0f      	ldrb	r7, [r1, #24]
 80021b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80021b4:	2f78      	cmp	r7, #120	; 0x78
 80021b6:	4691      	mov	r9, r2
 80021b8:	4680      	mov	r8, r0
 80021ba:	460c      	mov	r4, r1
 80021bc:	469a      	mov	sl, r3
 80021be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80021c2:	d807      	bhi.n	80021d4 <_printf_i+0x28>
 80021c4:	2f62      	cmp	r7, #98	; 0x62
 80021c6:	d80a      	bhi.n	80021de <_printf_i+0x32>
 80021c8:	2f00      	cmp	r7, #0
 80021ca:	f000 80d8 	beq.w	800237e <_printf_i+0x1d2>
 80021ce:	2f58      	cmp	r7, #88	; 0x58
 80021d0:	f000 80a3 	beq.w	800231a <_printf_i+0x16e>
 80021d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80021d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80021dc:	e03a      	b.n	8002254 <_printf_i+0xa8>
 80021de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80021e2:	2b15      	cmp	r3, #21
 80021e4:	d8f6      	bhi.n	80021d4 <_printf_i+0x28>
 80021e6:	a101      	add	r1, pc, #4	; (adr r1, 80021ec <_printf_i+0x40>)
 80021e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80021ec:	08002245 	.word	0x08002245
 80021f0:	08002259 	.word	0x08002259
 80021f4:	080021d5 	.word	0x080021d5
 80021f8:	080021d5 	.word	0x080021d5
 80021fc:	080021d5 	.word	0x080021d5
 8002200:	080021d5 	.word	0x080021d5
 8002204:	08002259 	.word	0x08002259
 8002208:	080021d5 	.word	0x080021d5
 800220c:	080021d5 	.word	0x080021d5
 8002210:	080021d5 	.word	0x080021d5
 8002214:	080021d5 	.word	0x080021d5
 8002218:	08002365 	.word	0x08002365
 800221c:	08002289 	.word	0x08002289
 8002220:	08002347 	.word	0x08002347
 8002224:	080021d5 	.word	0x080021d5
 8002228:	080021d5 	.word	0x080021d5
 800222c:	08002387 	.word	0x08002387
 8002230:	080021d5 	.word	0x080021d5
 8002234:	08002289 	.word	0x08002289
 8002238:	080021d5 	.word	0x080021d5
 800223c:	080021d5 	.word	0x080021d5
 8002240:	0800234f 	.word	0x0800234f
 8002244:	682b      	ldr	r3, [r5, #0]
 8002246:	1d1a      	adds	r2, r3, #4
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	602a      	str	r2, [r5, #0]
 800224c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002250:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002254:	2301      	movs	r3, #1
 8002256:	e0a3      	b.n	80023a0 <_printf_i+0x1f4>
 8002258:	6820      	ldr	r0, [r4, #0]
 800225a:	6829      	ldr	r1, [r5, #0]
 800225c:	0606      	lsls	r6, r0, #24
 800225e:	f101 0304 	add.w	r3, r1, #4
 8002262:	d50a      	bpl.n	800227a <_printf_i+0xce>
 8002264:	680e      	ldr	r6, [r1, #0]
 8002266:	602b      	str	r3, [r5, #0]
 8002268:	2e00      	cmp	r6, #0
 800226a:	da03      	bge.n	8002274 <_printf_i+0xc8>
 800226c:	232d      	movs	r3, #45	; 0x2d
 800226e:	4276      	negs	r6, r6
 8002270:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002274:	485e      	ldr	r0, [pc, #376]	; (80023f0 <_printf_i+0x244>)
 8002276:	230a      	movs	r3, #10
 8002278:	e019      	b.n	80022ae <_printf_i+0x102>
 800227a:	680e      	ldr	r6, [r1, #0]
 800227c:	602b      	str	r3, [r5, #0]
 800227e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002282:	bf18      	it	ne
 8002284:	b236      	sxthne	r6, r6
 8002286:	e7ef      	b.n	8002268 <_printf_i+0xbc>
 8002288:	682b      	ldr	r3, [r5, #0]
 800228a:	6820      	ldr	r0, [r4, #0]
 800228c:	1d19      	adds	r1, r3, #4
 800228e:	6029      	str	r1, [r5, #0]
 8002290:	0601      	lsls	r1, r0, #24
 8002292:	d501      	bpl.n	8002298 <_printf_i+0xec>
 8002294:	681e      	ldr	r6, [r3, #0]
 8002296:	e002      	b.n	800229e <_printf_i+0xf2>
 8002298:	0646      	lsls	r6, r0, #25
 800229a:	d5fb      	bpl.n	8002294 <_printf_i+0xe8>
 800229c:	881e      	ldrh	r6, [r3, #0]
 800229e:	4854      	ldr	r0, [pc, #336]	; (80023f0 <_printf_i+0x244>)
 80022a0:	2f6f      	cmp	r7, #111	; 0x6f
 80022a2:	bf0c      	ite	eq
 80022a4:	2308      	moveq	r3, #8
 80022a6:	230a      	movne	r3, #10
 80022a8:	2100      	movs	r1, #0
 80022aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80022ae:	6865      	ldr	r5, [r4, #4]
 80022b0:	60a5      	str	r5, [r4, #8]
 80022b2:	2d00      	cmp	r5, #0
 80022b4:	bfa2      	ittt	ge
 80022b6:	6821      	ldrge	r1, [r4, #0]
 80022b8:	f021 0104 	bicge.w	r1, r1, #4
 80022bc:	6021      	strge	r1, [r4, #0]
 80022be:	b90e      	cbnz	r6, 80022c4 <_printf_i+0x118>
 80022c0:	2d00      	cmp	r5, #0
 80022c2:	d04d      	beq.n	8002360 <_printf_i+0x1b4>
 80022c4:	4615      	mov	r5, r2
 80022c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80022ca:	fb03 6711 	mls	r7, r3, r1, r6
 80022ce:	5dc7      	ldrb	r7, [r0, r7]
 80022d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80022d4:	4637      	mov	r7, r6
 80022d6:	42bb      	cmp	r3, r7
 80022d8:	460e      	mov	r6, r1
 80022da:	d9f4      	bls.n	80022c6 <_printf_i+0x11a>
 80022dc:	2b08      	cmp	r3, #8
 80022de:	d10b      	bne.n	80022f8 <_printf_i+0x14c>
 80022e0:	6823      	ldr	r3, [r4, #0]
 80022e2:	07de      	lsls	r6, r3, #31
 80022e4:	d508      	bpl.n	80022f8 <_printf_i+0x14c>
 80022e6:	6923      	ldr	r3, [r4, #16]
 80022e8:	6861      	ldr	r1, [r4, #4]
 80022ea:	4299      	cmp	r1, r3
 80022ec:	bfde      	ittt	le
 80022ee:	2330      	movle	r3, #48	; 0x30
 80022f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80022f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80022f8:	1b52      	subs	r2, r2, r5
 80022fa:	6122      	str	r2, [r4, #16]
 80022fc:	f8cd a000 	str.w	sl, [sp]
 8002300:	464b      	mov	r3, r9
 8002302:	aa03      	add	r2, sp, #12
 8002304:	4621      	mov	r1, r4
 8002306:	4640      	mov	r0, r8
 8002308:	f7ff fee2 	bl	80020d0 <_printf_common>
 800230c:	3001      	adds	r0, #1
 800230e:	d14c      	bne.n	80023aa <_printf_i+0x1fe>
 8002310:	f04f 30ff 	mov.w	r0, #4294967295
 8002314:	b004      	add	sp, #16
 8002316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800231a:	4835      	ldr	r0, [pc, #212]	; (80023f0 <_printf_i+0x244>)
 800231c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002320:	6829      	ldr	r1, [r5, #0]
 8002322:	6823      	ldr	r3, [r4, #0]
 8002324:	f851 6b04 	ldr.w	r6, [r1], #4
 8002328:	6029      	str	r1, [r5, #0]
 800232a:	061d      	lsls	r5, r3, #24
 800232c:	d514      	bpl.n	8002358 <_printf_i+0x1ac>
 800232e:	07df      	lsls	r7, r3, #31
 8002330:	bf44      	itt	mi
 8002332:	f043 0320 	orrmi.w	r3, r3, #32
 8002336:	6023      	strmi	r3, [r4, #0]
 8002338:	b91e      	cbnz	r6, 8002342 <_printf_i+0x196>
 800233a:	6823      	ldr	r3, [r4, #0]
 800233c:	f023 0320 	bic.w	r3, r3, #32
 8002340:	6023      	str	r3, [r4, #0]
 8002342:	2310      	movs	r3, #16
 8002344:	e7b0      	b.n	80022a8 <_printf_i+0xfc>
 8002346:	6823      	ldr	r3, [r4, #0]
 8002348:	f043 0320 	orr.w	r3, r3, #32
 800234c:	6023      	str	r3, [r4, #0]
 800234e:	2378      	movs	r3, #120	; 0x78
 8002350:	4828      	ldr	r0, [pc, #160]	; (80023f4 <_printf_i+0x248>)
 8002352:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002356:	e7e3      	b.n	8002320 <_printf_i+0x174>
 8002358:	0659      	lsls	r1, r3, #25
 800235a:	bf48      	it	mi
 800235c:	b2b6      	uxthmi	r6, r6
 800235e:	e7e6      	b.n	800232e <_printf_i+0x182>
 8002360:	4615      	mov	r5, r2
 8002362:	e7bb      	b.n	80022dc <_printf_i+0x130>
 8002364:	682b      	ldr	r3, [r5, #0]
 8002366:	6826      	ldr	r6, [r4, #0]
 8002368:	6961      	ldr	r1, [r4, #20]
 800236a:	1d18      	adds	r0, r3, #4
 800236c:	6028      	str	r0, [r5, #0]
 800236e:	0635      	lsls	r5, r6, #24
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	d501      	bpl.n	8002378 <_printf_i+0x1cc>
 8002374:	6019      	str	r1, [r3, #0]
 8002376:	e002      	b.n	800237e <_printf_i+0x1d2>
 8002378:	0670      	lsls	r0, r6, #25
 800237a:	d5fb      	bpl.n	8002374 <_printf_i+0x1c8>
 800237c:	8019      	strh	r1, [r3, #0]
 800237e:	2300      	movs	r3, #0
 8002380:	6123      	str	r3, [r4, #16]
 8002382:	4615      	mov	r5, r2
 8002384:	e7ba      	b.n	80022fc <_printf_i+0x150>
 8002386:	682b      	ldr	r3, [r5, #0]
 8002388:	1d1a      	adds	r2, r3, #4
 800238a:	602a      	str	r2, [r5, #0]
 800238c:	681d      	ldr	r5, [r3, #0]
 800238e:	6862      	ldr	r2, [r4, #4]
 8002390:	2100      	movs	r1, #0
 8002392:	4628      	mov	r0, r5
 8002394:	f7fd ff2c 	bl	80001f0 <memchr>
 8002398:	b108      	cbz	r0, 800239e <_printf_i+0x1f2>
 800239a:	1b40      	subs	r0, r0, r5
 800239c:	6060      	str	r0, [r4, #4]
 800239e:	6863      	ldr	r3, [r4, #4]
 80023a0:	6123      	str	r3, [r4, #16]
 80023a2:	2300      	movs	r3, #0
 80023a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023a8:	e7a8      	b.n	80022fc <_printf_i+0x150>
 80023aa:	6923      	ldr	r3, [r4, #16]
 80023ac:	462a      	mov	r2, r5
 80023ae:	4649      	mov	r1, r9
 80023b0:	4640      	mov	r0, r8
 80023b2:	47d0      	blx	sl
 80023b4:	3001      	adds	r0, #1
 80023b6:	d0ab      	beq.n	8002310 <_printf_i+0x164>
 80023b8:	6823      	ldr	r3, [r4, #0]
 80023ba:	079b      	lsls	r3, r3, #30
 80023bc:	d413      	bmi.n	80023e6 <_printf_i+0x23a>
 80023be:	68e0      	ldr	r0, [r4, #12]
 80023c0:	9b03      	ldr	r3, [sp, #12]
 80023c2:	4298      	cmp	r0, r3
 80023c4:	bfb8      	it	lt
 80023c6:	4618      	movlt	r0, r3
 80023c8:	e7a4      	b.n	8002314 <_printf_i+0x168>
 80023ca:	2301      	movs	r3, #1
 80023cc:	4632      	mov	r2, r6
 80023ce:	4649      	mov	r1, r9
 80023d0:	4640      	mov	r0, r8
 80023d2:	47d0      	blx	sl
 80023d4:	3001      	adds	r0, #1
 80023d6:	d09b      	beq.n	8002310 <_printf_i+0x164>
 80023d8:	3501      	adds	r5, #1
 80023da:	68e3      	ldr	r3, [r4, #12]
 80023dc:	9903      	ldr	r1, [sp, #12]
 80023de:	1a5b      	subs	r3, r3, r1
 80023e0:	42ab      	cmp	r3, r5
 80023e2:	dcf2      	bgt.n	80023ca <_printf_i+0x21e>
 80023e4:	e7eb      	b.n	80023be <_printf_i+0x212>
 80023e6:	2500      	movs	r5, #0
 80023e8:	f104 0619 	add.w	r6, r4, #25
 80023ec:	e7f5      	b.n	80023da <_printf_i+0x22e>
 80023ee:	bf00      	nop
 80023f0:	08002a84 	.word	0x08002a84
 80023f4:	08002a95 	.word	0x08002a95

080023f8 <memcpy>:
 80023f8:	440a      	add	r2, r1
 80023fa:	4291      	cmp	r1, r2
 80023fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8002400:	d100      	bne.n	8002404 <memcpy+0xc>
 8002402:	4770      	bx	lr
 8002404:	b510      	push	{r4, lr}
 8002406:	f811 4b01 	ldrb.w	r4, [r1], #1
 800240a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800240e:	4291      	cmp	r1, r2
 8002410:	d1f9      	bne.n	8002406 <memcpy+0xe>
 8002412:	bd10      	pop	{r4, pc}

08002414 <memmove>:
 8002414:	4288      	cmp	r0, r1
 8002416:	b510      	push	{r4, lr}
 8002418:	eb01 0402 	add.w	r4, r1, r2
 800241c:	d902      	bls.n	8002424 <memmove+0x10>
 800241e:	4284      	cmp	r4, r0
 8002420:	4623      	mov	r3, r4
 8002422:	d807      	bhi.n	8002434 <memmove+0x20>
 8002424:	1e43      	subs	r3, r0, #1
 8002426:	42a1      	cmp	r1, r4
 8002428:	d008      	beq.n	800243c <memmove+0x28>
 800242a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800242e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002432:	e7f8      	b.n	8002426 <memmove+0x12>
 8002434:	4402      	add	r2, r0
 8002436:	4601      	mov	r1, r0
 8002438:	428a      	cmp	r2, r1
 800243a:	d100      	bne.n	800243e <memmove+0x2a>
 800243c:	bd10      	pop	{r4, pc}
 800243e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002442:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002446:	e7f7      	b.n	8002438 <memmove+0x24>

08002448 <_free_r>:
 8002448:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800244a:	2900      	cmp	r1, #0
 800244c:	d044      	beq.n	80024d8 <_free_r+0x90>
 800244e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002452:	9001      	str	r0, [sp, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	f1a1 0404 	sub.w	r4, r1, #4
 800245a:	bfb8      	it	lt
 800245c:	18e4      	addlt	r4, r4, r3
 800245e:	f000 f913 	bl	8002688 <__malloc_lock>
 8002462:	4a1e      	ldr	r2, [pc, #120]	; (80024dc <_free_r+0x94>)
 8002464:	9801      	ldr	r0, [sp, #4]
 8002466:	6813      	ldr	r3, [r2, #0]
 8002468:	b933      	cbnz	r3, 8002478 <_free_r+0x30>
 800246a:	6063      	str	r3, [r4, #4]
 800246c:	6014      	str	r4, [r2, #0]
 800246e:	b003      	add	sp, #12
 8002470:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002474:	f000 b90e 	b.w	8002694 <__malloc_unlock>
 8002478:	42a3      	cmp	r3, r4
 800247a:	d908      	bls.n	800248e <_free_r+0x46>
 800247c:	6825      	ldr	r5, [r4, #0]
 800247e:	1961      	adds	r1, r4, r5
 8002480:	428b      	cmp	r3, r1
 8002482:	bf01      	itttt	eq
 8002484:	6819      	ldreq	r1, [r3, #0]
 8002486:	685b      	ldreq	r3, [r3, #4]
 8002488:	1949      	addeq	r1, r1, r5
 800248a:	6021      	streq	r1, [r4, #0]
 800248c:	e7ed      	b.n	800246a <_free_r+0x22>
 800248e:	461a      	mov	r2, r3
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	b10b      	cbz	r3, 8002498 <_free_r+0x50>
 8002494:	42a3      	cmp	r3, r4
 8002496:	d9fa      	bls.n	800248e <_free_r+0x46>
 8002498:	6811      	ldr	r1, [r2, #0]
 800249a:	1855      	adds	r5, r2, r1
 800249c:	42a5      	cmp	r5, r4
 800249e:	d10b      	bne.n	80024b8 <_free_r+0x70>
 80024a0:	6824      	ldr	r4, [r4, #0]
 80024a2:	4421      	add	r1, r4
 80024a4:	1854      	adds	r4, r2, r1
 80024a6:	42a3      	cmp	r3, r4
 80024a8:	6011      	str	r1, [r2, #0]
 80024aa:	d1e0      	bne.n	800246e <_free_r+0x26>
 80024ac:	681c      	ldr	r4, [r3, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	6053      	str	r3, [r2, #4]
 80024b2:	4421      	add	r1, r4
 80024b4:	6011      	str	r1, [r2, #0]
 80024b6:	e7da      	b.n	800246e <_free_r+0x26>
 80024b8:	d902      	bls.n	80024c0 <_free_r+0x78>
 80024ba:	230c      	movs	r3, #12
 80024bc:	6003      	str	r3, [r0, #0]
 80024be:	e7d6      	b.n	800246e <_free_r+0x26>
 80024c0:	6825      	ldr	r5, [r4, #0]
 80024c2:	1961      	adds	r1, r4, r5
 80024c4:	428b      	cmp	r3, r1
 80024c6:	bf04      	itt	eq
 80024c8:	6819      	ldreq	r1, [r3, #0]
 80024ca:	685b      	ldreq	r3, [r3, #4]
 80024cc:	6063      	str	r3, [r4, #4]
 80024ce:	bf04      	itt	eq
 80024d0:	1949      	addeq	r1, r1, r5
 80024d2:	6021      	streq	r1, [r4, #0]
 80024d4:	6054      	str	r4, [r2, #4]
 80024d6:	e7ca      	b.n	800246e <_free_r+0x26>
 80024d8:	b003      	add	sp, #12
 80024da:	bd30      	pop	{r4, r5, pc}
 80024dc:	2000b2b8 	.word	0x2000b2b8

080024e0 <sbrk_aligned>:
 80024e0:	b570      	push	{r4, r5, r6, lr}
 80024e2:	4e0e      	ldr	r6, [pc, #56]	; (800251c <sbrk_aligned+0x3c>)
 80024e4:	460c      	mov	r4, r1
 80024e6:	6831      	ldr	r1, [r6, #0]
 80024e8:	4605      	mov	r5, r0
 80024ea:	b911      	cbnz	r1, 80024f2 <sbrk_aligned+0x12>
 80024ec:	f000 f8bc 	bl	8002668 <_sbrk_r>
 80024f0:	6030      	str	r0, [r6, #0]
 80024f2:	4621      	mov	r1, r4
 80024f4:	4628      	mov	r0, r5
 80024f6:	f000 f8b7 	bl	8002668 <_sbrk_r>
 80024fa:	1c43      	adds	r3, r0, #1
 80024fc:	d00a      	beq.n	8002514 <sbrk_aligned+0x34>
 80024fe:	1cc4      	adds	r4, r0, #3
 8002500:	f024 0403 	bic.w	r4, r4, #3
 8002504:	42a0      	cmp	r0, r4
 8002506:	d007      	beq.n	8002518 <sbrk_aligned+0x38>
 8002508:	1a21      	subs	r1, r4, r0
 800250a:	4628      	mov	r0, r5
 800250c:	f000 f8ac 	bl	8002668 <_sbrk_r>
 8002510:	3001      	adds	r0, #1
 8002512:	d101      	bne.n	8002518 <sbrk_aligned+0x38>
 8002514:	f04f 34ff 	mov.w	r4, #4294967295
 8002518:	4620      	mov	r0, r4
 800251a:	bd70      	pop	{r4, r5, r6, pc}
 800251c:	2000b2bc 	.word	0x2000b2bc

08002520 <_malloc_r>:
 8002520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002524:	1ccd      	adds	r5, r1, #3
 8002526:	f025 0503 	bic.w	r5, r5, #3
 800252a:	3508      	adds	r5, #8
 800252c:	2d0c      	cmp	r5, #12
 800252e:	bf38      	it	cc
 8002530:	250c      	movcc	r5, #12
 8002532:	2d00      	cmp	r5, #0
 8002534:	4607      	mov	r7, r0
 8002536:	db01      	blt.n	800253c <_malloc_r+0x1c>
 8002538:	42a9      	cmp	r1, r5
 800253a:	d905      	bls.n	8002548 <_malloc_r+0x28>
 800253c:	230c      	movs	r3, #12
 800253e:	603b      	str	r3, [r7, #0]
 8002540:	2600      	movs	r6, #0
 8002542:	4630      	mov	r0, r6
 8002544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002548:	4e2e      	ldr	r6, [pc, #184]	; (8002604 <_malloc_r+0xe4>)
 800254a:	f000 f89d 	bl	8002688 <__malloc_lock>
 800254e:	6833      	ldr	r3, [r6, #0]
 8002550:	461c      	mov	r4, r3
 8002552:	bb34      	cbnz	r4, 80025a2 <_malloc_r+0x82>
 8002554:	4629      	mov	r1, r5
 8002556:	4638      	mov	r0, r7
 8002558:	f7ff ffc2 	bl	80024e0 <sbrk_aligned>
 800255c:	1c43      	adds	r3, r0, #1
 800255e:	4604      	mov	r4, r0
 8002560:	d14d      	bne.n	80025fe <_malloc_r+0xde>
 8002562:	6834      	ldr	r4, [r6, #0]
 8002564:	4626      	mov	r6, r4
 8002566:	2e00      	cmp	r6, #0
 8002568:	d140      	bne.n	80025ec <_malloc_r+0xcc>
 800256a:	6823      	ldr	r3, [r4, #0]
 800256c:	4631      	mov	r1, r6
 800256e:	4638      	mov	r0, r7
 8002570:	eb04 0803 	add.w	r8, r4, r3
 8002574:	f000 f878 	bl	8002668 <_sbrk_r>
 8002578:	4580      	cmp	r8, r0
 800257a:	d13a      	bne.n	80025f2 <_malloc_r+0xd2>
 800257c:	6821      	ldr	r1, [r4, #0]
 800257e:	3503      	adds	r5, #3
 8002580:	1a6d      	subs	r5, r5, r1
 8002582:	f025 0503 	bic.w	r5, r5, #3
 8002586:	3508      	adds	r5, #8
 8002588:	2d0c      	cmp	r5, #12
 800258a:	bf38      	it	cc
 800258c:	250c      	movcc	r5, #12
 800258e:	4629      	mov	r1, r5
 8002590:	4638      	mov	r0, r7
 8002592:	f7ff ffa5 	bl	80024e0 <sbrk_aligned>
 8002596:	3001      	adds	r0, #1
 8002598:	d02b      	beq.n	80025f2 <_malloc_r+0xd2>
 800259a:	6823      	ldr	r3, [r4, #0]
 800259c:	442b      	add	r3, r5
 800259e:	6023      	str	r3, [r4, #0]
 80025a0:	e00e      	b.n	80025c0 <_malloc_r+0xa0>
 80025a2:	6822      	ldr	r2, [r4, #0]
 80025a4:	1b52      	subs	r2, r2, r5
 80025a6:	d41e      	bmi.n	80025e6 <_malloc_r+0xc6>
 80025a8:	2a0b      	cmp	r2, #11
 80025aa:	d916      	bls.n	80025da <_malloc_r+0xba>
 80025ac:	1961      	adds	r1, r4, r5
 80025ae:	42a3      	cmp	r3, r4
 80025b0:	6025      	str	r5, [r4, #0]
 80025b2:	bf18      	it	ne
 80025b4:	6059      	strne	r1, [r3, #4]
 80025b6:	6863      	ldr	r3, [r4, #4]
 80025b8:	bf08      	it	eq
 80025ba:	6031      	streq	r1, [r6, #0]
 80025bc:	5162      	str	r2, [r4, r5]
 80025be:	604b      	str	r3, [r1, #4]
 80025c0:	4638      	mov	r0, r7
 80025c2:	f104 060b 	add.w	r6, r4, #11
 80025c6:	f000 f865 	bl	8002694 <__malloc_unlock>
 80025ca:	f026 0607 	bic.w	r6, r6, #7
 80025ce:	1d23      	adds	r3, r4, #4
 80025d0:	1af2      	subs	r2, r6, r3
 80025d2:	d0b6      	beq.n	8002542 <_malloc_r+0x22>
 80025d4:	1b9b      	subs	r3, r3, r6
 80025d6:	50a3      	str	r3, [r4, r2]
 80025d8:	e7b3      	b.n	8002542 <_malloc_r+0x22>
 80025da:	6862      	ldr	r2, [r4, #4]
 80025dc:	42a3      	cmp	r3, r4
 80025de:	bf0c      	ite	eq
 80025e0:	6032      	streq	r2, [r6, #0]
 80025e2:	605a      	strne	r2, [r3, #4]
 80025e4:	e7ec      	b.n	80025c0 <_malloc_r+0xa0>
 80025e6:	4623      	mov	r3, r4
 80025e8:	6864      	ldr	r4, [r4, #4]
 80025ea:	e7b2      	b.n	8002552 <_malloc_r+0x32>
 80025ec:	4634      	mov	r4, r6
 80025ee:	6876      	ldr	r6, [r6, #4]
 80025f0:	e7b9      	b.n	8002566 <_malloc_r+0x46>
 80025f2:	230c      	movs	r3, #12
 80025f4:	603b      	str	r3, [r7, #0]
 80025f6:	4638      	mov	r0, r7
 80025f8:	f000 f84c 	bl	8002694 <__malloc_unlock>
 80025fc:	e7a1      	b.n	8002542 <_malloc_r+0x22>
 80025fe:	6025      	str	r5, [r4, #0]
 8002600:	e7de      	b.n	80025c0 <_malloc_r+0xa0>
 8002602:	bf00      	nop
 8002604:	2000b2b8 	.word	0x2000b2b8

08002608 <_realloc_r>:
 8002608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800260c:	4680      	mov	r8, r0
 800260e:	4614      	mov	r4, r2
 8002610:	460e      	mov	r6, r1
 8002612:	b921      	cbnz	r1, 800261e <_realloc_r+0x16>
 8002614:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002618:	4611      	mov	r1, r2
 800261a:	f7ff bf81 	b.w	8002520 <_malloc_r>
 800261e:	b92a      	cbnz	r2, 800262c <_realloc_r+0x24>
 8002620:	f7ff ff12 	bl	8002448 <_free_r>
 8002624:	4625      	mov	r5, r4
 8002626:	4628      	mov	r0, r5
 8002628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800262c:	f000 f838 	bl	80026a0 <_malloc_usable_size_r>
 8002630:	4284      	cmp	r4, r0
 8002632:	4607      	mov	r7, r0
 8002634:	d802      	bhi.n	800263c <_realloc_r+0x34>
 8002636:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800263a:	d812      	bhi.n	8002662 <_realloc_r+0x5a>
 800263c:	4621      	mov	r1, r4
 800263e:	4640      	mov	r0, r8
 8002640:	f7ff ff6e 	bl	8002520 <_malloc_r>
 8002644:	4605      	mov	r5, r0
 8002646:	2800      	cmp	r0, #0
 8002648:	d0ed      	beq.n	8002626 <_realloc_r+0x1e>
 800264a:	42bc      	cmp	r4, r7
 800264c:	4622      	mov	r2, r4
 800264e:	4631      	mov	r1, r6
 8002650:	bf28      	it	cs
 8002652:	463a      	movcs	r2, r7
 8002654:	f7ff fed0 	bl	80023f8 <memcpy>
 8002658:	4631      	mov	r1, r6
 800265a:	4640      	mov	r0, r8
 800265c:	f7ff fef4 	bl	8002448 <_free_r>
 8002660:	e7e1      	b.n	8002626 <_realloc_r+0x1e>
 8002662:	4635      	mov	r5, r6
 8002664:	e7df      	b.n	8002626 <_realloc_r+0x1e>
	...

08002668 <_sbrk_r>:
 8002668:	b538      	push	{r3, r4, r5, lr}
 800266a:	4d06      	ldr	r5, [pc, #24]	; (8002684 <_sbrk_r+0x1c>)
 800266c:	2300      	movs	r3, #0
 800266e:	4604      	mov	r4, r0
 8002670:	4608      	mov	r0, r1
 8002672:	602b      	str	r3, [r5, #0]
 8002674:	f7ff fa7e 	bl	8001b74 <_sbrk>
 8002678:	1c43      	adds	r3, r0, #1
 800267a:	d102      	bne.n	8002682 <_sbrk_r+0x1a>
 800267c:	682b      	ldr	r3, [r5, #0]
 800267e:	b103      	cbz	r3, 8002682 <_sbrk_r+0x1a>
 8002680:	6023      	str	r3, [r4, #0]
 8002682:	bd38      	pop	{r3, r4, r5, pc}
 8002684:	2000b2c0 	.word	0x2000b2c0

08002688 <__malloc_lock>:
 8002688:	4801      	ldr	r0, [pc, #4]	; (8002690 <__malloc_lock+0x8>)
 800268a:	f000 b811 	b.w	80026b0 <__retarget_lock_acquire_recursive>
 800268e:	bf00      	nop
 8002690:	2000b2c4 	.word	0x2000b2c4

08002694 <__malloc_unlock>:
 8002694:	4801      	ldr	r0, [pc, #4]	; (800269c <__malloc_unlock+0x8>)
 8002696:	f000 b80c 	b.w	80026b2 <__retarget_lock_release_recursive>
 800269a:	bf00      	nop
 800269c:	2000b2c4 	.word	0x2000b2c4

080026a0 <_malloc_usable_size_r>:
 80026a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80026a4:	1f18      	subs	r0, r3, #4
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	bfbc      	itt	lt
 80026aa:	580b      	ldrlt	r3, [r1, r0]
 80026ac:	18c0      	addlt	r0, r0, r3
 80026ae:	4770      	bx	lr

080026b0 <__retarget_lock_acquire_recursive>:
 80026b0:	4770      	bx	lr

080026b2 <__retarget_lock_release_recursive>:
 80026b2:	4770      	bx	lr

080026b4 <_init>:
 80026b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026b6:	bf00      	nop
 80026b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ba:	bc08      	pop	{r3}
 80026bc:	469e      	mov	lr, r3
 80026be:	4770      	bx	lr

080026c0 <_fini>:
 80026c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026c2:	bf00      	nop
 80026c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026c6:	bc08      	pop	{r3}
 80026c8:	469e      	mov	lr, r3
 80026ca:	4770      	bx	lr
