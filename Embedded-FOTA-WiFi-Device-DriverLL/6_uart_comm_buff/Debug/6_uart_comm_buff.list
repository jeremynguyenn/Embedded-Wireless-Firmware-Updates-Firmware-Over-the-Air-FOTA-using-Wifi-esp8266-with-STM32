
6_uart_comm_buff.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008dc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000a74  08000a74  00010a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a98  08000a98  00010aa0  2**0
                  CONTENTS
  4 .ARM          00000000  08000a98  08000a98  00010aa0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a98  08000aa0  00010aa0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a98  08000a98  00010a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a9c  08000a9c  00010a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010aa0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000000  08000aa0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08000aa0  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010aa0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001bd0  00000000  00000000  00010ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000930  00000000  00000000  000126a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f8  00000000  00000000  00012fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000180  00000000  00000000  000131c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f3a7  00000000  00000000  00013348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002dec  00000000  00000000  000226ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000540d7  00000000  00000000  000254db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000795b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000058c  00000000  00000000  00079604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000a5c 	.word	0x08000a5c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000a5c 	.word	0x08000a5c

080001d8 <pa1_adc_init>:
#define CR2_CONT	 (1U<<1)
#define CR2_SWSTART	  (1U<<30)
#define SR_EOC		  (1U<<1)

void pa1_adc_init(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	/****Configure the ADC GPIO Pin**/
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 80001dc:	4b14      	ldr	r3, [pc, #80]	; (8000230 <pa1_adc_init+0x58>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a13      	ldr	r2, [pc, #76]	; (8000230 <pa1_adc_init+0x58>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA1 mode to analog mode*/
	GPIOA->MODER |=(1U<<2);
 80001e8:	4b12      	ldr	r3, [pc, #72]	; (8000234 <pa1_adc_init+0x5c>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a11      	ldr	r2, [pc, #68]	; (8000234 <pa1_adc_init+0x5c>)
 80001ee:	f043 0304 	orr.w	r3, r3, #4
 80001f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<3);
 80001f4:	4b0f      	ldr	r3, [pc, #60]	; (8000234 <pa1_adc_init+0x5c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a0e      	ldr	r2, [pc, #56]	; (8000234 <pa1_adc_init+0x5c>)
 80001fa:	f043 0308 	orr.w	r3, r3, #8
 80001fe:	6013      	str	r3, [r2, #0]

	/****Configure the ADC Module**/
	/*Enable clock access to the ADC module*/
	RCC->APB2ENR |=ADC1EN;
 8000200:	4b0b      	ldr	r3, [pc, #44]	; (8000230 <pa1_adc_init+0x58>)
 8000202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000204:	4a0a      	ldr	r2, [pc, #40]	; (8000230 <pa1_adc_init+0x58>)
 8000206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800020a:	6453      	str	r3, [r2, #68]	; 0x44

	/*Set conversion sequence start*/
	ADC1->SQR3 = ADC_CH1;
 800020c:	4b0a      	ldr	r3, [pc, #40]	; (8000238 <pa1_adc_init+0x60>)
 800020e:	2201      	movs	r2, #1
 8000210:	635a      	str	r2, [r3, #52]	; 0x34

	/*Set conversion sequence length*/
	ADC1->SQR1 = AD_SEQ_LEN_1;
 8000212:	4b09      	ldr	r3, [pc, #36]	; (8000238 <pa1_adc_init+0x60>)
 8000214:	2200      	movs	r2, #0
 8000216:	62da      	str	r2, [r3, #44]	; 0x2c

	/*Enable ADC module*/
	ADC1->CR2 |=CR2_ADCON;
 8000218:	4b07      	ldr	r3, [pc, #28]	; (8000238 <pa1_adc_init+0x60>)
 800021a:	689b      	ldr	r3, [r3, #8]
 800021c:	4a06      	ldr	r2, [pc, #24]	; (8000238 <pa1_adc_init+0x60>)
 800021e:	f043 0301 	orr.w	r3, r3, #1
 8000222:	6093      	str	r3, [r2, #8]

}
 8000224:	bf00      	nop
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	40023800 	.word	0x40023800
 8000234:	40020000 	.word	0x40020000
 8000238:	40012000 	.word	0x40012000

0800023c <led_init>:
#define LED_PIN		PIN5
#define PIN13		(1U<<13)
#define BTN_PIN		PIN13

void led_init(void)
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000240:	4b0b      	ldr	r3, [pc, #44]	; (8000270 <led_init+0x34>)
 8000242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000244:	4a0a      	ldr	r2, [pc, #40]	; (8000270 <led_init+0x34>)
 8000246:	f043 0301 	orr.w	r3, r3, #1
 800024a:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA5 mode to output mode*/
	GPIOA->MODER |=(1U<<10);
 800024c:	4b09      	ldr	r3, [pc, #36]	; (8000274 <led_init+0x38>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a08      	ldr	r2, [pc, #32]	; (8000274 <led_init+0x38>)
 8000252:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000256:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <led_init+0x38>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a05      	ldr	r2, [pc, #20]	; (8000274 <led_init+0x38>)
 800025e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000262:	6013      	str	r3, [r2, #0]
}
 8000264:	bf00      	nop
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	40023800 	.word	0x40023800
 8000274:	40020000 	.word	0x40020000

08000278 <button_init>:
	GPIOA->ODR &=~LED_PIN;

}

void button_init(void)
{
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
	/*Enable clock access to PORTC*/
	RCC->AHB1ENR |=GPIOCEN;
 800027c:	4b0b      	ldr	r3, [pc, #44]	; (80002ac <button_init+0x34>)
 800027e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000280:	4a0a      	ldr	r2, [pc, #40]	; (80002ac <button_init+0x34>)
 8000282:	f043 0304 	orr.w	r3, r3, #4
 8000286:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PC13 as an input pin*/
	GPIOC->MODER &=~(1U<<26);
 8000288:	4b09      	ldr	r3, [pc, #36]	; (80002b0 <button_init+0x38>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a08      	ldr	r2, [pc, #32]	; (80002b0 <button_init+0x38>)
 800028e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000292:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~(1U<<27);
 8000294:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <button_init+0x38>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a05      	ldr	r2, [pc, #20]	; (80002b0 <button_init+0x38>)
 800029a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800029e:	6013      	str	r3, [r2, #0]

}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	40023800 	.word	0x40023800
 80002b0:	40020800 	.word	0x40020800

080002b4 <circular_buffer_init>:
circular_buffer * _rx_buffer2;
circular_buffer * _tx_buffer2;


void circular_buffer_init(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
	/*Init buff pointers*/
	_rx_buffer1 =  &rx_buffer1;
 80002b8:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <circular_buffer_init+0x40>)
 80002ba:	4a0f      	ldr	r2, [pc, #60]	; (80002f8 <circular_buffer_init+0x44>)
 80002bc:	601a      	str	r2, [r3, #0]
	_rx_buffer2 =  &rx_buffer2;
 80002be:	4b0f      	ldr	r3, [pc, #60]	; (80002fc <circular_buffer_init+0x48>)
 80002c0:	4a0f      	ldr	r2, [pc, #60]	; (8000300 <circular_buffer_init+0x4c>)
 80002c2:	601a      	str	r2, [r3, #0]

	_tx_buffer1 =  &tx_buffer1;
 80002c4:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <circular_buffer_init+0x50>)
 80002c6:	4a10      	ldr	r2, [pc, #64]	; (8000308 <circular_buffer_init+0x54>)
 80002c8:	601a      	str	r2, [r3, #0]
	_tx_buffer2 =  &tx_buffer2;
 80002ca:	4b10      	ldr	r3, [pc, #64]	; (800030c <circular_buffer_init+0x58>)
 80002cc:	4a10      	ldr	r2, [pc, #64]	; (8000310 <circular_buffer_init+0x5c>)
 80002ce:	601a      	str	r2, [r3, #0]

	/*Initial RX interrupt*/
	USART1->CR1 |=CR1_RXNEIE;
 80002d0:	4b10      	ldr	r3, [pc, #64]	; (8000314 <circular_buffer_init+0x60>)
 80002d2:	68db      	ldr	r3, [r3, #12]
 80002d4:	4a0f      	ldr	r2, [pc, #60]	; (8000314 <circular_buffer_init+0x60>)
 80002d6:	f043 0320 	orr.w	r3, r3, #32
 80002da:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |=CR1_RXNEIE;
 80002dc:	4b0e      	ldr	r3, [pc, #56]	; (8000318 <circular_buffer_init+0x64>)
 80002de:	68db      	ldr	r3, [r3, #12]
 80002e0:	4a0d      	ldr	r2, [pc, #52]	; (8000318 <circular_buffer_init+0x64>)
 80002e2:	f043 0320 	orr.w	r3, r3, #32
 80002e6:	60d3      	str	r3, [r2, #12]

}
 80002e8:	bf00      	nop
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	200001cc 	.word	0x200001cc
 80002f8:	2000001c 	.word	0x2000001c
 80002fc:	200001d4 	.word	0x200001d4
 8000300:	200000f4 	.word	0x200000f4
 8000304:	200001d0 	.word	0x200001d0
 8000308:	20000088 	.word	0x20000088
 800030c:	200001d8 	.word	0x200001d8
 8000310:	20000160 	.word	0x20000160
 8000314:	40011000 	.word	0x40011000
 8000318:	40004400 	.word	0x40004400

0800031c <buff_store_char>:


static void buff_store_char(unsigned char c, circular_buffer * buffer)
{
 800031c:	b480      	push	{r7}
 800031e:	b085      	sub	sp, #20
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	6039      	str	r1, [r7, #0]
 8000326:	71fb      	strb	r3, [r7, #7]
	int loc =  (uint32_t)(buffer->head +1 )% UART_BUFFER_SIZE;
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800032c:	1c5a      	adds	r2, r3, #1
 800032e:	4b0e      	ldr	r3, [pc, #56]	; (8000368 <buff_store_char+0x4c>)
 8000330:	fba3 1302 	umull	r1, r3, r3, r2
 8000334:	095b      	lsrs	r3, r3, #5
 8000336:	2164      	movs	r1, #100	; 0x64
 8000338:	fb01 f303 	mul.w	r3, r1, r3
 800033c:	1ad3      	subs	r3, r2, r3
 800033e:	60fb      	str	r3, [r7, #12]

	/*Check if no overflow will occur*/
	if( loc != buffer->tail)
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	429a      	cmp	r2, r3
 8000348:	d007      	beq.n	800035a <buff_store_char+0x3e>
	{
		/*Store character*/
		buffer->buffer[buffer->head] = c;
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800034e:	683a      	ldr	r2, [r7, #0]
 8000350:	79f9      	ldrb	r1, [r7, #7]
 8000352:	54d1      	strb	r1, [r2, r3]

		/*Update head*/
		buffer->head =  loc;
 8000354:	68fa      	ldr	r2, [r7, #12]
 8000356:	683b      	ldr	r3, [r7, #0]
 8000358:	665a      	str	r2, [r3, #100]	; 0x64
	}
}
 800035a:	bf00      	nop
 800035c:	3714      	adds	r7, #20
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	51eb851f 	.word	0x51eb851f

0800036c <buffer_write>:
	return ret;
}


void buffer_write(unsigned char c, portType uart)
{
 800036c:	b480      	push	{r7}
 800036e:	b085      	sub	sp, #20
 8000370:	af00      	add	r7, sp, #0
 8000372:	4603      	mov	r3, r0
 8000374:	460a      	mov	r2, r1
 8000376:	71fb      	strb	r3, [r7, #7]
 8000378:	4613      	mov	r3, r2
 800037a:	71bb      	strb	r3, [r7, #6]

	int loc;

	switch(uart){
 800037c:	79bb      	ldrb	r3, [r7, #6]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d027      	beq.n	80003d2 <buffer_write+0x66>
 8000382:	2b01      	cmp	r3, #1
 8000384:	d14b      	bne.n	800041e <buffer_write+0xb2>

	case SLAVE_DEV_PORT:

		 loc =  (uint32_t)(_tx_buffer1->head + 1)%UART_BUFFER_SIZE;
 8000386:	4b29      	ldr	r3, [pc, #164]	; (800042c <buffer_write+0xc0>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800038c:	1c5a      	adds	r2, r3, #1
 800038e:	4b28      	ldr	r3, [pc, #160]	; (8000430 <buffer_write+0xc4>)
 8000390:	fba3 1302 	umull	r1, r3, r3, r2
 8000394:	095b      	lsrs	r3, r3, #5
 8000396:	2164      	movs	r1, #100	; 0x64
 8000398:	fb01 f303 	mul.w	r3, r1, r3
 800039c:	1ad3      	subs	r3, r2, r3
 800039e:	60fb      	str	r3, [r7, #12]

		while(loc ==  _tx_buffer1->tail){}
 80003a0:	bf00      	nop
 80003a2:	4b22      	ldr	r3, [pc, #136]	; (800042c <buffer_write+0xc0>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d0f9      	beq.n	80003a2 <buffer_write+0x36>
		_tx_buffer1->buffer[_tx_buffer1->head] = c;
 80003ae:	4b1f      	ldr	r3, [pc, #124]	; (800042c <buffer_write+0xc0>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b1e      	ldr	r3, [pc, #120]	; (800042c <buffer_write+0xc0>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80003b8:	79f9      	ldrb	r1, [r7, #7]
 80003ba:	54d1      	strb	r1, [r2, r3]
		_tx_buffer1->head = loc;
 80003bc:	4b1b      	ldr	r3, [pc, #108]	; (800042c <buffer_write+0xc0>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	68fa      	ldr	r2, [r7, #12]
 80003c2:	665a      	str	r2, [r3, #100]	; 0x64

		/*Initial TX interrupt*/
		USART1->CR1 |=CR1_TXEIE;
 80003c4:	4b1b      	ldr	r3, [pc, #108]	; (8000434 <buffer_write+0xc8>)
 80003c6:	68db      	ldr	r3, [r3, #12]
 80003c8:	4a1a      	ldr	r2, [pc, #104]	; (8000434 <buffer_write+0xc8>)
 80003ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003ce:	60d3      	str	r3, [r2, #12]
	break;
 80003d0:	e026      	b.n	8000420 <buffer_write+0xb4>

    case DEBUG_PORT:

		 loc =  (uint32_t)(_tx_buffer2->head + 1)%UART_BUFFER_SIZE;
 80003d2:	4b19      	ldr	r3, [pc, #100]	; (8000438 <buffer_write+0xcc>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80003d8:	1c5a      	adds	r2, r3, #1
 80003da:	4b15      	ldr	r3, [pc, #84]	; (8000430 <buffer_write+0xc4>)
 80003dc:	fba3 1302 	umull	r1, r3, r3, r2
 80003e0:	095b      	lsrs	r3, r3, #5
 80003e2:	2164      	movs	r1, #100	; 0x64
 80003e4:	fb01 f303 	mul.w	r3, r1, r3
 80003e8:	1ad3      	subs	r3, r2, r3
 80003ea:	60fb      	str	r3, [r7, #12]

		while(loc ==  _tx_buffer2->tail){}
 80003ec:	bf00      	nop
 80003ee:	4b12      	ldr	r3, [pc, #72]	; (8000438 <buffer_write+0xcc>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	429a      	cmp	r2, r3
 80003f8:	d0f9      	beq.n	80003ee <buffer_write+0x82>
		_tx_buffer2->buffer[_tx_buffer2->head] = c;
 80003fa:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <buffer_write+0xcc>)
 80003fc:	681a      	ldr	r2, [r3, #0]
 80003fe:	4b0e      	ldr	r3, [pc, #56]	; (8000438 <buffer_write+0xcc>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000404:	79f9      	ldrb	r1, [r7, #7]
 8000406:	54d1      	strb	r1, [r2, r3]
		_tx_buffer2->head = loc;
 8000408:	4b0b      	ldr	r3, [pc, #44]	; (8000438 <buffer_write+0xcc>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	68fa      	ldr	r2, [r7, #12]
 800040e:	665a      	str	r2, [r3, #100]	; 0x64

		/*Initial TX interrupt*/
		USART2->CR1 |=CR1_TXEIE;
 8000410:	4b0a      	ldr	r3, [pc, #40]	; (800043c <buffer_write+0xd0>)
 8000412:	68db      	ldr	r3, [r3, #12]
 8000414:	4a09      	ldr	r2, [pc, #36]	; (800043c <buffer_write+0xd0>)
 8000416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800041a:	60d3      	str	r3, [r2, #12]

	break;
 800041c:	e000      	b.n	8000420 <buffer_write+0xb4>

    default:
    	break;
 800041e:	bf00      	nop
	}
}
 8000420:	bf00      	nop
 8000422:	3714      	adds	r7, #20
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr
 800042c:	200001d0 	.word	0x200001d0
 8000430:	51eb851f 	.word	0x51eb851f
 8000434:	40011000 	.word	0x40011000
 8000438:	200001d8 	.word	0x200001d8
 800043c:	40004400 	.word	0x40004400

08000440 <buffer_send_string>:
	}
}

/*Function to send a string to the buffer*/
void buffer_send_string(const char *s,portType uart)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
 8000448:	460b      	mov	r3, r1
 800044a:	70fb      	strb	r3, [r7, #3]
	while( *s != '\0')
 800044c:	e008      	b.n	8000460 <buffer_send_string+0x20>
	{
		buffer_write(*s++,uart);
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	1c5a      	adds	r2, r3, #1
 8000452:	607a      	str	r2, [r7, #4]
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	78fa      	ldrb	r2, [r7, #3]
 8000458:	4611      	mov	r1, r2
 800045a:	4618      	mov	r0, r3
 800045c:	f7ff ff86 	bl	800036c <buffer_write>
	while( *s != '\0')
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d1f2      	bne.n	800044e <buffer_send_string+0xe>
	}
}
 8000468:	bf00      	nop
 800046a:	bf00      	nop
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
	...

08000474 <slave_dev_uart_callback>:

void slave_dev_uart_callback(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
	/*Check if RXNE is raised and RXNEIE is enabled*/
	if(((USART1->SR & SR_RXNE ) != 0) &&((USART1->CR1 & CR1_RXNEIE) !=0))
 800047a:	4b24      	ldr	r3, [pc, #144]	; (800050c <slave_dev_uart_callback+0x98>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f003 0320 	and.w	r3, r3, #32
 8000482:	2b00      	cmp	r3, #0
 8000484:	d00f      	beq.n	80004a6 <slave_dev_uart_callback+0x32>
 8000486:	4b21      	ldr	r3, [pc, #132]	; (800050c <slave_dev_uart_callback+0x98>)
 8000488:	68db      	ldr	r3, [r3, #12]
 800048a:	f003 0320 	and.w	r3, r3, #32
 800048e:	2b00      	cmp	r3, #0
 8000490:	d009      	beq.n	80004a6 <slave_dev_uart_callback+0x32>
	{
	  unsigned char c =  USART1->DR;
 8000492:	4b1e      	ldr	r3, [pc, #120]	; (800050c <slave_dev_uart_callback+0x98>)
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	71fb      	strb	r3, [r7, #7]
	  buff_store_char(c,_rx_buffer1);
 8000498:	4b1d      	ldr	r3, [pc, #116]	; (8000510 <slave_dev_uart_callback+0x9c>)
 800049a:	681a      	ldr	r2, [r3, #0]
 800049c:	79fb      	ldrb	r3, [r7, #7]
 800049e:	4611      	mov	r1, r2
 80004a0:	4618      	mov	r0, r3
 80004a2:	f7ff ff3b 	bl	800031c <buff_store_char>
	}

	/*Check if TXE is raised and TXEIE is enabled*/
	if(((USART1->SR & SR_TXE ) != 0) &&((USART1->CR1 & CR1_TXEIE) !=0))
 80004a6:	4b19      	ldr	r3, [pc, #100]	; (800050c <slave_dev_uart_callback+0x98>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d027      	beq.n	8000502 <slave_dev_uart_callback+0x8e>
 80004b2:	4b16      	ldr	r3, [pc, #88]	; (800050c <slave_dev_uart_callback+0x98>)
 80004b4:	68db      	ldr	r3, [r3, #12]
 80004b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d021      	beq.n	8000502 <slave_dev_uart_callback+0x8e>
	{
		if(tx_buffer1.head == tx_buffer1.tail)
 80004be:	4b15      	ldr	r3, [pc, #84]	; (8000514 <slave_dev_uart_callback+0xa0>)
 80004c0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80004c2:	4b14      	ldr	r3, [pc, #80]	; (8000514 <slave_dev_uart_callback+0xa0>)
 80004c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80004c6:	429a      	cmp	r2, r3
 80004c8:	d106      	bne.n	80004d8 <slave_dev_uart_callback+0x64>
		{
			USART1->CR1 &= ~CR1_TXEIE;
 80004ca:	4b10      	ldr	r3, [pc, #64]	; (800050c <slave_dev_uart_callback+0x98>)
 80004cc:	68db      	ldr	r3, [r3, #12]
 80004ce:	4a0f      	ldr	r2, [pc, #60]	; (800050c <slave_dev_uart_callback+0x98>)
 80004d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004d4:	60d3      	str	r3, [r2, #12]
			USART1->DR =  c;
		}
	}


}
 80004d6:	e014      	b.n	8000502 <slave_dev_uart_callback+0x8e>
			unsigned char c =  tx_buffer1.buffer[tx_buffer1.tail];
 80004d8:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <slave_dev_uart_callback+0xa0>)
 80004da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80004dc:	4a0d      	ldr	r2, [pc, #52]	; (8000514 <slave_dev_uart_callback+0xa0>)
 80004de:	5cd3      	ldrb	r3, [r2, r3]
 80004e0:	71bb      	strb	r3, [r7, #6]
			tx_buffer1.tail =  (uint32_t)(tx_buffer1.tail +1)%UART_BUFFER_SIZE;
 80004e2:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <slave_dev_uart_callback+0xa0>)
 80004e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80004e6:	1c5a      	adds	r2, r3, #1
 80004e8:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <slave_dev_uart_callback+0xa4>)
 80004ea:	fba3 1302 	umull	r1, r3, r3, r2
 80004ee:	095b      	lsrs	r3, r3, #5
 80004f0:	2164      	movs	r1, #100	; 0x64
 80004f2:	fb01 f303 	mul.w	r3, r1, r3
 80004f6:	1ad3      	subs	r3, r2, r3
 80004f8:	4a06      	ldr	r2, [pc, #24]	; (8000514 <slave_dev_uart_callback+0xa0>)
 80004fa:	6693      	str	r3, [r2, #104]	; 0x68
			USART1->DR =  c;
 80004fc:	4a03      	ldr	r2, [pc, #12]	; (800050c <slave_dev_uart_callback+0x98>)
 80004fe:	79bb      	ldrb	r3, [r7, #6]
 8000500:	6053      	str	r3, [r2, #4]
}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40011000 	.word	0x40011000
 8000510:	200001cc 	.word	0x200001cc
 8000514:	20000088 	.word	0x20000088
 8000518:	51eb851f 	.word	0x51eb851f

0800051c <debug_uart_callback>:


void debug_uart_callback(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
	/*Check if RXNE is raised and RXNEIE is enabled*/
	if(((USART2->SR & SR_RXNE ) != 0) &&((USART2->CR1 & CR1_RXNEIE) !=0))
 8000522:	4b24      	ldr	r3, [pc, #144]	; (80005b4 <debug_uart_callback+0x98>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f003 0320 	and.w	r3, r3, #32
 800052a:	2b00      	cmp	r3, #0
 800052c:	d00f      	beq.n	800054e <debug_uart_callback+0x32>
 800052e:	4b21      	ldr	r3, [pc, #132]	; (80005b4 <debug_uart_callback+0x98>)
 8000530:	68db      	ldr	r3, [r3, #12]
 8000532:	f003 0320 	and.w	r3, r3, #32
 8000536:	2b00      	cmp	r3, #0
 8000538:	d009      	beq.n	800054e <debug_uart_callback+0x32>
	{
	  unsigned char c =  USART2->DR;
 800053a:	4b1e      	ldr	r3, [pc, #120]	; (80005b4 <debug_uart_callback+0x98>)
 800053c:	685b      	ldr	r3, [r3, #4]
 800053e:	71fb      	strb	r3, [r7, #7]
	  buff_store_char(c,_rx_buffer2);
 8000540:	4b1d      	ldr	r3, [pc, #116]	; (80005b8 <debug_uart_callback+0x9c>)
 8000542:	681a      	ldr	r2, [r3, #0]
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	4611      	mov	r1, r2
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff fee7 	bl	800031c <buff_store_char>
	}

	/*Check if TXE is raised and TXEIE is enabled*/
	if(((USART2->SR & SR_TXE ) != 0) &&((USART2->CR1 & CR1_TXEIE) !=0))
 800054e:	4b19      	ldr	r3, [pc, #100]	; (80005b4 <debug_uart_callback+0x98>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000556:	2b00      	cmp	r3, #0
 8000558:	d027      	beq.n	80005aa <debug_uart_callback+0x8e>
 800055a:	4b16      	ldr	r3, [pc, #88]	; (80005b4 <debug_uart_callback+0x98>)
 800055c:	68db      	ldr	r3, [r3, #12]
 800055e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000562:	2b00      	cmp	r3, #0
 8000564:	d021      	beq.n	80005aa <debug_uart_callback+0x8e>
	{
		if(tx_buffer2.head == tx_buffer2.tail)
 8000566:	4b15      	ldr	r3, [pc, #84]	; (80005bc <debug_uart_callback+0xa0>)
 8000568:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800056a:	4b14      	ldr	r3, [pc, #80]	; (80005bc <debug_uart_callback+0xa0>)
 800056c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800056e:	429a      	cmp	r2, r3
 8000570:	d106      	bne.n	8000580 <debug_uart_callback+0x64>
		{
			USART2->CR1 &= ~CR1_TXEIE;
 8000572:	4b10      	ldr	r3, [pc, #64]	; (80005b4 <debug_uart_callback+0x98>)
 8000574:	68db      	ldr	r3, [r3, #12]
 8000576:	4a0f      	ldr	r2, [pc, #60]	; (80005b4 <debug_uart_callback+0x98>)
 8000578:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800057c:	60d3      	str	r3, [r2, #12]
			USART2->DR =  c;
		}
	}


}
 800057e:	e014      	b.n	80005aa <debug_uart_callback+0x8e>
			unsigned char c =  tx_buffer2.buffer[tx_buffer2.tail];
 8000580:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <debug_uart_callback+0xa0>)
 8000582:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000584:	4a0d      	ldr	r2, [pc, #52]	; (80005bc <debug_uart_callback+0xa0>)
 8000586:	5cd3      	ldrb	r3, [r2, r3]
 8000588:	71bb      	strb	r3, [r7, #6]
			tx_buffer2.tail =  (uint32_t)(tx_buffer2.tail +1)%UART_BUFFER_SIZE;
 800058a:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <debug_uart_callback+0xa0>)
 800058c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800058e:	1c5a      	adds	r2, r3, #1
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <debug_uart_callback+0xa4>)
 8000592:	fba3 1302 	umull	r1, r3, r3, r2
 8000596:	095b      	lsrs	r3, r3, #5
 8000598:	2164      	movs	r1, #100	; 0x64
 800059a:	fb01 f303 	mul.w	r3, r1, r3
 800059e:	1ad3      	subs	r3, r2, r3
 80005a0:	4a06      	ldr	r2, [pc, #24]	; (80005bc <debug_uart_callback+0xa0>)
 80005a2:	6693      	str	r3, [r2, #104]	; 0x68
			USART2->DR =  c;
 80005a4:	4a03      	ldr	r2, [pc, #12]	; (80005b4 <debug_uart_callback+0x98>)
 80005a6:	79bb      	ldrb	r3, [r7, #6]
 80005a8:	6053      	str	r3, [r2, #4]
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40004400 	.word	0x40004400
 80005b8:	200001d4 	.word	0x200001d4
 80005bc:	20000160 	.word	0x20000160
 80005c0:	51eb851f 	.word	0x51eb851f

080005c4 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	debug_uart_callback();
 80005c8:	f7ff ffa8 	bl	800051c <debug_uart_callback>
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <USART1_IRQHandler>:

void USART1_IRQHandler (void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	slave_dev_uart_callback();
 80005d4:	f7ff ff4e 	bl	8000474 <slave_dev_uart_callback>
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}

080005dc <fpu_enable>:
#include "stm32f4xx.h"



void fpu_enable(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
	/*Enable floating point unit:  Enable CP10 and CP11 full access*/
	SCB->CPACR |=(1<<20);
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <fpu_enable+0x50>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a11      	ldr	r2, [pc, #68]	; (800062c <fpu_enable+0x50>)
 80005e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<<21);
 80005f0:	4b0e      	ldr	r3, [pc, #56]	; (800062c <fpu_enable+0x50>)
 80005f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005f6:	4a0d      	ldr	r2, [pc, #52]	; (800062c <fpu_enable+0x50>)
 80005f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<<22);
 8000600:	4b0a      	ldr	r3, [pc, #40]	; (800062c <fpu_enable+0x50>)
 8000602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000606:	4a09      	ldr	r2, [pc, #36]	; (800062c <fpu_enable+0x50>)
 8000608:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800060c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<<23);
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <fpu_enable+0x50>)
 8000612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000616:	4a05      	ldr	r2, [pc, #20]	; (800062c <fpu_enable+0x50>)
 8000618:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800061c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <main>:
#define  LED_PIN		PIN5

bool btn_state;
uint32_t sensor_value;
int main()
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	/*Enable FPU*/
	fpu_enable();
 8000634:	f7ff ffd2 	bl	80005dc <fpu_enable>

	/*Initialize debug UART*/
	debug_uart_init();
 8000638:	f000 f8a6 	bl	8000788 <debug_uart_init>
	slave_dev_uart_init();
 800063c:	f000 f91c 	bl	8000878 <slave_dev_uart_init>

	/*Initialize timebase*/
	timebase_init();
 8000640:	f000 f85a 	bl	80006f8 <timebase_init>

	/*Initialize LED*/
	led_init();
 8000644:	f7ff fdfa 	bl	800023c <led_init>

	/*Initialize Push button*/
	button_init();
 8000648:	f7ff fe16 	bl	8000278 <button_init>

	/*Initialize ADC*/
	pa1_adc_init();
 800064c:	f7ff fdc4 	bl	80001d8 <pa1_adc_init>


	circular_buffer_init();
 8000650:	f7ff fe30 	bl	80002b4 <circular_buffer_init>
	while(1)
	{

		//printf("Slave Dev UART...\n\r");

		buffer_send_string("Hello DEBUG\n\r",DEBUG_PORT );
 8000654:	2100      	movs	r1, #0
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <main+0x3c>)
 8000658:	f7ff fef2 	bl	8000440 <buffer_send_string>
		buffer_send_string("Hello SLAVE DEV\n\r",SLAVE_DEV_PORT );
 800065c:	2101      	movs	r1, #1
 800065e:	4804      	ldr	r0, [pc, #16]	; (8000670 <main+0x40>)
 8000660:	f7ff feee 	bl	8000440 <buffer_send_string>

		delay(1);
 8000664:	2001      	movs	r0, #1
 8000666:	f000 f805 	bl	8000674 <delay>
		buffer_send_string("Hello DEBUG\n\r",DEBUG_PORT );
 800066a:	e7f3      	b.n	8000654 <main+0x24>
 800066c:	08000a74 	.word	0x08000a74
 8000670:	08000a84 	.word	0x08000a84

08000674 <delay>:
volatile uint32_t g_curr_tick_p;


/*Delay in seconds*/
void delay(uint32_t delay)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	uint32_t tickstart =  get_tick();
 800067c:	f000 f818 	bl	80006b0 <get_tick>
 8000680:	60b8      	str	r0, [r7, #8]
	uint32_t wait =  delay;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	60fb      	str	r3, [r7, #12]

	if(wait < MAX_DELAY)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800068c:	d002      	beq.n	8000694 <delay+0x20>
	{
		wait += (uint32_t)TICK_FREQ;
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	3301      	adds	r3, #1
 8000692:	60fb      	str	r3, [r7, #12]
	}

    while((get_tick() - tickstart) < wait){}
 8000694:	bf00      	nop
 8000696:	f000 f80b 	bl	80006b0 <get_tick>
 800069a:	4602      	mov	r2, r0
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	1ad3      	subs	r3, r2, r3
 80006a0:	68fa      	ldr	r2, [r7, #12]
 80006a2:	429a      	cmp	r2, r3
 80006a4:	d8f7      	bhi.n	8000696 <delay+0x22>

}
 80006a6:	bf00      	nop
 80006a8:	bf00      	nop
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <get_tick>:

uint32_t get_tick(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b4:	b672      	cpsid	i
}
 80006b6:	bf00      	nop
	__disable_irq();
	g_curr_tick_p = g_curr_tick;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <get_tick+0x24>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a06      	ldr	r2, [pc, #24]	; (80006d8 <get_tick+0x28>)
 80006be:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80006c0:	b662      	cpsie	i
}
 80006c2:	bf00      	nop
	__enable_irq();

	return g_curr_tick_p;
 80006c4:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <get_tick+0x28>)
 80006c6:	681b      	ldr	r3, [r3, #0]

}
 80006c8:	4618      	mov	r0, r3
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	200001dc 	.word	0x200001dc
 80006d8:	200001e0 	.word	0x200001e0

080006dc <tick_increment>:
static void tick_increment(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
	g_curr_tick += TICK_FREQ;
 80006e0:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <tick_increment+0x18>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	3301      	adds	r3, #1
 80006e6:	4a03      	ldr	r2, [pc, #12]	; (80006f4 <tick_increment+0x18>)
 80006e8:	6013      	str	r3, [r2, #0]
}
 80006ea:	bf00      	nop
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	200001dc 	.word	0x200001dc

080006f8 <timebase_init>:
void timebase_init(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80006fc:	b672      	cpsid	i
}
 80006fe:	bf00      	nop

	/*Disable global interrupts*/
	__disable_irq();

    /*Load the timer with number of clock cycles per second*/
	SysTick->LOAD =  ONE_SEC_LOAD - 1;
 8000700:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <timebase_init+0x40>)
 8000702:	4a0e      	ldr	r2, [pc, #56]	; (800073c <timebase_init+0x44>)
 8000704:	605a      	str	r2, [r3, #4]

    /*Clear systick current value register*/
	SysTick->VAL = 0;
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <timebase_init+0x40>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]

    /*Select internal clock source*/
	SysTick->CTRL = CTRL_CLCKSRC;
 800070c:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <timebase_init+0x40>)
 800070e:	2204      	movs	r2, #4
 8000710:	601a      	str	r2, [r3, #0]

    /*Enable interrupt*/
	SysTick->CTRL |= CTRL_TICKINT;
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <timebase_init+0x40>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a08      	ldr	r2, [pc, #32]	; (8000738 <timebase_init+0x40>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	6013      	str	r3, [r2, #0]

	/*Enable systick*/
	SysTick->CTRL |=CTRL_ENABLE;
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <timebase_init+0x40>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a05      	ldr	r2, [pc, #20]	; (8000738 <timebase_init+0x40>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800072a:	b662      	cpsie	i
}
 800072c:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	e000e010 	.word	0xe000e010
 800073c:	00f423ff 	.word	0x00f423ff

08000740 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	tick_increment();
 8000744:	f7ff ffca 	bl	80006dc <tick_increment>
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075a:	2b00      	cmp	r3, #0
 800075c:	db0b      	blt.n	8000776 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	f003 021f 	and.w	r2, r3, #31
 8000764:	4907      	ldr	r1, [pc, #28]	; (8000784 <__NVIC_EnableIRQ+0x38>)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	095b      	lsrs	r3, r3, #5
 800076c:	2001      	movs	r0, #1
 800076e:	fa00 f202 	lsl.w	r2, r0, r2
 8000772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	e000e100 	.word	0xe000e100

08000788 <debug_uart_init>:
	uart_write(ch);
	return ch;
}

void debug_uart_init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 800078c:	4b36      	ldr	r3, [pc, #216]	; (8000868 <debug_uart_init+0xe0>)
 800078e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000790:	4a35      	ldr	r2, [pc, #212]	; (8000868 <debug_uart_init+0xe0>)
 8000792:	f043 0301 	orr.w	r3, r3, #1
 8000796:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set the mode of PA2 to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 8000798:	4b34      	ldr	r3, [pc, #208]	; (800086c <debug_uart_init+0xe4>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a33      	ldr	r2, [pc, #204]	; (800086c <debug_uart_init+0xe4>)
 800079e:	f023 0310 	bic.w	r3, r3, #16
 80007a2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 80007a4:	4b31      	ldr	r3, [pc, #196]	; (800086c <debug_uart_init+0xe4>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a30      	ldr	r2, [pc, #192]	; (800086c <debug_uart_init+0xe4>)
 80007aa:	f043 0320 	orr.w	r3, r3, #32
 80007ae:	6013      	str	r3, [r2, #0]

	/*Set the mode of PA3 to alternate function mode*/
	GPIOA->MODER &=~(1U<<6);
 80007b0:	4b2e      	ldr	r3, [pc, #184]	; (800086c <debug_uart_init+0xe4>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a2d      	ldr	r2, [pc, #180]	; (800086c <debug_uart_init+0xe4>)
 80007b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007ba:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<7);
 80007bc:	4b2b      	ldr	r3, [pc, #172]	; (800086c <debug_uart_init+0xe4>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a2a      	ldr	r2, [pc, #168]	; (800086c <debug_uart_init+0xe4>)
 80007c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c6:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF7(UART2_TX)*/
	GPIOA->AFR[0] |=(1U<<8);
 80007c8:	4b28      	ldr	r3, [pc, #160]	; (800086c <debug_uart_init+0xe4>)
 80007ca:	6a1b      	ldr	r3, [r3, #32]
 80007cc:	4a27      	ldr	r2, [pc, #156]	; (800086c <debug_uart_init+0xe4>)
 80007ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007d2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 80007d4:	4b25      	ldr	r3, [pc, #148]	; (800086c <debug_uart_init+0xe4>)
 80007d6:	6a1b      	ldr	r3, [r3, #32]
 80007d8:	4a24      	ldr	r2, [pc, #144]	; (800086c <debug_uart_init+0xe4>)
 80007da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007de:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 80007e0:	4b22      	ldr	r3, [pc, #136]	; (800086c <debug_uart_init+0xe4>)
 80007e2:	6a1b      	ldr	r3, [r3, #32]
 80007e4:	4a21      	ldr	r2, [pc, #132]	; (800086c <debug_uart_init+0xe4>)
 80007e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007ea:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 80007ec:	4b1f      	ldr	r3, [pc, #124]	; (800086c <debug_uart_init+0xe4>)
 80007ee:	6a1b      	ldr	r3, [r3, #32]
 80007f0:	4a1e      	ldr	r2, [pc, #120]	; (800086c <debug_uart_init+0xe4>)
 80007f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80007f6:	6213      	str	r3, [r2, #32]


	/*Set alternate function type to AF7(UART2_RX)*/
	GPIOA->AFR[0] |=(1U<<12);
 80007f8:	4b1c      	ldr	r3, [pc, #112]	; (800086c <debug_uart_init+0xe4>)
 80007fa:	6a1b      	ldr	r3, [r3, #32]
 80007fc:	4a1b      	ldr	r2, [pc, #108]	; (800086c <debug_uart_init+0xe4>)
 80007fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000802:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<13);
 8000804:	4b19      	ldr	r3, [pc, #100]	; (800086c <debug_uart_init+0xe4>)
 8000806:	6a1b      	ldr	r3, [r3, #32]
 8000808:	4a18      	ldr	r2, [pc, #96]	; (800086c <debug_uart_init+0xe4>)
 800080a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800080e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<14);
 8000810:	4b16      	ldr	r3, [pc, #88]	; (800086c <debug_uart_init+0xe4>)
 8000812:	6a1b      	ldr	r3, [r3, #32]
 8000814:	4a15      	ldr	r2, [pc, #84]	; (800086c <debug_uart_init+0xe4>)
 8000816:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800081a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<15);
 800081c:	4b13      	ldr	r3, [pc, #76]	; (800086c <debug_uart_init+0xe4>)
 800081e:	6a1b      	ldr	r3, [r3, #32]
 8000820:	4a12      	ldr	r2, [pc, #72]	; (800086c <debug_uart_init+0xe4>)
 8000822:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000826:	6213      	str	r3, [r2, #32]

	/*Enable clock access to UART2*/
     RCC->APB1ENR |=	UART2EN;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <debug_uart_init+0xe0>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	4a0e      	ldr	r2, [pc, #56]	; (8000868 <debug_uart_init+0xe0>)
 800082e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000832:	6413      	str	r3, [r2, #64]	; 0x40


 	/*Disable UART Module*/
      USART2->CR1 &= ~CR1_UE;
 8000834:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <debug_uart_init+0xe8>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	4a0d      	ldr	r2, [pc, #52]	; (8000870 <debug_uart_init+0xe8>)
 800083a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800083e:	60d3      	str	r3, [r2, #12]

	/*Configure uart baudrate*/
     uart_set_baudrate(APB1_CLK,DBG_UART_BAUDRATE);
 8000840:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000844:	480b      	ldr	r0, [pc, #44]	; (8000874 <debug_uart_init+0xec>)
 8000846:	f000 f8a7 	bl	8000998 <uart_set_baudrate>

	/*Configure transfer direction*/
     USART2->CR1 = CR1_TE | CR1_RE;
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <debug_uart_init+0xe8>)
 800084c:	220c      	movs	r2, #12
 800084e:	60da      	str	r2, [r3, #12]

     //NOTE:  Enable Tranmit Interrupt and Receive interrupt
     //In a separate function

     /*Enable interrupt in NVIC*/
    NVIC_EnableIRQ(USART2_IRQn);
 8000850:	2026      	movs	r0, #38	; 0x26
 8000852:	f7ff ff7b 	bl	800074c <__NVIC_EnableIRQ>

	/*Enable UART Module*/
     USART2->CR1 |= CR1_UE;
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <debug_uart_init+0xe8>)
 8000858:	68db      	ldr	r3, [r3, #12]
 800085a:	4a05      	ldr	r2, [pc, #20]	; (8000870 <debug_uart_init+0xe8>)
 800085c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000860:	60d3      	str	r3, [r2, #12]
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800
 800086c:	40020000 	.word	0x40020000
 8000870:	40004400 	.word	0x40004400
 8000874:	00f42400 	.word	0x00f42400

08000878 <slave_dev_uart_init>:
 *  PA9----------------------->RX
 *  PA10---------------------->TX
 * */

void slave_dev_uart_init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 800087c:	4b38      	ldr	r3, [pc, #224]	; (8000960 <slave_dev_uart_init+0xe8>)
 800087e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000880:	4a37      	ldr	r2, [pc, #220]	; (8000960 <slave_dev_uart_init+0xe8>)
 8000882:	f043 0301 	orr.w	r3, r3, #1
 8000886:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set the mode of PA9 to alternate function mode*/
	GPIOA->MODER &=~(1U<<18);
 8000888:	4b36      	ldr	r3, [pc, #216]	; (8000964 <slave_dev_uart_init+0xec>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a35      	ldr	r2, [pc, #212]	; (8000964 <slave_dev_uart_init+0xec>)
 800088e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000892:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<19);
 8000894:	4b33      	ldr	r3, [pc, #204]	; (8000964 <slave_dev_uart_init+0xec>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a32      	ldr	r2, [pc, #200]	; (8000964 <slave_dev_uart_init+0xec>)
 800089a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800089e:	6013      	str	r3, [r2, #0]

	/*Set the mode of PA10 to alternate function mode*/
	GPIOA->MODER &=~(1U<<20);
 80008a0:	4b30      	ldr	r3, [pc, #192]	; (8000964 <slave_dev_uart_init+0xec>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a2f      	ldr	r2, [pc, #188]	; (8000964 <slave_dev_uart_init+0xec>)
 80008a6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80008aa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<21);
 80008ac:	4b2d      	ldr	r3, [pc, #180]	; (8000964 <slave_dev_uart_init+0xec>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a2c      	ldr	r2, [pc, #176]	; (8000964 <slave_dev_uart_init+0xec>)
 80008b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008b6:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF7(UART2_TX)*/
	GPIOA->AFR[1] |=(1U<<4);
 80008b8:	4b2a      	ldr	r3, [pc, #168]	; (8000964 <slave_dev_uart_init+0xec>)
 80008ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008bc:	4a29      	ldr	r2, [pc, #164]	; (8000964 <slave_dev_uart_init+0xec>)
 80008be:	f043 0310 	orr.w	r3, r3, #16
 80008c2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=(1U<<5);
 80008c4:	4b27      	ldr	r3, [pc, #156]	; (8000964 <slave_dev_uart_init+0xec>)
 80008c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008c8:	4a26      	ldr	r2, [pc, #152]	; (8000964 <slave_dev_uart_init+0xec>)
 80008ca:	f043 0320 	orr.w	r3, r3, #32
 80008ce:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=(1U<<6);
 80008d0:	4b24      	ldr	r3, [pc, #144]	; (8000964 <slave_dev_uart_init+0xec>)
 80008d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008d4:	4a23      	ldr	r2, [pc, #140]	; (8000964 <slave_dev_uart_init+0xec>)
 80008d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008da:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &=~(1U<<7);
 80008dc:	4b21      	ldr	r3, [pc, #132]	; (8000964 <slave_dev_uart_init+0xec>)
 80008de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008e0:	4a20      	ldr	r2, [pc, #128]	; (8000964 <slave_dev_uart_init+0xec>)
 80008e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80008e6:	6253      	str	r3, [r2, #36]	; 0x24


	/*Set alternate function type to AF7(UART2_RX)*/
	GPIOA->AFR[1] |=(1U<<8);
 80008e8:	4b1e      	ldr	r3, [pc, #120]	; (8000964 <slave_dev_uart_init+0xec>)
 80008ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ec:	4a1d      	ldr	r2, [pc, #116]	; (8000964 <slave_dev_uart_init+0xec>)
 80008ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008f2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=(1U<<9);
 80008f4:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <slave_dev_uart_init+0xec>)
 80008f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008f8:	4a1a      	ldr	r2, [pc, #104]	; (8000964 <slave_dev_uart_init+0xec>)
 80008fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008fe:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=(1U<<10);
 8000900:	4b18      	ldr	r3, [pc, #96]	; (8000964 <slave_dev_uart_init+0xec>)
 8000902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000904:	4a17      	ldr	r2, [pc, #92]	; (8000964 <slave_dev_uart_init+0xec>)
 8000906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800090a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &=~(1U<<11);
 800090c:	4b15      	ldr	r3, [pc, #84]	; (8000964 <slave_dev_uart_init+0xec>)
 800090e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000910:	4a14      	ldr	r2, [pc, #80]	; (8000964 <slave_dev_uart_init+0xec>)
 8000912:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000916:	6253      	str	r3, [r2, #36]	; 0x24

	/*Enable clock access to UART1*/
     RCC->APB2ENR |=	UART1EN;
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <slave_dev_uart_init+0xe8>)
 800091a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091c:	4a10      	ldr	r2, [pc, #64]	; (8000960 <slave_dev_uart_init+0xe8>)
 800091e:	f043 0310 	orr.w	r3, r3, #16
 8000922:	6453      	str	r3, [r2, #68]	; 0x44


 	/*Disable UART Module*/
     USART1->CR1 &= ~CR1_UE;
 8000924:	4b10      	ldr	r3, [pc, #64]	; (8000968 <slave_dev_uart_init+0xf0>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	4a0f      	ldr	r2, [pc, #60]	; (8000968 <slave_dev_uart_init+0xf0>)
 800092a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800092e:	60d3      	str	r3, [r2, #12]

	/*Configure uart baudrate*/
     USART1->BRR = compute_uart_bd(APB2_CLK,DBG_UART_BAUDRATE);
 8000930:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000934:	480d      	ldr	r0, [pc, #52]	; (800096c <slave_dev_uart_init+0xf4>)
 8000936:	f000 f81b 	bl	8000970 <compute_uart_bd>
 800093a:	4603      	mov	r3, r0
 800093c:	461a      	mov	r2, r3
 800093e:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <slave_dev_uart_init+0xf0>)
 8000940:	609a      	str	r2, [r3, #8]

	/*Configure transfer direction*/
     USART1->CR1 = CR1_TE | CR1_RE;
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <slave_dev_uart_init+0xf0>)
 8000944:	220c      	movs	r2, #12
 8000946:	60da      	str	r2, [r3, #12]

     //NOTE:  Enable Tranmit Interrupt and Receive interrupt
     //In a separate function

     /*Enable interrupt in NVIC*/
    NVIC_EnableIRQ(USART1_IRQn);
 8000948:	2025      	movs	r0, #37	; 0x25
 800094a:	f7ff feff 	bl	800074c <__NVIC_EnableIRQ>

	/*Enable UART Module*/
     USART1->CR1 |= CR1_UE;
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <slave_dev_uart_init+0xf0>)
 8000950:	68db      	ldr	r3, [r3, #12]
 8000952:	4a05      	ldr	r2, [pc, #20]	; (8000968 <slave_dev_uart_init+0xf0>)
 8000954:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000958:	60d3      	str	r3, [r2, #12]
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800
 8000964:	40020000 	.word	0x40020000
 8000968:	40011000 	.word	0x40011000
 800096c:	00f42400 	.word	0x00f42400

08000970 <compute_uart_bd>:

	/*Write to transmit data register*/
	USART1->DR =(ch & 0xFF);
}
static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
	return((periph_clk + (baudrate/2U))/baudrate);
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	085a      	lsrs	r2, r3, #1
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	441a      	add	r2, r3
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	fbb2 f3f3 	udiv	r3, r2, r3
 8000988:	b29b      	uxth	r3, r3
}
 800098a:	4618      	mov	r0, r3
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
	...

08000998 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 80009a2:	6839      	ldr	r1, [r7, #0]
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff ffe3 	bl	8000970 <compute_uart_bd>
 80009aa:	4603      	mov	r3, r0
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b03      	ldr	r3, [pc, #12]	; (80009bc <uart_set_baudrate+0x24>)
 80009b0:	609a      	str	r2, [r3, #8]
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40004400 	.word	0x40004400

080009c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009c0:	480d      	ldr	r0, [pc, #52]	; (80009f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009c2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009c4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c8:	480c      	ldr	r0, [pc, #48]	; (80009fc <LoopForever+0x6>)
  ldr r1, =_edata
 80009ca:	490d      	ldr	r1, [pc, #52]	; (8000a00 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009cc:	4a0d      	ldr	r2, [pc, #52]	; (8000a04 <LoopForever+0xe>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d0:	e002      	b.n	80009d8 <LoopCopyDataInit>

080009d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d6:	3304      	adds	r3, #4

080009d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009dc:	d3f9      	bcc.n	80009d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009de:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009e0:	4c0a      	ldr	r4, [pc, #40]	; (8000a0c <LoopForever+0x16>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e4:	e001      	b.n	80009ea <LoopFillZerobss>

080009e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e8:	3204      	adds	r2, #4

080009ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ec:	d3fb      	bcc.n	80009e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009ee:	f000 f811 	bl	8000a14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009f2:	f7ff fe1d 	bl	8000630 <main>

080009f6 <LoopForever>:

LoopForever:
    b LoopForever
 80009f6:	e7fe      	b.n	80009f6 <LoopForever>
  ldr   r0, =_estack
 80009f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a00:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000a04:	08000aa0 	.word	0x08000aa0
  ldr r2, =_sbss
 8000a08:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000a0c:	200001e4 	.word	0x200001e4

08000a10 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a10:	e7fe      	b.n	8000a10 <ADC_IRQHandler>
	...

08000a14 <__libc_init_array>:
 8000a14:	b570      	push	{r4, r5, r6, lr}
 8000a16:	4d0d      	ldr	r5, [pc, #52]	; (8000a4c <__libc_init_array+0x38>)
 8000a18:	4c0d      	ldr	r4, [pc, #52]	; (8000a50 <__libc_init_array+0x3c>)
 8000a1a:	1b64      	subs	r4, r4, r5
 8000a1c:	10a4      	asrs	r4, r4, #2
 8000a1e:	2600      	movs	r6, #0
 8000a20:	42a6      	cmp	r6, r4
 8000a22:	d109      	bne.n	8000a38 <__libc_init_array+0x24>
 8000a24:	4d0b      	ldr	r5, [pc, #44]	; (8000a54 <__libc_init_array+0x40>)
 8000a26:	4c0c      	ldr	r4, [pc, #48]	; (8000a58 <__libc_init_array+0x44>)
 8000a28:	f000 f818 	bl	8000a5c <_init>
 8000a2c:	1b64      	subs	r4, r4, r5
 8000a2e:	10a4      	asrs	r4, r4, #2
 8000a30:	2600      	movs	r6, #0
 8000a32:	42a6      	cmp	r6, r4
 8000a34:	d105      	bne.n	8000a42 <__libc_init_array+0x2e>
 8000a36:	bd70      	pop	{r4, r5, r6, pc}
 8000a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a3c:	4798      	blx	r3
 8000a3e:	3601      	adds	r6, #1
 8000a40:	e7ee      	b.n	8000a20 <__libc_init_array+0xc>
 8000a42:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a46:	4798      	blx	r3
 8000a48:	3601      	adds	r6, #1
 8000a4a:	e7f2      	b.n	8000a32 <__libc_init_array+0x1e>
 8000a4c:	08000a98 	.word	0x08000a98
 8000a50:	08000a98 	.word	0x08000a98
 8000a54:	08000a98 	.word	0x08000a98
 8000a58:	08000a9c 	.word	0x08000a9c

08000a5c <_init>:
 8000a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a5e:	bf00      	nop
 8000a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a62:	bc08      	pop	{r3}
 8000a64:	469e      	mov	lr, r3
 8000a66:	4770      	bx	lr

08000a68 <_fini>:
 8000a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a6a:	bf00      	nop
 8000a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a6e:	bc08      	pop	{r3}
 8000a70:	469e      	mov	lr, r3
 8000a72:	4770      	bx	lr
