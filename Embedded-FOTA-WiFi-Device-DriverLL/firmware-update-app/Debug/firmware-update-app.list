
firmware-update-app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013e0  080081a0  080081a0  000081a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08009580  08009580  00009580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800964c  0800964c  00010064  2**0
                  CONTENTS
  4 .ARM          00000000  0800964c  0800964c  00010064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800964c  0800964c  00010064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800964c  0800964c  0000964c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009650  08009650  00009650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08009654  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000064  080096b8  00010064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  080096b8  00010094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000124e  00000000  00000000  00010094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000059c  00000000  00000000  000112e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000178  00000000  00000000  00011880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000120  00000000  00000000  000119f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fa28  00000000  00000000  00011b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001ecb  00000000  00000000  00021540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054ee2  00000000  00000000  0002340b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000782ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c4c  00000000  00000000  00078340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081a0 <__do_global_dtors_aux>:
 80081a0:	b510      	push	{r4, lr}
 80081a2:	4c05      	ldr	r4, [pc, #20]	; (80081b8 <__do_global_dtors_aux+0x18>)
 80081a4:	7823      	ldrb	r3, [r4, #0]
 80081a6:	b933      	cbnz	r3, 80081b6 <__do_global_dtors_aux+0x16>
 80081a8:	4b04      	ldr	r3, [pc, #16]	; (80081bc <__do_global_dtors_aux+0x1c>)
 80081aa:	b113      	cbz	r3, 80081b2 <__do_global_dtors_aux+0x12>
 80081ac:	4804      	ldr	r0, [pc, #16]	; (80081c0 <__do_global_dtors_aux+0x20>)
 80081ae:	f3af 8000 	nop.w
 80081b2:	2301      	movs	r3, #1
 80081b4:	7023      	strb	r3, [r4, #0]
 80081b6:	bd10      	pop	{r4, pc}
 80081b8:	20000064 	.word	0x20000064
 80081bc:	00000000 	.word	0x00000000
 80081c0:	08009568 	.word	0x08009568

080081c4 <frame_dummy>:
 80081c4:	b508      	push	{r3, lr}
 80081c6:	4b03      	ldr	r3, [pc, #12]	; (80081d4 <frame_dummy+0x10>)
 80081c8:	b11b      	cbz	r3, 80081d2 <frame_dummy+0xe>
 80081ca:	4903      	ldr	r1, [pc, #12]	; (80081d8 <frame_dummy+0x14>)
 80081cc:	4803      	ldr	r0, [pc, #12]	; (80081dc <frame_dummy+0x18>)
 80081ce:	f3af 8000 	nop.w
 80081d2:	bd08      	pop	{r3, pc}
 80081d4:	00000000 	.word	0x00000000
 80081d8:	20000068 	.word	0x20000068
 80081dc:	08009568 	.word	0x08009568

080081e0 <memchr>:
 80081e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80081e4:	2a10      	cmp	r2, #16
 80081e6:	db2b      	blt.n	8008240 <memchr+0x60>
 80081e8:	f010 0f07 	tst.w	r0, #7
 80081ec:	d008      	beq.n	8008200 <memchr+0x20>
 80081ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80081f2:	3a01      	subs	r2, #1
 80081f4:	428b      	cmp	r3, r1
 80081f6:	d02d      	beq.n	8008254 <memchr+0x74>
 80081f8:	f010 0f07 	tst.w	r0, #7
 80081fc:	b342      	cbz	r2, 8008250 <memchr+0x70>
 80081fe:	d1f6      	bne.n	80081ee <memchr+0xe>
 8008200:	b4f0      	push	{r4, r5, r6, r7}
 8008202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800820a:	f022 0407 	bic.w	r4, r2, #7
 800820e:	f07f 0700 	mvns.w	r7, #0
 8008212:	2300      	movs	r3, #0
 8008214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008218:	3c08      	subs	r4, #8
 800821a:	ea85 0501 	eor.w	r5, r5, r1
 800821e:	ea86 0601 	eor.w	r6, r6, r1
 8008222:	fa85 f547 	uadd8	r5, r5, r7
 8008226:	faa3 f587 	sel	r5, r3, r7
 800822a:	fa86 f647 	uadd8	r6, r6, r7
 800822e:	faa5 f687 	sel	r6, r5, r7
 8008232:	b98e      	cbnz	r6, 8008258 <memchr+0x78>
 8008234:	d1ee      	bne.n	8008214 <memchr+0x34>
 8008236:	bcf0      	pop	{r4, r5, r6, r7}
 8008238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800823c:	f002 0207 	and.w	r2, r2, #7
 8008240:	b132      	cbz	r2, 8008250 <memchr+0x70>
 8008242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008246:	3a01      	subs	r2, #1
 8008248:	ea83 0301 	eor.w	r3, r3, r1
 800824c:	b113      	cbz	r3, 8008254 <memchr+0x74>
 800824e:	d1f8      	bne.n	8008242 <memchr+0x62>
 8008250:	2000      	movs	r0, #0
 8008252:	4770      	bx	lr
 8008254:	3801      	subs	r0, #1
 8008256:	4770      	bx	lr
 8008258:	2d00      	cmp	r5, #0
 800825a:	bf06      	itte	eq
 800825c:	4635      	moveq	r5, r6
 800825e:	3803      	subeq	r0, #3
 8008260:	3807      	subne	r0, #7
 8008262:	f015 0f01 	tst.w	r5, #1
 8008266:	d107      	bne.n	8008278 <memchr+0x98>
 8008268:	3001      	adds	r0, #1
 800826a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800826e:	bf02      	ittt	eq
 8008270:	3001      	addeq	r0, #1
 8008272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8008276:	3001      	addeq	r0, #1
 8008278:	bcf0      	pop	{r4, r5, r6, r7}
 800827a:	3801      	subs	r0, #1
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop

08008280 <fpu_enable>:
#include "stm32f4xx.h"



void fpu_enable(void)
{
 8008280:	b480      	push	{r7}
 8008282:	af00      	add	r7, sp, #0
	/*Enable floating point unit:  Enable CP10 and CP11 full access*/
	SCB->CPACR |=(1<<20);
 8008284:	4b12      	ldr	r3, [pc, #72]	; (80082d0 <fpu_enable+0x50>)
 8008286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800828a:	4a11      	ldr	r2, [pc, #68]	; (80082d0 <fpu_enable+0x50>)
 800828c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<<21);
 8008294:	4b0e      	ldr	r3, [pc, #56]	; (80082d0 <fpu_enable+0x50>)
 8008296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800829a:	4a0d      	ldr	r2, [pc, #52]	; (80082d0 <fpu_enable+0x50>)
 800829c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80082a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<<22);
 80082a4:	4b0a      	ldr	r3, [pc, #40]	; (80082d0 <fpu_enable+0x50>)
 80082a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082aa:	4a09      	ldr	r2, [pc, #36]	; (80082d0 <fpu_enable+0x50>)
 80082ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80082b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<<23);
 80082b4:	4b06      	ldr	r3, [pc, #24]	; (80082d0 <fpu_enable+0x50>)
 80082b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082ba:	4a05      	ldr	r2, [pc, #20]	; (80082d0 <fpu_enable+0x50>)
 80082bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80082c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

}
 80082c4:	bf00      	nop
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop
 80082d0:	e000ed00 	.word	0xe000ed00

080082d4 <main>:


#define VECT_TAB_BASE_ADDRESS			FLASH_BASE   //0x08000000
#define VECT_TAB_OFFSET					0x8000
int main()
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
	/*Enable FPU*/
	fpu_enable();
 80082da:	f7ff ffd1 	bl	8008280 <fpu_enable>

	/*Initialize debug UART*/
	debug_uart_init();
 80082de:	f000 f8cf 	bl	8008480 <debug_uart_init>

	while(1)
	{

		printf("Main Application Update:  EmbeddedExpertIO-------\n\r");
 80082e2:	4807      	ldr	r0, [pc, #28]	; (8008300 <main+0x2c>)
 80082e4:	f000 f9b2 	bl	800864c <iprintf>

		for(int i = 0; i < 9000; i++){}
 80082e8:	2300      	movs	r3, #0
 80082ea:	607b      	str	r3, [r7, #4]
 80082ec:	e002      	b.n	80082f4 <main+0x20>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	3301      	adds	r3, #1
 80082f2:	607b      	str	r3, [r7, #4]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f242 3227 	movw	r2, #8999	; 0x2327
 80082fa:	4293      	cmp	r3, r2
 80082fc:	ddf7      	ble.n	80082ee <main+0x1a>
		printf("Main Application Update:  EmbeddedExpertIO-------\n\r");
 80082fe:	e7f0      	b.n	80082e2 <main+0xe>
 8008300:	08009580 	.word	0x08009580

08008304 <SystemInit>:
	}
}

void SystemInit(void)
{
 8008304:	b480      	push	{r7}
 8008306:	af00      	add	r7, sp, #0
	SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 8008308:	4b03      	ldr	r3, [pc, #12]	; (8008318 <SystemInit+0x14>)
 800830a:	4a04      	ldr	r2, [pc, #16]	; (800831c <SystemInit+0x18>)
 800830c:	609a      	str	r2, [r3, #8]
}
 800830e:	bf00      	nop
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr
 8008318:	e000ed00 	.word	0xe000ed00
 800831c:	08008000 	.word	0x08008000

08008320 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b086      	sub	sp, #24
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800832c:	2300      	movs	r3, #0
 800832e:	617b      	str	r3, [r7, #20]
 8008330:	e00a      	b.n	8008348 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008332:	f3af 8000 	nop.w
 8008336:	4601      	mov	r1, r0
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	1c5a      	adds	r2, r3, #1
 800833c:	60ba      	str	r2, [r7, #8]
 800833e:	b2ca      	uxtb	r2, r1
 8008340:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	3301      	adds	r3, #1
 8008346:	617b      	str	r3, [r7, #20]
 8008348:	697a      	ldr	r2, [r7, #20]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	429a      	cmp	r2, r3
 800834e:	dbf0      	blt.n	8008332 <_read+0x12>
	}

return len;
 8008350:	687b      	ldr	r3, [r7, #4]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3718      	adds	r7, #24
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b086      	sub	sp, #24
 800835e:	af00      	add	r7, sp, #0
 8008360:	60f8      	str	r0, [r7, #12]
 8008362:	60b9      	str	r1, [r7, #8]
 8008364:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008366:	2300      	movs	r3, #0
 8008368:	617b      	str	r3, [r7, #20]
 800836a:	e009      	b.n	8008380 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	1c5a      	adds	r2, r3, #1
 8008370:	60ba      	str	r2, [r7, #8]
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	4618      	mov	r0, r3
 8008376:	f000 f877 	bl	8008468 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	3301      	adds	r3, #1
 800837e:	617b      	str	r3, [r7, #20]
 8008380:	697a      	ldr	r2, [r7, #20]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	429a      	cmp	r2, r3
 8008386:	dbf1      	blt.n	800836c <_write+0x12>
	}
	return len;
 8008388:	687b      	ldr	r3, [r7, #4]
}
 800838a:	4618      	mov	r0, r3
 800838c:	3718      	adds	r7, #24
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <_close>:

int _close(int file)
{
 8008392:	b480      	push	{r7}
 8008394:	b083      	sub	sp, #12
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
	return -1;
 800839a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800839e:	4618      	mov	r0, r3
 80083a0:	370c      	adds	r7, #12
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr

080083aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80083aa:	b480      	push	{r7}
 80083ac:	b083      	sub	sp, #12
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
 80083b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80083ba:	605a      	str	r2, [r3, #4]
	return 0;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	370c      	adds	r7, #12
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr

080083ca <_isatty>:

int _isatty(int file)
{
 80083ca:	b480      	push	{r7}
 80083cc:	b083      	sub	sp, #12
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
	return 1;
 80083d2:	2301      	movs	r3, #1
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	370c      	adds	r7, #12
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b085      	sub	sp, #20
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]
	return 0;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3714      	adds	r7, #20
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
	...

080083fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b086      	sub	sp, #24
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008404:	4a14      	ldr	r2, [pc, #80]	; (8008458 <_sbrk+0x5c>)
 8008406:	4b15      	ldr	r3, [pc, #84]	; (800845c <_sbrk+0x60>)
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008410:	4b13      	ldr	r3, [pc, #76]	; (8008460 <_sbrk+0x64>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d102      	bne.n	800841e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008418:	4b11      	ldr	r3, [pc, #68]	; (8008460 <_sbrk+0x64>)
 800841a:	4a12      	ldr	r2, [pc, #72]	; (8008464 <_sbrk+0x68>)
 800841c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800841e:	4b10      	ldr	r3, [pc, #64]	; (8008460 <_sbrk+0x64>)
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4413      	add	r3, r2
 8008426:	693a      	ldr	r2, [r7, #16]
 8008428:	429a      	cmp	r2, r3
 800842a:	d207      	bcs.n	800843c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800842c:	f000 f8dc 	bl	80085e8 <__errno>
 8008430:	4603      	mov	r3, r0
 8008432:	220c      	movs	r2, #12
 8008434:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008436:	f04f 33ff 	mov.w	r3, #4294967295
 800843a:	e009      	b.n	8008450 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800843c:	4b08      	ldr	r3, [pc, #32]	; (8008460 <_sbrk+0x64>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008442:	4b07      	ldr	r3, [pc, #28]	; (8008460 <_sbrk+0x64>)
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4413      	add	r3, r2
 800844a:	4a05      	ldr	r2, [pc, #20]	; (8008460 <_sbrk+0x64>)
 800844c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800844e:	68fb      	ldr	r3, [r7, #12]
}
 8008450:	4618      	mov	r0, r3
 8008452:	3718      	adds	r7, #24
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	20020000 	.word	0x20020000
 800845c:	00000400 	.word	0x00000400
 8008460:	20000080 	.word	0x20000080
 8008464:	20000098 	.word	0x20000098

08008468 <__io_putchar>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 f84f 	bl	8008514 <uart_write>
	return ch;
 8008476:	687b      	ldr	r3, [r7, #4]
}
 8008478:	4618      	mov	r0, r3
 800847a:	3708      	adds	r7, #8
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <debug_uart_init>:

void debug_uart_init(void)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8008484:	4b1f      	ldr	r3, [pc, #124]	; (8008504 <debug_uart_init+0x84>)
 8008486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008488:	4a1e      	ldr	r2, [pc, #120]	; (8008504 <debug_uart_init+0x84>)
 800848a:	f043 0301 	orr.w	r3, r3, #1
 800848e:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set the mode of PA2 to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 8008490:	4b1d      	ldr	r3, [pc, #116]	; (8008508 <debug_uart_init+0x88>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a1c      	ldr	r2, [pc, #112]	; (8008508 <debug_uart_init+0x88>)
 8008496:	f023 0310 	bic.w	r3, r3, #16
 800849a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 800849c:	4b1a      	ldr	r3, [pc, #104]	; (8008508 <debug_uart_init+0x88>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a19      	ldr	r2, [pc, #100]	; (8008508 <debug_uart_init+0x88>)
 80084a2:	f043 0320 	orr.w	r3, r3, #32
 80084a6:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF7(UART2_TX)*/
	GPIOA->AFR[0] |=(1U<<8);
 80084a8:	4b17      	ldr	r3, [pc, #92]	; (8008508 <debug_uart_init+0x88>)
 80084aa:	6a1b      	ldr	r3, [r3, #32]
 80084ac:	4a16      	ldr	r2, [pc, #88]	; (8008508 <debug_uart_init+0x88>)
 80084ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084b2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 80084b4:	4b14      	ldr	r3, [pc, #80]	; (8008508 <debug_uart_init+0x88>)
 80084b6:	6a1b      	ldr	r3, [r3, #32]
 80084b8:	4a13      	ldr	r2, [pc, #76]	; (8008508 <debug_uart_init+0x88>)
 80084ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80084be:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 80084c0:	4b11      	ldr	r3, [pc, #68]	; (8008508 <debug_uart_init+0x88>)
 80084c2:	6a1b      	ldr	r3, [r3, #32]
 80084c4:	4a10      	ldr	r2, [pc, #64]	; (8008508 <debug_uart_init+0x88>)
 80084c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80084ca:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 80084cc:	4b0e      	ldr	r3, [pc, #56]	; (8008508 <debug_uart_init+0x88>)
 80084ce:	6a1b      	ldr	r3, [r3, #32]
 80084d0:	4a0d      	ldr	r2, [pc, #52]	; (8008508 <debug_uart_init+0x88>)
 80084d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80084d6:	6213      	str	r3, [r2, #32]

	/*Enable clock access to UART2*/
     RCC->APB1ENR |=	UART2EN;
 80084d8:	4b0a      	ldr	r3, [pc, #40]	; (8008504 <debug_uart_init+0x84>)
 80084da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084dc:	4a09      	ldr	r2, [pc, #36]	; (8008504 <debug_uart_init+0x84>)
 80084de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084e2:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure uart baudrate*/
     uart_set_baudrate(APB1_CLK,DBG_UART_BAUDRATE);
 80084e4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80084e8:	4808      	ldr	r0, [pc, #32]	; (800850c <debug_uart_init+0x8c>)
 80084ea:	f000 f83f 	bl	800856c <uart_set_baudrate>

	/*Configure transfer direction*/
     USART2->CR1 = CR1_TE;
 80084ee:	4b08      	ldr	r3, [pc, #32]	; (8008510 <debug_uart_init+0x90>)
 80084f0:	2208      	movs	r2, #8
 80084f2:	60da      	str	r2, [r3, #12]

	/*Enable UART Module*/
     USART2->CR1 |= CR1_UE;
 80084f4:	4b06      	ldr	r3, [pc, #24]	; (8008510 <debug_uart_init+0x90>)
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	4a05      	ldr	r2, [pc, #20]	; (8008510 <debug_uart_init+0x90>)
 80084fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80084fe:	60d3      	str	r3, [r2, #12]
}
 8008500:	bf00      	nop
 8008502:	bd80      	pop	{r7, pc}
 8008504:	40023800 	.word	0x40023800
 8008508:	40020000 	.word	0x40020000
 800850c:	00f42400 	.word	0x00f42400
 8008510:	40004400 	.word	0x40004400

08008514 <uart_write>:



static void uart_write(int ch)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 800851c:	bf00      	nop
 800851e:	4b08      	ldr	r3, [pc, #32]	; (8008540 <uart_write+0x2c>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008526:	2b00      	cmp	r3, #0
 8008528:	d0f9      	beq.n	800851e <uart_write+0xa>

	/*Write to transmit data register*/
	USART2->DR =(ch & 0xFF);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4a04      	ldr	r2, [pc, #16]	; (8008540 <uart_write+0x2c>)
 800852e:	b2db      	uxtb	r3, r3
 8008530:	6053      	str	r3, [r2, #4]
}
 8008532:	bf00      	nop
 8008534:	370c      	adds	r7, #12
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr
 800853e:	bf00      	nop
 8008540:	40004400 	.word	0x40004400

08008544 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
	return((periph_clk + (baudrate/2U))/baudrate);
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	085a      	lsrs	r2, r3, #1
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	441a      	add	r2, r3
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	fbb2 f3f3 	udiv	r3, r2, r3
 800855c:	b29b      	uxth	r3, r3
}
 800855e:	4618      	mov	r0, r3
 8008560:	370c      	adds	r7, #12
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr
	...

0800856c <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 8008576:	6839      	ldr	r1, [r7, #0]
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f7ff ffe3 	bl	8008544 <compute_uart_bd>
 800857e:	4603      	mov	r3, r0
 8008580:	461a      	mov	r2, r3
 8008582:	4b03      	ldr	r3, [pc, #12]	; (8008590 <uart_set_baudrate+0x24>)
 8008584:	609a      	str	r2, [r3, #8]
}
 8008586:	bf00      	nop
 8008588:	3708      	adds	r7, #8
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	40004400 	.word	0x40004400

08008594 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008594:	480d      	ldr	r0, [pc, #52]	; (80085cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008596:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8008598:	f7ff feb4 	bl	8008304 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800859c:	480c      	ldr	r0, [pc, #48]	; (80085d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800859e:	490d      	ldr	r1, [pc, #52]	; (80085d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80085a0:	4a0d      	ldr	r2, [pc, #52]	; (80085d8 <LoopForever+0xe>)
  movs r3, #0
 80085a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80085a4:	e002      	b.n	80085ac <LoopCopyDataInit>

080085a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80085a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80085a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80085aa:	3304      	adds	r3, #4

080085ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80085ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80085ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80085b0:	d3f9      	bcc.n	80085a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80085b2:	4a0a      	ldr	r2, [pc, #40]	; (80085dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80085b4:	4c0a      	ldr	r4, [pc, #40]	; (80085e0 <LoopForever+0x16>)
  movs r3, #0
 80085b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80085b8:	e001      	b.n	80085be <LoopFillZerobss>

080085ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80085ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80085bc:	3204      	adds	r2, #4

080085be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80085be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80085c0:	d3fb      	bcc.n	80085ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80085c2:	f000 f817 	bl	80085f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80085c6:	f7ff fe85 	bl	80082d4 <main>

080085ca <LoopForever>:

LoopForever:
    b LoopForever
 80085ca:	e7fe      	b.n	80085ca <LoopForever>
  ldr   r0, =_estack
 80085cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80085d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80085d4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80085d8:	08009654 	.word	0x08009654
  ldr r2, =_sbss
 80085dc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80085e0:	20000094 	.word	0x20000094

080085e4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80085e4:	e7fe      	b.n	80085e4 <ADC_IRQHandler>
	...

080085e8 <__errno>:
 80085e8:	4b01      	ldr	r3, [pc, #4]	; (80085f0 <__errno+0x8>)
 80085ea:	6818      	ldr	r0, [r3, #0]
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop
 80085f0:	20000000 	.word	0x20000000

080085f4 <__libc_init_array>:
 80085f4:	b570      	push	{r4, r5, r6, lr}
 80085f6:	4d0d      	ldr	r5, [pc, #52]	; (800862c <__libc_init_array+0x38>)
 80085f8:	4c0d      	ldr	r4, [pc, #52]	; (8008630 <__libc_init_array+0x3c>)
 80085fa:	1b64      	subs	r4, r4, r5
 80085fc:	10a4      	asrs	r4, r4, #2
 80085fe:	2600      	movs	r6, #0
 8008600:	42a6      	cmp	r6, r4
 8008602:	d109      	bne.n	8008618 <__libc_init_array+0x24>
 8008604:	4d0b      	ldr	r5, [pc, #44]	; (8008634 <__libc_init_array+0x40>)
 8008606:	4c0c      	ldr	r4, [pc, #48]	; (8008638 <__libc_init_array+0x44>)
 8008608:	f000 ffae 	bl	8009568 <_init>
 800860c:	1b64      	subs	r4, r4, r5
 800860e:	10a4      	asrs	r4, r4, #2
 8008610:	2600      	movs	r6, #0
 8008612:	42a6      	cmp	r6, r4
 8008614:	d105      	bne.n	8008622 <__libc_init_array+0x2e>
 8008616:	bd70      	pop	{r4, r5, r6, pc}
 8008618:	f855 3b04 	ldr.w	r3, [r5], #4
 800861c:	4798      	blx	r3
 800861e:	3601      	adds	r6, #1
 8008620:	e7ee      	b.n	8008600 <__libc_init_array+0xc>
 8008622:	f855 3b04 	ldr.w	r3, [r5], #4
 8008626:	4798      	blx	r3
 8008628:	3601      	adds	r6, #1
 800862a:	e7f2      	b.n	8008612 <__libc_init_array+0x1e>
 800862c:	0800964c 	.word	0x0800964c
 8008630:	0800964c 	.word	0x0800964c
 8008634:	0800964c 	.word	0x0800964c
 8008638:	08009650 	.word	0x08009650

0800863c <memset>:
 800863c:	4402      	add	r2, r0
 800863e:	4603      	mov	r3, r0
 8008640:	4293      	cmp	r3, r2
 8008642:	d100      	bne.n	8008646 <memset+0xa>
 8008644:	4770      	bx	lr
 8008646:	f803 1b01 	strb.w	r1, [r3], #1
 800864a:	e7f9      	b.n	8008640 <memset+0x4>

0800864c <iprintf>:
 800864c:	b40f      	push	{r0, r1, r2, r3}
 800864e:	4b0a      	ldr	r3, [pc, #40]	; (8008678 <iprintf+0x2c>)
 8008650:	b513      	push	{r0, r1, r4, lr}
 8008652:	681c      	ldr	r4, [r3, #0]
 8008654:	b124      	cbz	r4, 8008660 <iprintf+0x14>
 8008656:	69a3      	ldr	r3, [r4, #24]
 8008658:	b913      	cbnz	r3, 8008660 <iprintf+0x14>
 800865a:	4620      	mov	r0, r4
 800865c:	f000 f866 	bl	800872c <__sinit>
 8008660:	ab05      	add	r3, sp, #20
 8008662:	9a04      	ldr	r2, [sp, #16]
 8008664:	68a1      	ldr	r1, [r4, #8]
 8008666:	9301      	str	r3, [sp, #4]
 8008668:	4620      	mov	r0, r4
 800866a:	f000 f9bd 	bl	80089e8 <_vfiprintf_r>
 800866e:	b002      	add	sp, #8
 8008670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008674:	b004      	add	sp, #16
 8008676:	4770      	bx	lr
 8008678:	20000000 	.word	0x20000000

0800867c <std>:
 800867c:	2300      	movs	r3, #0
 800867e:	b510      	push	{r4, lr}
 8008680:	4604      	mov	r4, r0
 8008682:	e9c0 3300 	strd	r3, r3, [r0]
 8008686:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800868a:	6083      	str	r3, [r0, #8]
 800868c:	8181      	strh	r1, [r0, #12]
 800868e:	6643      	str	r3, [r0, #100]	; 0x64
 8008690:	81c2      	strh	r2, [r0, #14]
 8008692:	6183      	str	r3, [r0, #24]
 8008694:	4619      	mov	r1, r3
 8008696:	2208      	movs	r2, #8
 8008698:	305c      	adds	r0, #92	; 0x5c
 800869a:	f7ff ffcf 	bl	800863c <memset>
 800869e:	4b05      	ldr	r3, [pc, #20]	; (80086b4 <std+0x38>)
 80086a0:	6263      	str	r3, [r4, #36]	; 0x24
 80086a2:	4b05      	ldr	r3, [pc, #20]	; (80086b8 <std+0x3c>)
 80086a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80086a6:	4b05      	ldr	r3, [pc, #20]	; (80086bc <std+0x40>)
 80086a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80086aa:	4b05      	ldr	r3, [pc, #20]	; (80086c0 <std+0x44>)
 80086ac:	6224      	str	r4, [r4, #32]
 80086ae:	6323      	str	r3, [r4, #48]	; 0x30
 80086b0:	bd10      	pop	{r4, pc}
 80086b2:	bf00      	nop
 80086b4:	08008f91 	.word	0x08008f91
 80086b8:	08008fb3 	.word	0x08008fb3
 80086bc:	08008feb 	.word	0x08008feb
 80086c0:	0800900f 	.word	0x0800900f

080086c4 <_cleanup_r>:
 80086c4:	4901      	ldr	r1, [pc, #4]	; (80086cc <_cleanup_r+0x8>)
 80086c6:	f000 b8af 	b.w	8008828 <_fwalk_reent>
 80086ca:	bf00      	nop
 80086cc:	080092e9 	.word	0x080092e9

080086d0 <__sfmoreglue>:
 80086d0:	b570      	push	{r4, r5, r6, lr}
 80086d2:	2268      	movs	r2, #104	; 0x68
 80086d4:	1e4d      	subs	r5, r1, #1
 80086d6:	4355      	muls	r5, r2
 80086d8:	460e      	mov	r6, r1
 80086da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80086de:	f000 f8e5 	bl	80088ac <_malloc_r>
 80086e2:	4604      	mov	r4, r0
 80086e4:	b140      	cbz	r0, 80086f8 <__sfmoreglue+0x28>
 80086e6:	2100      	movs	r1, #0
 80086e8:	e9c0 1600 	strd	r1, r6, [r0]
 80086ec:	300c      	adds	r0, #12
 80086ee:	60a0      	str	r0, [r4, #8]
 80086f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80086f4:	f7ff ffa2 	bl	800863c <memset>
 80086f8:	4620      	mov	r0, r4
 80086fa:	bd70      	pop	{r4, r5, r6, pc}

080086fc <__sfp_lock_acquire>:
 80086fc:	4801      	ldr	r0, [pc, #4]	; (8008704 <__sfp_lock_acquire+0x8>)
 80086fe:	f000 b8b3 	b.w	8008868 <__retarget_lock_acquire_recursive>
 8008702:	bf00      	nop
 8008704:	20000085 	.word	0x20000085

08008708 <__sfp_lock_release>:
 8008708:	4801      	ldr	r0, [pc, #4]	; (8008710 <__sfp_lock_release+0x8>)
 800870a:	f000 b8ae 	b.w	800886a <__retarget_lock_release_recursive>
 800870e:	bf00      	nop
 8008710:	20000085 	.word	0x20000085

08008714 <__sinit_lock_acquire>:
 8008714:	4801      	ldr	r0, [pc, #4]	; (800871c <__sinit_lock_acquire+0x8>)
 8008716:	f000 b8a7 	b.w	8008868 <__retarget_lock_acquire_recursive>
 800871a:	bf00      	nop
 800871c:	20000086 	.word	0x20000086

08008720 <__sinit_lock_release>:
 8008720:	4801      	ldr	r0, [pc, #4]	; (8008728 <__sinit_lock_release+0x8>)
 8008722:	f000 b8a2 	b.w	800886a <__retarget_lock_release_recursive>
 8008726:	bf00      	nop
 8008728:	20000086 	.word	0x20000086

0800872c <__sinit>:
 800872c:	b510      	push	{r4, lr}
 800872e:	4604      	mov	r4, r0
 8008730:	f7ff fff0 	bl	8008714 <__sinit_lock_acquire>
 8008734:	69a3      	ldr	r3, [r4, #24]
 8008736:	b11b      	cbz	r3, 8008740 <__sinit+0x14>
 8008738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800873c:	f7ff bff0 	b.w	8008720 <__sinit_lock_release>
 8008740:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008744:	6523      	str	r3, [r4, #80]	; 0x50
 8008746:	4b13      	ldr	r3, [pc, #76]	; (8008794 <__sinit+0x68>)
 8008748:	4a13      	ldr	r2, [pc, #76]	; (8008798 <__sinit+0x6c>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	62a2      	str	r2, [r4, #40]	; 0x28
 800874e:	42a3      	cmp	r3, r4
 8008750:	bf04      	itt	eq
 8008752:	2301      	moveq	r3, #1
 8008754:	61a3      	streq	r3, [r4, #24]
 8008756:	4620      	mov	r0, r4
 8008758:	f000 f820 	bl	800879c <__sfp>
 800875c:	6060      	str	r0, [r4, #4]
 800875e:	4620      	mov	r0, r4
 8008760:	f000 f81c 	bl	800879c <__sfp>
 8008764:	60a0      	str	r0, [r4, #8]
 8008766:	4620      	mov	r0, r4
 8008768:	f000 f818 	bl	800879c <__sfp>
 800876c:	2200      	movs	r2, #0
 800876e:	60e0      	str	r0, [r4, #12]
 8008770:	2104      	movs	r1, #4
 8008772:	6860      	ldr	r0, [r4, #4]
 8008774:	f7ff ff82 	bl	800867c <std>
 8008778:	68a0      	ldr	r0, [r4, #8]
 800877a:	2201      	movs	r2, #1
 800877c:	2109      	movs	r1, #9
 800877e:	f7ff ff7d 	bl	800867c <std>
 8008782:	68e0      	ldr	r0, [r4, #12]
 8008784:	2202      	movs	r2, #2
 8008786:	2112      	movs	r1, #18
 8008788:	f7ff ff78 	bl	800867c <std>
 800878c:	2301      	movs	r3, #1
 800878e:	61a3      	str	r3, [r4, #24]
 8008790:	e7d2      	b.n	8008738 <__sinit+0xc>
 8008792:	bf00      	nop
 8008794:	080095b4 	.word	0x080095b4
 8008798:	080086c5 	.word	0x080086c5

0800879c <__sfp>:
 800879c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800879e:	4607      	mov	r7, r0
 80087a0:	f7ff ffac 	bl	80086fc <__sfp_lock_acquire>
 80087a4:	4b1e      	ldr	r3, [pc, #120]	; (8008820 <__sfp+0x84>)
 80087a6:	681e      	ldr	r6, [r3, #0]
 80087a8:	69b3      	ldr	r3, [r6, #24]
 80087aa:	b913      	cbnz	r3, 80087b2 <__sfp+0x16>
 80087ac:	4630      	mov	r0, r6
 80087ae:	f7ff ffbd 	bl	800872c <__sinit>
 80087b2:	3648      	adds	r6, #72	; 0x48
 80087b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80087b8:	3b01      	subs	r3, #1
 80087ba:	d503      	bpl.n	80087c4 <__sfp+0x28>
 80087bc:	6833      	ldr	r3, [r6, #0]
 80087be:	b30b      	cbz	r3, 8008804 <__sfp+0x68>
 80087c0:	6836      	ldr	r6, [r6, #0]
 80087c2:	e7f7      	b.n	80087b4 <__sfp+0x18>
 80087c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80087c8:	b9d5      	cbnz	r5, 8008800 <__sfp+0x64>
 80087ca:	4b16      	ldr	r3, [pc, #88]	; (8008824 <__sfp+0x88>)
 80087cc:	60e3      	str	r3, [r4, #12]
 80087ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80087d2:	6665      	str	r5, [r4, #100]	; 0x64
 80087d4:	f000 f847 	bl	8008866 <__retarget_lock_init_recursive>
 80087d8:	f7ff ff96 	bl	8008708 <__sfp_lock_release>
 80087dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80087e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80087e4:	6025      	str	r5, [r4, #0]
 80087e6:	61a5      	str	r5, [r4, #24]
 80087e8:	2208      	movs	r2, #8
 80087ea:	4629      	mov	r1, r5
 80087ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80087f0:	f7ff ff24 	bl	800863c <memset>
 80087f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80087f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80087fc:	4620      	mov	r0, r4
 80087fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008800:	3468      	adds	r4, #104	; 0x68
 8008802:	e7d9      	b.n	80087b8 <__sfp+0x1c>
 8008804:	2104      	movs	r1, #4
 8008806:	4638      	mov	r0, r7
 8008808:	f7ff ff62 	bl	80086d0 <__sfmoreglue>
 800880c:	4604      	mov	r4, r0
 800880e:	6030      	str	r0, [r6, #0]
 8008810:	2800      	cmp	r0, #0
 8008812:	d1d5      	bne.n	80087c0 <__sfp+0x24>
 8008814:	f7ff ff78 	bl	8008708 <__sfp_lock_release>
 8008818:	230c      	movs	r3, #12
 800881a:	603b      	str	r3, [r7, #0]
 800881c:	e7ee      	b.n	80087fc <__sfp+0x60>
 800881e:	bf00      	nop
 8008820:	080095b4 	.word	0x080095b4
 8008824:	ffff0001 	.word	0xffff0001

08008828 <_fwalk_reent>:
 8008828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800882c:	4606      	mov	r6, r0
 800882e:	4688      	mov	r8, r1
 8008830:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008834:	2700      	movs	r7, #0
 8008836:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800883a:	f1b9 0901 	subs.w	r9, r9, #1
 800883e:	d505      	bpl.n	800884c <_fwalk_reent+0x24>
 8008840:	6824      	ldr	r4, [r4, #0]
 8008842:	2c00      	cmp	r4, #0
 8008844:	d1f7      	bne.n	8008836 <_fwalk_reent+0xe>
 8008846:	4638      	mov	r0, r7
 8008848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800884c:	89ab      	ldrh	r3, [r5, #12]
 800884e:	2b01      	cmp	r3, #1
 8008850:	d907      	bls.n	8008862 <_fwalk_reent+0x3a>
 8008852:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008856:	3301      	adds	r3, #1
 8008858:	d003      	beq.n	8008862 <_fwalk_reent+0x3a>
 800885a:	4629      	mov	r1, r5
 800885c:	4630      	mov	r0, r6
 800885e:	47c0      	blx	r8
 8008860:	4307      	orrs	r7, r0
 8008862:	3568      	adds	r5, #104	; 0x68
 8008864:	e7e9      	b.n	800883a <_fwalk_reent+0x12>

08008866 <__retarget_lock_init_recursive>:
 8008866:	4770      	bx	lr

08008868 <__retarget_lock_acquire_recursive>:
 8008868:	4770      	bx	lr

0800886a <__retarget_lock_release_recursive>:
 800886a:	4770      	bx	lr

0800886c <sbrk_aligned>:
 800886c:	b570      	push	{r4, r5, r6, lr}
 800886e:	4e0e      	ldr	r6, [pc, #56]	; (80088a8 <sbrk_aligned+0x3c>)
 8008870:	460c      	mov	r4, r1
 8008872:	6831      	ldr	r1, [r6, #0]
 8008874:	4605      	mov	r5, r0
 8008876:	b911      	cbnz	r1, 800887e <sbrk_aligned+0x12>
 8008878:	f000 fb7a 	bl	8008f70 <_sbrk_r>
 800887c:	6030      	str	r0, [r6, #0]
 800887e:	4621      	mov	r1, r4
 8008880:	4628      	mov	r0, r5
 8008882:	f000 fb75 	bl	8008f70 <_sbrk_r>
 8008886:	1c43      	adds	r3, r0, #1
 8008888:	d00a      	beq.n	80088a0 <sbrk_aligned+0x34>
 800888a:	1cc4      	adds	r4, r0, #3
 800888c:	f024 0403 	bic.w	r4, r4, #3
 8008890:	42a0      	cmp	r0, r4
 8008892:	d007      	beq.n	80088a4 <sbrk_aligned+0x38>
 8008894:	1a21      	subs	r1, r4, r0
 8008896:	4628      	mov	r0, r5
 8008898:	f000 fb6a 	bl	8008f70 <_sbrk_r>
 800889c:	3001      	adds	r0, #1
 800889e:	d101      	bne.n	80088a4 <sbrk_aligned+0x38>
 80088a0:	f04f 34ff 	mov.w	r4, #4294967295
 80088a4:	4620      	mov	r0, r4
 80088a6:	bd70      	pop	{r4, r5, r6, pc}
 80088a8:	2000008c 	.word	0x2000008c

080088ac <_malloc_r>:
 80088ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088b0:	1ccd      	adds	r5, r1, #3
 80088b2:	f025 0503 	bic.w	r5, r5, #3
 80088b6:	3508      	adds	r5, #8
 80088b8:	2d0c      	cmp	r5, #12
 80088ba:	bf38      	it	cc
 80088bc:	250c      	movcc	r5, #12
 80088be:	2d00      	cmp	r5, #0
 80088c0:	4607      	mov	r7, r0
 80088c2:	db01      	blt.n	80088c8 <_malloc_r+0x1c>
 80088c4:	42a9      	cmp	r1, r5
 80088c6:	d905      	bls.n	80088d4 <_malloc_r+0x28>
 80088c8:	230c      	movs	r3, #12
 80088ca:	603b      	str	r3, [r7, #0]
 80088cc:	2600      	movs	r6, #0
 80088ce:	4630      	mov	r0, r6
 80088d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088d4:	4e2e      	ldr	r6, [pc, #184]	; (8008990 <_malloc_r+0xe4>)
 80088d6:	f000 fdbb 	bl	8009450 <__malloc_lock>
 80088da:	6833      	ldr	r3, [r6, #0]
 80088dc:	461c      	mov	r4, r3
 80088de:	bb34      	cbnz	r4, 800892e <_malloc_r+0x82>
 80088e0:	4629      	mov	r1, r5
 80088e2:	4638      	mov	r0, r7
 80088e4:	f7ff ffc2 	bl	800886c <sbrk_aligned>
 80088e8:	1c43      	adds	r3, r0, #1
 80088ea:	4604      	mov	r4, r0
 80088ec:	d14d      	bne.n	800898a <_malloc_r+0xde>
 80088ee:	6834      	ldr	r4, [r6, #0]
 80088f0:	4626      	mov	r6, r4
 80088f2:	2e00      	cmp	r6, #0
 80088f4:	d140      	bne.n	8008978 <_malloc_r+0xcc>
 80088f6:	6823      	ldr	r3, [r4, #0]
 80088f8:	4631      	mov	r1, r6
 80088fa:	4638      	mov	r0, r7
 80088fc:	eb04 0803 	add.w	r8, r4, r3
 8008900:	f000 fb36 	bl	8008f70 <_sbrk_r>
 8008904:	4580      	cmp	r8, r0
 8008906:	d13a      	bne.n	800897e <_malloc_r+0xd2>
 8008908:	6821      	ldr	r1, [r4, #0]
 800890a:	3503      	adds	r5, #3
 800890c:	1a6d      	subs	r5, r5, r1
 800890e:	f025 0503 	bic.w	r5, r5, #3
 8008912:	3508      	adds	r5, #8
 8008914:	2d0c      	cmp	r5, #12
 8008916:	bf38      	it	cc
 8008918:	250c      	movcc	r5, #12
 800891a:	4629      	mov	r1, r5
 800891c:	4638      	mov	r0, r7
 800891e:	f7ff ffa5 	bl	800886c <sbrk_aligned>
 8008922:	3001      	adds	r0, #1
 8008924:	d02b      	beq.n	800897e <_malloc_r+0xd2>
 8008926:	6823      	ldr	r3, [r4, #0]
 8008928:	442b      	add	r3, r5
 800892a:	6023      	str	r3, [r4, #0]
 800892c:	e00e      	b.n	800894c <_malloc_r+0xa0>
 800892e:	6822      	ldr	r2, [r4, #0]
 8008930:	1b52      	subs	r2, r2, r5
 8008932:	d41e      	bmi.n	8008972 <_malloc_r+0xc6>
 8008934:	2a0b      	cmp	r2, #11
 8008936:	d916      	bls.n	8008966 <_malloc_r+0xba>
 8008938:	1961      	adds	r1, r4, r5
 800893a:	42a3      	cmp	r3, r4
 800893c:	6025      	str	r5, [r4, #0]
 800893e:	bf18      	it	ne
 8008940:	6059      	strne	r1, [r3, #4]
 8008942:	6863      	ldr	r3, [r4, #4]
 8008944:	bf08      	it	eq
 8008946:	6031      	streq	r1, [r6, #0]
 8008948:	5162      	str	r2, [r4, r5]
 800894a:	604b      	str	r3, [r1, #4]
 800894c:	4638      	mov	r0, r7
 800894e:	f104 060b 	add.w	r6, r4, #11
 8008952:	f000 fd83 	bl	800945c <__malloc_unlock>
 8008956:	f026 0607 	bic.w	r6, r6, #7
 800895a:	1d23      	adds	r3, r4, #4
 800895c:	1af2      	subs	r2, r6, r3
 800895e:	d0b6      	beq.n	80088ce <_malloc_r+0x22>
 8008960:	1b9b      	subs	r3, r3, r6
 8008962:	50a3      	str	r3, [r4, r2]
 8008964:	e7b3      	b.n	80088ce <_malloc_r+0x22>
 8008966:	6862      	ldr	r2, [r4, #4]
 8008968:	42a3      	cmp	r3, r4
 800896a:	bf0c      	ite	eq
 800896c:	6032      	streq	r2, [r6, #0]
 800896e:	605a      	strne	r2, [r3, #4]
 8008970:	e7ec      	b.n	800894c <_malloc_r+0xa0>
 8008972:	4623      	mov	r3, r4
 8008974:	6864      	ldr	r4, [r4, #4]
 8008976:	e7b2      	b.n	80088de <_malloc_r+0x32>
 8008978:	4634      	mov	r4, r6
 800897a:	6876      	ldr	r6, [r6, #4]
 800897c:	e7b9      	b.n	80088f2 <_malloc_r+0x46>
 800897e:	230c      	movs	r3, #12
 8008980:	603b      	str	r3, [r7, #0]
 8008982:	4638      	mov	r0, r7
 8008984:	f000 fd6a 	bl	800945c <__malloc_unlock>
 8008988:	e7a1      	b.n	80088ce <_malloc_r+0x22>
 800898a:	6025      	str	r5, [r4, #0]
 800898c:	e7de      	b.n	800894c <_malloc_r+0xa0>
 800898e:	bf00      	nop
 8008990:	20000088 	.word	0x20000088

08008994 <__sfputc_r>:
 8008994:	6893      	ldr	r3, [r2, #8]
 8008996:	3b01      	subs	r3, #1
 8008998:	2b00      	cmp	r3, #0
 800899a:	b410      	push	{r4}
 800899c:	6093      	str	r3, [r2, #8]
 800899e:	da08      	bge.n	80089b2 <__sfputc_r+0x1e>
 80089a0:	6994      	ldr	r4, [r2, #24]
 80089a2:	42a3      	cmp	r3, r4
 80089a4:	db01      	blt.n	80089aa <__sfputc_r+0x16>
 80089a6:	290a      	cmp	r1, #10
 80089a8:	d103      	bne.n	80089b2 <__sfputc_r+0x1e>
 80089aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089ae:	f000 bb33 	b.w	8009018 <__swbuf_r>
 80089b2:	6813      	ldr	r3, [r2, #0]
 80089b4:	1c58      	adds	r0, r3, #1
 80089b6:	6010      	str	r0, [r2, #0]
 80089b8:	7019      	strb	r1, [r3, #0]
 80089ba:	4608      	mov	r0, r1
 80089bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089c0:	4770      	bx	lr

080089c2 <__sfputs_r>:
 80089c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089c4:	4606      	mov	r6, r0
 80089c6:	460f      	mov	r7, r1
 80089c8:	4614      	mov	r4, r2
 80089ca:	18d5      	adds	r5, r2, r3
 80089cc:	42ac      	cmp	r4, r5
 80089ce:	d101      	bne.n	80089d4 <__sfputs_r+0x12>
 80089d0:	2000      	movs	r0, #0
 80089d2:	e007      	b.n	80089e4 <__sfputs_r+0x22>
 80089d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089d8:	463a      	mov	r2, r7
 80089da:	4630      	mov	r0, r6
 80089dc:	f7ff ffda 	bl	8008994 <__sfputc_r>
 80089e0:	1c43      	adds	r3, r0, #1
 80089e2:	d1f3      	bne.n	80089cc <__sfputs_r+0xa>
 80089e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080089e8 <_vfiprintf_r>:
 80089e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ec:	460d      	mov	r5, r1
 80089ee:	b09d      	sub	sp, #116	; 0x74
 80089f0:	4614      	mov	r4, r2
 80089f2:	4698      	mov	r8, r3
 80089f4:	4606      	mov	r6, r0
 80089f6:	b118      	cbz	r0, 8008a00 <_vfiprintf_r+0x18>
 80089f8:	6983      	ldr	r3, [r0, #24]
 80089fa:	b90b      	cbnz	r3, 8008a00 <_vfiprintf_r+0x18>
 80089fc:	f7ff fe96 	bl	800872c <__sinit>
 8008a00:	4b89      	ldr	r3, [pc, #548]	; (8008c28 <_vfiprintf_r+0x240>)
 8008a02:	429d      	cmp	r5, r3
 8008a04:	d11b      	bne.n	8008a3e <_vfiprintf_r+0x56>
 8008a06:	6875      	ldr	r5, [r6, #4]
 8008a08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a0a:	07d9      	lsls	r1, r3, #31
 8008a0c:	d405      	bmi.n	8008a1a <_vfiprintf_r+0x32>
 8008a0e:	89ab      	ldrh	r3, [r5, #12]
 8008a10:	059a      	lsls	r2, r3, #22
 8008a12:	d402      	bmi.n	8008a1a <_vfiprintf_r+0x32>
 8008a14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a16:	f7ff ff27 	bl	8008868 <__retarget_lock_acquire_recursive>
 8008a1a:	89ab      	ldrh	r3, [r5, #12]
 8008a1c:	071b      	lsls	r3, r3, #28
 8008a1e:	d501      	bpl.n	8008a24 <_vfiprintf_r+0x3c>
 8008a20:	692b      	ldr	r3, [r5, #16]
 8008a22:	b9eb      	cbnz	r3, 8008a60 <_vfiprintf_r+0x78>
 8008a24:	4629      	mov	r1, r5
 8008a26:	4630      	mov	r0, r6
 8008a28:	f000 fb5a 	bl	80090e0 <__swsetup_r>
 8008a2c:	b1c0      	cbz	r0, 8008a60 <_vfiprintf_r+0x78>
 8008a2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a30:	07dc      	lsls	r4, r3, #31
 8008a32:	d50e      	bpl.n	8008a52 <_vfiprintf_r+0x6a>
 8008a34:	f04f 30ff 	mov.w	r0, #4294967295
 8008a38:	b01d      	add	sp, #116	; 0x74
 8008a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a3e:	4b7b      	ldr	r3, [pc, #492]	; (8008c2c <_vfiprintf_r+0x244>)
 8008a40:	429d      	cmp	r5, r3
 8008a42:	d101      	bne.n	8008a48 <_vfiprintf_r+0x60>
 8008a44:	68b5      	ldr	r5, [r6, #8]
 8008a46:	e7df      	b.n	8008a08 <_vfiprintf_r+0x20>
 8008a48:	4b79      	ldr	r3, [pc, #484]	; (8008c30 <_vfiprintf_r+0x248>)
 8008a4a:	429d      	cmp	r5, r3
 8008a4c:	bf08      	it	eq
 8008a4e:	68f5      	ldreq	r5, [r6, #12]
 8008a50:	e7da      	b.n	8008a08 <_vfiprintf_r+0x20>
 8008a52:	89ab      	ldrh	r3, [r5, #12]
 8008a54:	0598      	lsls	r0, r3, #22
 8008a56:	d4ed      	bmi.n	8008a34 <_vfiprintf_r+0x4c>
 8008a58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a5a:	f7ff ff06 	bl	800886a <__retarget_lock_release_recursive>
 8008a5e:	e7e9      	b.n	8008a34 <_vfiprintf_r+0x4c>
 8008a60:	2300      	movs	r3, #0
 8008a62:	9309      	str	r3, [sp, #36]	; 0x24
 8008a64:	2320      	movs	r3, #32
 8008a66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a6e:	2330      	movs	r3, #48	; 0x30
 8008a70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008c34 <_vfiprintf_r+0x24c>
 8008a74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a78:	f04f 0901 	mov.w	r9, #1
 8008a7c:	4623      	mov	r3, r4
 8008a7e:	469a      	mov	sl, r3
 8008a80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a84:	b10a      	cbz	r2, 8008a8a <_vfiprintf_r+0xa2>
 8008a86:	2a25      	cmp	r2, #37	; 0x25
 8008a88:	d1f9      	bne.n	8008a7e <_vfiprintf_r+0x96>
 8008a8a:	ebba 0b04 	subs.w	fp, sl, r4
 8008a8e:	d00b      	beq.n	8008aa8 <_vfiprintf_r+0xc0>
 8008a90:	465b      	mov	r3, fp
 8008a92:	4622      	mov	r2, r4
 8008a94:	4629      	mov	r1, r5
 8008a96:	4630      	mov	r0, r6
 8008a98:	f7ff ff93 	bl	80089c2 <__sfputs_r>
 8008a9c:	3001      	adds	r0, #1
 8008a9e:	f000 80aa 	beq.w	8008bf6 <_vfiprintf_r+0x20e>
 8008aa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008aa4:	445a      	add	r2, fp
 8008aa6:	9209      	str	r2, [sp, #36]	; 0x24
 8008aa8:	f89a 3000 	ldrb.w	r3, [sl]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	f000 80a2 	beq.w	8008bf6 <_vfiprintf_r+0x20e>
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ab8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008abc:	f10a 0a01 	add.w	sl, sl, #1
 8008ac0:	9304      	str	r3, [sp, #16]
 8008ac2:	9307      	str	r3, [sp, #28]
 8008ac4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ac8:	931a      	str	r3, [sp, #104]	; 0x68
 8008aca:	4654      	mov	r4, sl
 8008acc:	2205      	movs	r2, #5
 8008ace:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ad2:	4858      	ldr	r0, [pc, #352]	; (8008c34 <_vfiprintf_r+0x24c>)
 8008ad4:	f7ff fb84 	bl	80081e0 <memchr>
 8008ad8:	9a04      	ldr	r2, [sp, #16]
 8008ada:	b9d8      	cbnz	r0, 8008b14 <_vfiprintf_r+0x12c>
 8008adc:	06d1      	lsls	r1, r2, #27
 8008ade:	bf44      	itt	mi
 8008ae0:	2320      	movmi	r3, #32
 8008ae2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ae6:	0713      	lsls	r3, r2, #28
 8008ae8:	bf44      	itt	mi
 8008aea:	232b      	movmi	r3, #43	; 0x2b
 8008aec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008af0:	f89a 3000 	ldrb.w	r3, [sl]
 8008af4:	2b2a      	cmp	r3, #42	; 0x2a
 8008af6:	d015      	beq.n	8008b24 <_vfiprintf_r+0x13c>
 8008af8:	9a07      	ldr	r2, [sp, #28]
 8008afa:	4654      	mov	r4, sl
 8008afc:	2000      	movs	r0, #0
 8008afe:	f04f 0c0a 	mov.w	ip, #10
 8008b02:	4621      	mov	r1, r4
 8008b04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b08:	3b30      	subs	r3, #48	; 0x30
 8008b0a:	2b09      	cmp	r3, #9
 8008b0c:	d94e      	bls.n	8008bac <_vfiprintf_r+0x1c4>
 8008b0e:	b1b0      	cbz	r0, 8008b3e <_vfiprintf_r+0x156>
 8008b10:	9207      	str	r2, [sp, #28]
 8008b12:	e014      	b.n	8008b3e <_vfiprintf_r+0x156>
 8008b14:	eba0 0308 	sub.w	r3, r0, r8
 8008b18:	fa09 f303 	lsl.w	r3, r9, r3
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	9304      	str	r3, [sp, #16]
 8008b20:	46a2      	mov	sl, r4
 8008b22:	e7d2      	b.n	8008aca <_vfiprintf_r+0xe2>
 8008b24:	9b03      	ldr	r3, [sp, #12]
 8008b26:	1d19      	adds	r1, r3, #4
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	9103      	str	r1, [sp, #12]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	bfbb      	ittet	lt
 8008b30:	425b      	neglt	r3, r3
 8008b32:	f042 0202 	orrlt.w	r2, r2, #2
 8008b36:	9307      	strge	r3, [sp, #28]
 8008b38:	9307      	strlt	r3, [sp, #28]
 8008b3a:	bfb8      	it	lt
 8008b3c:	9204      	strlt	r2, [sp, #16]
 8008b3e:	7823      	ldrb	r3, [r4, #0]
 8008b40:	2b2e      	cmp	r3, #46	; 0x2e
 8008b42:	d10c      	bne.n	8008b5e <_vfiprintf_r+0x176>
 8008b44:	7863      	ldrb	r3, [r4, #1]
 8008b46:	2b2a      	cmp	r3, #42	; 0x2a
 8008b48:	d135      	bne.n	8008bb6 <_vfiprintf_r+0x1ce>
 8008b4a:	9b03      	ldr	r3, [sp, #12]
 8008b4c:	1d1a      	adds	r2, r3, #4
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	9203      	str	r2, [sp, #12]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	bfb8      	it	lt
 8008b56:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b5a:	3402      	adds	r4, #2
 8008b5c:	9305      	str	r3, [sp, #20]
 8008b5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008c44 <_vfiprintf_r+0x25c>
 8008b62:	7821      	ldrb	r1, [r4, #0]
 8008b64:	2203      	movs	r2, #3
 8008b66:	4650      	mov	r0, sl
 8008b68:	f7ff fb3a 	bl	80081e0 <memchr>
 8008b6c:	b140      	cbz	r0, 8008b80 <_vfiprintf_r+0x198>
 8008b6e:	2340      	movs	r3, #64	; 0x40
 8008b70:	eba0 000a 	sub.w	r0, r0, sl
 8008b74:	fa03 f000 	lsl.w	r0, r3, r0
 8008b78:	9b04      	ldr	r3, [sp, #16]
 8008b7a:	4303      	orrs	r3, r0
 8008b7c:	3401      	adds	r4, #1
 8008b7e:	9304      	str	r3, [sp, #16]
 8008b80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b84:	482c      	ldr	r0, [pc, #176]	; (8008c38 <_vfiprintf_r+0x250>)
 8008b86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b8a:	2206      	movs	r2, #6
 8008b8c:	f7ff fb28 	bl	80081e0 <memchr>
 8008b90:	2800      	cmp	r0, #0
 8008b92:	d03f      	beq.n	8008c14 <_vfiprintf_r+0x22c>
 8008b94:	4b29      	ldr	r3, [pc, #164]	; (8008c3c <_vfiprintf_r+0x254>)
 8008b96:	bb1b      	cbnz	r3, 8008be0 <_vfiprintf_r+0x1f8>
 8008b98:	9b03      	ldr	r3, [sp, #12]
 8008b9a:	3307      	adds	r3, #7
 8008b9c:	f023 0307 	bic.w	r3, r3, #7
 8008ba0:	3308      	adds	r3, #8
 8008ba2:	9303      	str	r3, [sp, #12]
 8008ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ba6:	443b      	add	r3, r7
 8008ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8008baa:	e767      	b.n	8008a7c <_vfiprintf_r+0x94>
 8008bac:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bb0:	460c      	mov	r4, r1
 8008bb2:	2001      	movs	r0, #1
 8008bb4:	e7a5      	b.n	8008b02 <_vfiprintf_r+0x11a>
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	3401      	adds	r4, #1
 8008bba:	9305      	str	r3, [sp, #20]
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	f04f 0c0a 	mov.w	ip, #10
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bc8:	3a30      	subs	r2, #48	; 0x30
 8008bca:	2a09      	cmp	r2, #9
 8008bcc:	d903      	bls.n	8008bd6 <_vfiprintf_r+0x1ee>
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d0c5      	beq.n	8008b5e <_vfiprintf_r+0x176>
 8008bd2:	9105      	str	r1, [sp, #20]
 8008bd4:	e7c3      	b.n	8008b5e <_vfiprintf_r+0x176>
 8008bd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bda:	4604      	mov	r4, r0
 8008bdc:	2301      	movs	r3, #1
 8008bde:	e7f0      	b.n	8008bc2 <_vfiprintf_r+0x1da>
 8008be0:	ab03      	add	r3, sp, #12
 8008be2:	9300      	str	r3, [sp, #0]
 8008be4:	462a      	mov	r2, r5
 8008be6:	4b16      	ldr	r3, [pc, #88]	; (8008c40 <_vfiprintf_r+0x258>)
 8008be8:	a904      	add	r1, sp, #16
 8008bea:	4630      	mov	r0, r6
 8008bec:	f3af 8000 	nop.w
 8008bf0:	4607      	mov	r7, r0
 8008bf2:	1c78      	adds	r0, r7, #1
 8008bf4:	d1d6      	bne.n	8008ba4 <_vfiprintf_r+0x1bc>
 8008bf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bf8:	07d9      	lsls	r1, r3, #31
 8008bfa:	d405      	bmi.n	8008c08 <_vfiprintf_r+0x220>
 8008bfc:	89ab      	ldrh	r3, [r5, #12]
 8008bfe:	059a      	lsls	r2, r3, #22
 8008c00:	d402      	bmi.n	8008c08 <_vfiprintf_r+0x220>
 8008c02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c04:	f7ff fe31 	bl	800886a <__retarget_lock_release_recursive>
 8008c08:	89ab      	ldrh	r3, [r5, #12]
 8008c0a:	065b      	lsls	r3, r3, #25
 8008c0c:	f53f af12 	bmi.w	8008a34 <_vfiprintf_r+0x4c>
 8008c10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c12:	e711      	b.n	8008a38 <_vfiprintf_r+0x50>
 8008c14:	ab03      	add	r3, sp, #12
 8008c16:	9300      	str	r3, [sp, #0]
 8008c18:	462a      	mov	r2, r5
 8008c1a:	4b09      	ldr	r3, [pc, #36]	; (8008c40 <_vfiprintf_r+0x258>)
 8008c1c:	a904      	add	r1, sp, #16
 8008c1e:	4630      	mov	r0, r6
 8008c20:	f000 f880 	bl	8008d24 <_printf_i>
 8008c24:	e7e4      	b.n	8008bf0 <_vfiprintf_r+0x208>
 8008c26:	bf00      	nop
 8008c28:	080095d8 	.word	0x080095d8
 8008c2c:	080095f8 	.word	0x080095f8
 8008c30:	080095b8 	.word	0x080095b8
 8008c34:	08009618 	.word	0x08009618
 8008c38:	08009622 	.word	0x08009622
 8008c3c:	00000000 	.word	0x00000000
 8008c40:	080089c3 	.word	0x080089c3
 8008c44:	0800961e 	.word	0x0800961e

08008c48 <_printf_common>:
 8008c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c4c:	4616      	mov	r6, r2
 8008c4e:	4699      	mov	r9, r3
 8008c50:	688a      	ldr	r2, [r1, #8]
 8008c52:	690b      	ldr	r3, [r1, #16]
 8008c54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	bfb8      	it	lt
 8008c5c:	4613      	movlt	r3, r2
 8008c5e:	6033      	str	r3, [r6, #0]
 8008c60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c64:	4607      	mov	r7, r0
 8008c66:	460c      	mov	r4, r1
 8008c68:	b10a      	cbz	r2, 8008c6e <_printf_common+0x26>
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	6033      	str	r3, [r6, #0]
 8008c6e:	6823      	ldr	r3, [r4, #0]
 8008c70:	0699      	lsls	r1, r3, #26
 8008c72:	bf42      	ittt	mi
 8008c74:	6833      	ldrmi	r3, [r6, #0]
 8008c76:	3302      	addmi	r3, #2
 8008c78:	6033      	strmi	r3, [r6, #0]
 8008c7a:	6825      	ldr	r5, [r4, #0]
 8008c7c:	f015 0506 	ands.w	r5, r5, #6
 8008c80:	d106      	bne.n	8008c90 <_printf_common+0x48>
 8008c82:	f104 0a19 	add.w	sl, r4, #25
 8008c86:	68e3      	ldr	r3, [r4, #12]
 8008c88:	6832      	ldr	r2, [r6, #0]
 8008c8a:	1a9b      	subs	r3, r3, r2
 8008c8c:	42ab      	cmp	r3, r5
 8008c8e:	dc26      	bgt.n	8008cde <_printf_common+0x96>
 8008c90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c94:	1e13      	subs	r3, r2, #0
 8008c96:	6822      	ldr	r2, [r4, #0]
 8008c98:	bf18      	it	ne
 8008c9a:	2301      	movne	r3, #1
 8008c9c:	0692      	lsls	r2, r2, #26
 8008c9e:	d42b      	bmi.n	8008cf8 <_printf_common+0xb0>
 8008ca0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ca4:	4649      	mov	r1, r9
 8008ca6:	4638      	mov	r0, r7
 8008ca8:	47c0      	blx	r8
 8008caa:	3001      	adds	r0, #1
 8008cac:	d01e      	beq.n	8008cec <_printf_common+0xa4>
 8008cae:	6823      	ldr	r3, [r4, #0]
 8008cb0:	68e5      	ldr	r5, [r4, #12]
 8008cb2:	6832      	ldr	r2, [r6, #0]
 8008cb4:	f003 0306 	and.w	r3, r3, #6
 8008cb8:	2b04      	cmp	r3, #4
 8008cba:	bf08      	it	eq
 8008cbc:	1aad      	subeq	r5, r5, r2
 8008cbe:	68a3      	ldr	r3, [r4, #8]
 8008cc0:	6922      	ldr	r2, [r4, #16]
 8008cc2:	bf0c      	ite	eq
 8008cc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cc8:	2500      	movne	r5, #0
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	bfc4      	itt	gt
 8008cce:	1a9b      	subgt	r3, r3, r2
 8008cd0:	18ed      	addgt	r5, r5, r3
 8008cd2:	2600      	movs	r6, #0
 8008cd4:	341a      	adds	r4, #26
 8008cd6:	42b5      	cmp	r5, r6
 8008cd8:	d11a      	bne.n	8008d10 <_printf_common+0xc8>
 8008cda:	2000      	movs	r0, #0
 8008cdc:	e008      	b.n	8008cf0 <_printf_common+0xa8>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	4652      	mov	r2, sl
 8008ce2:	4649      	mov	r1, r9
 8008ce4:	4638      	mov	r0, r7
 8008ce6:	47c0      	blx	r8
 8008ce8:	3001      	adds	r0, #1
 8008cea:	d103      	bne.n	8008cf4 <_printf_common+0xac>
 8008cec:	f04f 30ff 	mov.w	r0, #4294967295
 8008cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cf4:	3501      	adds	r5, #1
 8008cf6:	e7c6      	b.n	8008c86 <_printf_common+0x3e>
 8008cf8:	18e1      	adds	r1, r4, r3
 8008cfa:	1c5a      	adds	r2, r3, #1
 8008cfc:	2030      	movs	r0, #48	; 0x30
 8008cfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d02:	4422      	add	r2, r4
 8008d04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d0c:	3302      	adds	r3, #2
 8008d0e:	e7c7      	b.n	8008ca0 <_printf_common+0x58>
 8008d10:	2301      	movs	r3, #1
 8008d12:	4622      	mov	r2, r4
 8008d14:	4649      	mov	r1, r9
 8008d16:	4638      	mov	r0, r7
 8008d18:	47c0      	blx	r8
 8008d1a:	3001      	adds	r0, #1
 8008d1c:	d0e6      	beq.n	8008cec <_printf_common+0xa4>
 8008d1e:	3601      	adds	r6, #1
 8008d20:	e7d9      	b.n	8008cd6 <_printf_common+0x8e>
	...

08008d24 <_printf_i>:
 8008d24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d28:	7e0f      	ldrb	r7, [r1, #24]
 8008d2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d2c:	2f78      	cmp	r7, #120	; 0x78
 8008d2e:	4691      	mov	r9, r2
 8008d30:	4680      	mov	r8, r0
 8008d32:	460c      	mov	r4, r1
 8008d34:	469a      	mov	sl, r3
 8008d36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008d3a:	d807      	bhi.n	8008d4c <_printf_i+0x28>
 8008d3c:	2f62      	cmp	r7, #98	; 0x62
 8008d3e:	d80a      	bhi.n	8008d56 <_printf_i+0x32>
 8008d40:	2f00      	cmp	r7, #0
 8008d42:	f000 80d8 	beq.w	8008ef6 <_printf_i+0x1d2>
 8008d46:	2f58      	cmp	r7, #88	; 0x58
 8008d48:	f000 80a3 	beq.w	8008e92 <_printf_i+0x16e>
 8008d4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d54:	e03a      	b.n	8008dcc <_printf_i+0xa8>
 8008d56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d5a:	2b15      	cmp	r3, #21
 8008d5c:	d8f6      	bhi.n	8008d4c <_printf_i+0x28>
 8008d5e:	a101      	add	r1, pc, #4	; (adr r1, 8008d64 <_printf_i+0x40>)
 8008d60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d64:	08008dbd 	.word	0x08008dbd
 8008d68:	08008dd1 	.word	0x08008dd1
 8008d6c:	08008d4d 	.word	0x08008d4d
 8008d70:	08008d4d 	.word	0x08008d4d
 8008d74:	08008d4d 	.word	0x08008d4d
 8008d78:	08008d4d 	.word	0x08008d4d
 8008d7c:	08008dd1 	.word	0x08008dd1
 8008d80:	08008d4d 	.word	0x08008d4d
 8008d84:	08008d4d 	.word	0x08008d4d
 8008d88:	08008d4d 	.word	0x08008d4d
 8008d8c:	08008d4d 	.word	0x08008d4d
 8008d90:	08008edd 	.word	0x08008edd
 8008d94:	08008e01 	.word	0x08008e01
 8008d98:	08008ebf 	.word	0x08008ebf
 8008d9c:	08008d4d 	.word	0x08008d4d
 8008da0:	08008d4d 	.word	0x08008d4d
 8008da4:	08008eff 	.word	0x08008eff
 8008da8:	08008d4d 	.word	0x08008d4d
 8008dac:	08008e01 	.word	0x08008e01
 8008db0:	08008d4d 	.word	0x08008d4d
 8008db4:	08008d4d 	.word	0x08008d4d
 8008db8:	08008ec7 	.word	0x08008ec7
 8008dbc:	682b      	ldr	r3, [r5, #0]
 8008dbe:	1d1a      	adds	r2, r3, #4
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	602a      	str	r2, [r5, #0]
 8008dc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e0a3      	b.n	8008f18 <_printf_i+0x1f4>
 8008dd0:	6820      	ldr	r0, [r4, #0]
 8008dd2:	6829      	ldr	r1, [r5, #0]
 8008dd4:	0606      	lsls	r6, r0, #24
 8008dd6:	f101 0304 	add.w	r3, r1, #4
 8008dda:	d50a      	bpl.n	8008df2 <_printf_i+0xce>
 8008ddc:	680e      	ldr	r6, [r1, #0]
 8008dde:	602b      	str	r3, [r5, #0]
 8008de0:	2e00      	cmp	r6, #0
 8008de2:	da03      	bge.n	8008dec <_printf_i+0xc8>
 8008de4:	232d      	movs	r3, #45	; 0x2d
 8008de6:	4276      	negs	r6, r6
 8008de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dec:	485e      	ldr	r0, [pc, #376]	; (8008f68 <_printf_i+0x244>)
 8008dee:	230a      	movs	r3, #10
 8008df0:	e019      	b.n	8008e26 <_printf_i+0x102>
 8008df2:	680e      	ldr	r6, [r1, #0]
 8008df4:	602b      	str	r3, [r5, #0]
 8008df6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008dfa:	bf18      	it	ne
 8008dfc:	b236      	sxthne	r6, r6
 8008dfe:	e7ef      	b.n	8008de0 <_printf_i+0xbc>
 8008e00:	682b      	ldr	r3, [r5, #0]
 8008e02:	6820      	ldr	r0, [r4, #0]
 8008e04:	1d19      	adds	r1, r3, #4
 8008e06:	6029      	str	r1, [r5, #0]
 8008e08:	0601      	lsls	r1, r0, #24
 8008e0a:	d501      	bpl.n	8008e10 <_printf_i+0xec>
 8008e0c:	681e      	ldr	r6, [r3, #0]
 8008e0e:	e002      	b.n	8008e16 <_printf_i+0xf2>
 8008e10:	0646      	lsls	r6, r0, #25
 8008e12:	d5fb      	bpl.n	8008e0c <_printf_i+0xe8>
 8008e14:	881e      	ldrh	r6, [r3, #0]
 8008e16:	4854      	ldr	r0, [pc, #336]	; (8008f68 <_printf_i+0x244>)
 8008e18:	2f6f      	cmp	r7, #111	; 0x6f
 8008e1a:	bf0c      	ite	eq
 8008e1c:	2308      	moveq	r3, #8
 8008e1e:	230a      	movne	r3, #10
 8008e20:	2100      	movs	r1, #0
 8008e22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e26:	6865      	ldr	r5, [r4, #4]
 8008e28:	60a5      	str	r5, [r4, #8]
 8008e2a:	2d00      	cmp	r5, #0
 8008e2c:	bfa2      	ittt	ge
 8008e2e:	6821      	ldrge	r1, [r4, #0]
 8008e30:	f021 0104 	bicge.w	r1, r1, #4
 8008e34:	6021      	strge	r1, [r4, #0]
 8008e36:	b90e      	cbnz	r6, 8008e3c <_printf_i+0x118>
 8008e38:	2d00      	cmp	r5, #0
 8008e3a:	d04d      	beq.n	8008ed8 <_printf_i+0x1b4>
 8008e3c:	4615      	mov	r5, r2
 8008e3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008e42:	fb03 6711 	mls	r7, r3, r1, r6
 8008e46:	5dc7      	ldrb	r7, [r0, r7]
 8008e48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008e4c:	4637      	mov	r7, r6
 8008e4e:	42bb      	cmp	r3, r7
 8008e50:	460e      	mov	r6, r1
 8008e52:	d9f4      	bls.n	8008e3e <_printf_i+0x11a>
 8008e54:	2b08      	cmp	r3, #8
 8008e56:	d10b      	bne.n	8008e70 <_printf_i+0x14c>
 8008e58:	6823      	ldr	r3, [r4, #0]
 8008e5a:	07de      	lsls	r6, r3, #31
 8008e5c:	d508      	bpl.n	8008e70 <_printf_i+0x14c>
 8008e5e:	6923      	ldr	r3, [r4, #16]
 8008e60:	6861      	ldr	r1, [r4, #4]
 8008e62:	4299      	cmp	r1, r3
 8008e64:	bfde      	ittt	le
 8008e66:	2330      	movle	r3, #48	; 0x30
 8008e68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e70:	1b52      	subs	r2, r2, r5
 8008e72:	6122      	str	r2, [r4, #16]
 8008e74:	f8cd a000 	str.w	sl, [sp]
 8008e78:	464b      	mov	r3, r9
 8008e7a:	aa03      	add	r2, sp, #12
 8008e7c:	4621      	mov	r1, r4
 8008e7e:	4640      	mov	r0, r8
 8008e80:	f7ff fee2 	bl	8008c48 <_printf_common>
 8008e84:	3001      	adds	r0, #1
 8008e86:	d14c      	bne.n	8008f22 <_printf_i+0x1fe>
 8008e88:	f04f 30ff 	mov.w	r0, #4294967295
 8008e8c:	b004      	add	sp, #16
 8008e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e92:	4835      	ldr	r0, [pc, #212]	; (8008f68 <_printf_i+0x244>)
 8008e94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008e98:	6829      	ldr	r1, [r5, #0]
 8008e9a:	6823      	ldr	r3, [r4, #0]
 8008e9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ea0:	6029      	str	r1, [r5, #0]
 8008ea2:	061d      	lsls	r5, r3, #24
 8008ea4:	d514      	bpl.n	8008ed0 <_printf_i+0x1ac>
 8008ea6:	07df      	lsls	r7, r3, #31
 8008ea8:	bf44      	itt	mi
 8008eaa:	f043 0320 	orrmi.w	r3, r3, #32
 8008eae:	6023      	strmi	r3, [r4, #0]
 8008eb0:	b91e      	cbnz	r6, 8008eba <_printf_i+0x196>
 8008eb2:	6823      	ldr	r3, [r4, #0]
 8008eb4:	f023 0320 	bic.w	r3, r3, #32
 8008eb8:	6023      	str	r3, [r4, #0]
 8008eba:	2310      	movs	r3, #16
 8008ebc:	e7b0      	b.n	8008e20 <_printf_i+0xfc>
 8008ebe:	6823      	ldr	r3, [r4, #0]
 8008ec0:	f043 0320 	orr.w	r3, r3, #32
 8008ec4:	6023      	str	r3, [r4, #0]
 8008ec6:	2378      	movs	r3, #120	; 0x78
 8008ec8:	4828      	ldr	r0, [pc, #160]	; (8008f6c <_printf_i+0x248>)
 8008eca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ece:	e7e3      	b.n	8008e98 <_printf_i+0x174>
 8008ed0:	0659      	lsls	r1, r3, #25
 8008ed2:	bf48      	it	mi
 8008ed4:	b2b6      	uxthmi	r6, r6
 8008ed6:	e7e6      	b.n	8008ea6 <_printf_i+0x182>
 8008ed8:	4615      	mov	r5, r2
 8008eda:	e7bb      	b.n	8008e54 <_printf_i+0x130>
 8008edc:	682b      	ldr	r3, [r5, #0]
 8008ede:	6826      	ldr	r6, [r4, #0]
 8008ee0:	6961      	ldr	r1, [r4, #20]
 8008ee2:	1d18      	adds	r0, r3, #4
 8008ee4:	6028      	str	r0, [r5, #0]
 8008ee6:	0635      	lsls	r5, r6, #24
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	d501      	bpl.n	8008ef0 <_printf_i+0x1cc>
 8008eec:	6019      	str	r1, [r3, #0]
 8008eee:	e002      	b.n	8008ef6 <_printf_i+0x1d2>
 8008ef0:	0670      	lsls	r0, r6, #25
 8008ef2:	d5fb      	bpl.n	8008eec <_printf_i+0x1c8>
 8008ef4:	8019      	strh	r1, [r3, #0]
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	6123      	str	r3, [r4, #16]
 8008efa:	4615      	mov	r5, r2
 8008efc:	e7ba      	b.n	8008e74 <_printf_i+0x150>
 8008efe:	682b      	ldr	r3, [r5, #0]
 8008f00:	1d1a      	adds	r2, r3, #4
 8008f02:	602a      	str	r2, [r5, #0]
 8008f04:	681d      	ldr	r5, [r3, #0]
 8008f06:	6862      	ldr	r2, [r4, #4]
 8008f08:	2100      	movs	r1, #0
 8008f0a:	4628      	mov	r0, r5
 8008f0c:	f7ff f968 	bl	80081e0 <memchr>
 8008f10:	b108      	cbz	r0, 8008f16 <_printf_i+0x1f2>
 8008f12:	1b40      	subs	r0, r0, r5
 8008f14:	6060      	str	r0, [r4, #4]
 8008f16:	6863      	ldr	r3, [r4, #4]
 8008f18:	6123      	str	r3, [r4, #16]
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f20:	e7a8      	b.n	8008e74 <_printf_i+0x150>
 8008f22:	6923      	ldr	r3, [r4, #16]
 8008f24:	462a      	mov	r2, r5
 8008f26:	4649      	mov	r1, r9
 8008f28:	4640      	mov	r0, r8
 8008f2a:	47d0      	blx	sl
 8008f2c:	3001      	adds	r0, #1
 8008f2e:	d0ab      	beq.n	8008e88 <_printf_i+0x164>
 8008f30:	6823      	ldr	r3, [r4, #0]
 8008f32:	079b      	lsls	r3, r3, #30
 8008f34:	d413      	bmi.n	8008f5e <_printf_i+0x23a>
 8008f36:	68e0      	ldr	r0, [r4, #12]
 8008f38:	9b03      	ldr	r3, [sp, #12]
 8008f3a:	4298      	cmp	r0, r3
 8008f3c:	bfb8      	it	lt
 8008f3e:	4618      	movlt	r0, r3
 8008f40:	e7a4      	b.n	8008e8c <_printf_i+0x168>
 8008f42:	2301      	movs	r3, #1
 8008f44:	4632      	mov	r2, r6
 8008f46:	4649      	mov	r1, r9
 8008f48:	4640      	mov	r0, r8
 8008f4a:	47d0      	blx	sl
 8008f4c:	3001      	adds	r0, #1
 8008f4e:	d09b      	beq.n	8008e88 <_printf_i+0x164>
 8008f50:	3501      	adds	r5, #1
 8008f52:	68e3      	ldr	r3, [r4, #12]
 8008f54:	9903      	ldr	r1, [sp, #12]
 8008f56:	1a5b      	subs	r3, r3, r1
 8008f58:	42ab      	cmp	r3, r5
 8008f5a:	dcf2      	bgt.n	8008f42 <_printf_i+0x21e>
 8008f5c:	e7eb      	b.n	8008f36 <_printf_i+0x212>
 8008f5e:	2500      	movs	r5, #0
 8008f60:	f104 0619 	add.w	r6, r4, #25
 8008f64:	e7f5      	b.n	8008f52 <_printf_i+0x22e>
 8008f66:	bf00      	nop
 8008f68:	08009629 	.word	0x08009629
 8008f6c:	0800963a 	.word	0x0800963a

08008f70 <_sbrk_r>:
 8008f70:	b538      	push	{r3, r4, r5, lr}
 8008f72:	4d06      	ldr	r5, [pc, #24]	; (8008f8c <_sbrk_r+0x1c>)
 8008f74:	2300      	movs	r3, #0
 8008f76:	4604      	mov	r4, r0
 8008f78:	4608      	mov	r0, r1
 8008f7a:	602b      	str	r3, [r5, #0]
 8008f7c:	f7ff fa3e 	bl	80083fc <_sbrk>
 8008f80:	1c43      	adds	r3, r0, #1
 8008f82:	d102      	bne.n	8008f8a <_sbrk_r+0x1a>
 8008f84:	682b      	ldr	r3, [r5, #0]
 8008f86:	b103      	cbz	r3, 8008f8a <_sbrk_r+0x1a>
 8008f88:	6023      	str	r3, [r4, #0]
 8008f8a:	bd38      	pop	{r3, r4, r5, pc}
 8008f8c:	20000090 	.word	0x20000090

08008f90 <__sread>:
 8008f90:	b510      	push	{r4, lr}
 8008f92:	460c      	mov	r4, r1
 8008f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f98:	f000 fab2 	bl	8009500 <_read_r>
 8008f9c:	2800      	cmp	r0, #0
 8008f9e:	bfab      	itete	ge
 8008fa0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008fa2:	89a3      	ldrhlt	r3, [r4, #12]
 8008fa4:	181b      	addge	r3, r3, r0
 8008fa6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008faa:	bfac      	ite	ge
 8008fac:	6563      	strge	r3, [r4, #84]	; 0x54
 8008fae:	81a3      	strhlt	r3, [r4, #12]
 8008fb0:	bd10      	pop	{r4, pc}

08008fb2 <__swrite>:
 8008fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fb6:	461f      	mov	r7, r3
 8008fb8:	898b      	ldrh	r3, [r1, #12]
 8008fba:	05db      	lsls	r3, r3, #23
 8008fbc:	4605      	mov	r5, r0
 8008fbe:	460c      	mov	r4, r1
 8008fc0:	4616      	mov	r6, r2
 8008fc2:	d505      	bpl.n	8008fd0 <__swrite+0x1e>
 8008fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fc8:	2302      	movs	r3, #2
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f000 f9c8 	bl	8009360 <_lseek_r>
 8008fd0:	89a3      	ldrh	r3, [r4, #12]
 8008fd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fda:	81a3      	strh	r3, [r4, #12]
 8008fdc:	4632      	mov	r2, r6
 8008fde:	463b      	mov	r3, r7
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fe6:	f000 b869 	b.w	80090bc <_write_r>

08008fea <__sseek>:
 8008fea:	b510      	push	{r4, lr}
 8008fec:	460c      	mov	r4, r1
 8008fee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ff2:	f000 f9b5 	bl	8009360 <_lseek_r>
 8008ff6:	1c43      	adds	r3, r0, #1
 8008ff8:	89a3      	ldrh	r3, [r4, #12]
 8008ffa:	bf15      	itete	ne
 8008ffc:	6560      	strne	r0, [r4, #84]	; 0x54
 8008ffe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009002:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009006:	81a3      	strheq	r3, [r4, #12]
 8009008:	bf18      	it	ne
 800900a:	81a3      	strhne	r3, [r4, #12]
 800900c:	bd10      	pop	{r4, pc}

0800900e <__sclose>:
 800900e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009012:	f000 b8d3 	b.w	80091bc <_close_r>
	...

08009018 <__swbuf_r>:
 8009018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901a:	460e      	mov	r6, r1
 800901c:	4614      	mov	r4, r2
 800901e:	4605      	mov	r5, r0
 8009020:	b118      	cbz	r0, 800902a <__swbuf_r+0x12>
 8009022:	6983      	ldr	r3, [r0, #24]
 8009024:	b90b      	cbnz	r3, 800902a <__swbuf_r+0x12>
 8009026:	f7ff fb81 	bl	800872c <__sinit>
 800902a:	4b21      	ldr	r3, [pc, #132]	; (80090b0 <__swbuf_r+0x98>)
 800902c:	429c      	cmp	r4, r3
 800902e:	d12b      	bne.n	8009088 <__swbuf_r+0x70>
 8009030:	686c      	ldr	r4, [r5, #4]
 8009032:	69a3      	ldr	r3, [r4, #24]
 8009034:	60a3      	str	r3, [r4, #8]
 8009036:	89a3      	ldrh	r3, [r4, #12]
 8009038:	071a      	lsls	r2, r3, #28
 800903a:	d52f      	bpl.n	800909c <__swbuf_r+0x84>
 800903c:	6923      	ldr	r3, [r4, #16]
 800903e:	b36b      	cbz	r3, 800909c <__swbuf_r+0x84>
 8009040:	6923      	ldr	r3, [r4, #16]
 8009042:	6820      	ldr	r0, [r4, #0]
 8009044:	1ac0      	subs	r0, r0, r3
 8009046:	6963      	ldr	r3, [r4, #20]
 8009048:	b2f6      	uxtb	r6, r6
 800904a:	4283      	cmp	r3, r0
 800904c:	4637      	mov	r7, r6
 800904e:	dc04      	bgt.n	800905a <__swbuf_r+0x42>
 8009050:	4621      	mov	r1, r4
 8009052:	4628      	mov	r0, r5
 8009054:	f000 f948 	bl	80092e8 <_fflush_r>
 8009058:	bb30      	cbnz	r0, 80090a8 <__swbuf_r+0x90>
 800905a:	68a3      	ldr	r3, [r4, #8]
 800905c:	3b01      	subs	r3, #1
 800905e:	60a3      	str	r3, [r4, #8]
 8009060:	6823      	ldr	r3, [r4, #0]
 8009062:	1c5a      	adds	r2, r3, #1
 8009064:	6022      	str	r2, [r4, #0]
 8009066:	701e      	strb	r6, [r3, #0]
 8009068:	6963      	ldr	r3, [r4, #20]
 800906a:	3001      	adds	r0, #1
 800906c:	4283      	cmp	r3, r0
 800906e:	d004      	beq.n	800907a <__swbuf_r+0x62>
 8009070:	89a3      	ldrh	r3, [r4, #12]
 8009072:	07db      	lsls	r3, r3, #31
 8009074:	d506      	bpl.n	8009084 <__swbuf_r+0x6c>
 8009076:	2e0a      	cmp	r6, #10
 8009078:	d104      	bne.n	8009084 <__swbuf_r+0x6c>
 800907a:	4621      	mov	r1, r4
 800907c:	4628      	mov	r0, r5
 800907e:	f000 f933 	bl	80092e8 <_fflush_r>
 8009082:	b988      	cbnz	r0, 80090a8 <__swbuf_r+0x90>
 8009084:	4638      	mov	r0, r7
 8009086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009088:	4b0a      	ldr	r3, [pc, #40]	; (80090b4 <__swbuf_r+0x9c>)
 800908a:	429c      	cmp	r4, r3
 800908c:	d101      	bne.n	8009092 <__swbuf_r+0x7a>
 800908e:	68ac      	ldr	r4, [r5, #8]
 8009090:	e7cf      	b.n	8009032 <__swbuf_r+0x1a>
 8009092:	4b09      	ldr	r3, [pc, #36]	; (80090b8 <__swbuf_r+0xa0>)
 8009094:	429c      	cmp	r4, r3
 8009096:	bf08      	it	eq
 8009098:	68ec      	ldreq	r4, [r5, #12]
 800909a:	e7ca      	b.n	8009032 <__swbuf_r+0x1a>
 800909c:	4621      	mov	r1, r4
 800909e:	4628      	mov	r0, r5
 80090a0:	f000 f81e 	bl	80090e0 <__swsetup_r>
 80090a4:	2800      	cmp	r0, #0
 80090a6:	d0cb      	beq.n	8009040 <__swbuf_r+0x28>
 80090a8:	f04f 37ff 	mov.w	r7, #4294967295
 80090ac:	e7ea      	b.n	8009084 <__swbuf_r+0x6c>
 80090ae:	bf00      	nop
 80090b0:	080095d8 	.word	0x080095d8
 80090b4:	080095f8 	.word	0x080095f8
 80090b8:	080095b8 	.word	0x080095b8

080090bc <_write_r>:
 80090bc:	b538      	push	{r3, r4, r5, lr}
 80090be:	4d07      	ldr	r5, [pc, #28]	; (80090dc <_write_r+0x20>)
 80090c0:	4604      	mov	r4, r0
 80090c2:	4608      	mov	r0, r1
 80090c4:	4611      	mov	r1, r2
 80090c6:	2200      	movs	r2, #0
 80090c8:	602a      	str	r2, [r5, #0]
 80090ca:	461a      	mov	r2, r3
 80090cc:	f7ff f945 	bl	800835a <_write>
 80090d0:	1c43      	adds	r3, r0, #1
 80090d2:	d102      	bne.n	80090da <_write_r+0x1e>
 80090d4:	682b      	ldr	r3, [r5, #0]
 80090d6:	b103      	cbz	r3, 80090da <_write_r+0x1e>
 80090d8:	6023      	str	r3, [r4, #0]
 80090da:	bd38      	pop	{r3, r4, r5, pc}
 80090dc:	20000090 	.word	0x20000090

080090e0 <__swsetup_r>:
 80090e0:	4b32      	ldr	r3, [pc, #200]	; (80091ac <__swsetup_r+0xcc>)
 80090e2:	b570      	push	{r4, r5, r6, lr}
 80090e4:	681d      	ldr	r5, [r3, #0]
 80090e6:	4606      	mov	r6, r0
 80090e8:	460c      	mov	r4, r1
 80090ea:	b125      	cbz	r5, 80090f6 <__swsetup_r+0x16>
 80090ec:	69ab      	ldr	r3, [r5, #24]
 80090ee:	b913      	cbnz	r3, 80090f6 <__swsetup_r+0x16>
 80090f0:	4628      	mov	r0, r5
 80090f2:	f7ff fb1b 	bl	800872c <__sinit>
 80090f6:	4b2e      	ldr	r3, [pc, #184]	; (80091b0 <__swsetup_r+0xd0>)
 80090f8:	429c      	cmp	r4, r3
 80090fa:	d10f      	bne.n	800911c <__swsetup_r+0x3c>
 80090fc:	686c      	ldr	r4, [r5, #4]
 80090fe:	89a3      	ldrh	r3, [r4, #12]
 8009100:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009104:	0719      	lsls	r1, r3, #28
 8009106:	d42c      	bmi.n	8009162 <__swsetup_r+0x82>
 8009108:	06dd      	lsls	r5, r3, #27
 800910a:	d411      	bmi.n	8009130 <__swsetup_r+0x50>
 800910c:	2309      	movs	r3, #9
 800910e:	6033      	str	r3, [r6, #0]
 8009110:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009114:	81a3      	strh	r3, [r4, #12]
 8009116:	f04f 30ff 	mov.w	r0, #4294967295
 800911a:	e03e      	b.n	800919a <__swsetup_r+0xba>
 800911c:	4b25      	ldr	r3, [pc, #148]	; (80091b4 <__swsetup_r+0xd4>)
 800911e:	429c      	cmp	r4, r3
 8009120:	d101      	bne.n	8009126 <__swsetup_r+0x46>
 8009122:	68ac      	ldr	r4, [r5, #8]
 8009124:	e7eb      	b.n	80090fe <__swsetup_r+0x1e>
 8009126:	4b24      	ldr	r3, [pc, #144]	; (80091b8 <__swsetup_r+0xd8>)
 8009128:	429c      	cmp	r4, r3
 800912a:	bf08      	it	eq
 800912c:	68ec      	ldreq	r4, [r5, #12]
 800912e:	e7e6      	b.n	80090fe <__swsetup_r+0x1e>
 8009130:	0758      	lsls	r0, r3, #29
 8009132:	d512      	bpl.n	800915a <__swsetup_r+0x7a>
 8009134:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009136:	b141      	cbz	r1, 800914a <__swsetup_r+0x6a>
 8009138:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800913c:	4299      	cmp	r1, r3
 800913e:	d002      	beq.n	8009146 <__swsetup_r+0x66>
 8009140:	4630      	mov	r0, r6
 8009142:	f000 f991 	bl	8009468 <_free_r>
 8009146:	2300      	movs	r3, #0
 8009148:	6363      	str	r3, [r4, #52]	; 0x34
 800914a:	89a3      	ldrh	r3, [r4, #12]
 800914c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009150:	81a3      	strh	r3, [r4, #12]
 8009152:	2300      	movs	r3, #0
 8009154:	6063      	str	r3, [r4, #4]
 8009156:	6923      	ldr	r3, [r4, #16]
 8009158:	6023      	str	r3, [r4, #0]
 800915a:	89a3      	ldrh	r3, [r4, #12]
 800915c:	f043 0308 	orr.w	r3, r3, #8
 8009160:	81a3      	strh	r3, [r4, #12]
 8009162:	6923      	ldr	r3, [r4, #16]
 8009164:	b94b      	cbnz	r3, 800917a <__swsetup_r+0x9a>
 8009166:	89a3      	ldrh	r3, [r4, #12]
 8009168:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800916c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009170:	d003      	beq.n	800917a <__swsetup_r+0x9a>
 8009172:	4621      	mov	r1, r4
 8009174:	4630      	mov	r0, r6
 8009176:	f000 f92b 	bl	80093d0 <__smakebuf_r>
 800917a:	89a0      	ldrh	r0, [r4, #12]
 800917c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009180:	f010 0301 	ands.w	r3, r0, #1
 8009184:	d00a      	beq.n	800919c <__swsetup_r+0xbc>
 8009186:	2300      	movs	r3, #0
 8009188:	60a3      	str	r3, [r4, #8]
 800918a:	6963      	ldr	r3, [r4, #20]
 800918c:	425b      	negs	r3, r3
 800918e:	61a3      	str	r3, [r4, #24]
 8009190:	6923      	ldr	r3, [r4, #16]
 8009192:	b943      	cbnz	r3, 80091a6 <__swsetup_r+0xc6>
 8009194:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009198:	d1ba      	bne.n	8009110 <__swsetup_r+0x30>
 800919a:	bd70      	pop	{r4, r5, r6, pc}
 800919c:	0781      	lsls	r1, r0, #30
 800919e:	bf58      	it	pl
 80091a0:	6963      	ldrpl	r3, [r4, #20]
 80091a2:	60a3      	str	r3, [r4, #8]
 80091a4:	e7f4      	b.n	8009190 <__swsetup_r+0xb0>
 80091a6:	2000      	movs	r0, #0
 80091a8:	e7f7      	b.n	800919a <__swsetup_r+0xba>
 80091aa:	bf00      	nop
 80091ac:	20000000 	.word	0x20000000
 80091b0:	080095d8 	.word	0x080095d8
 80091b4:	080095f8 	.word	0x080095f8
 80091b8:	080095b8 	.word	0x080095b8

080091bc <_close_r>:
 80091bc:	b538      	push	{r3, r4, r5, lr}
 80091be:	4d06      	ldr	r5, [pc, #24]	; (80091d8 <_close_r+0x1c>)
 80091c0:	2300      	movs	r3, #0
 80091c2:	4604      	mov	r4, r0
 80091c4:	4608      	mov	r0, r1
 80091c6:	602b      	str	r3, [r5, #0]
 80091c8:	f7ff f8e3 	bl	8008392 <_close>
 80091cc:	1c43      	adds	r3, r0, #1
 80091ce:	d102      	bne.n	80091d6 <_close_r+0x1a>
 80091d0:	682b      	ldr	r3, [r5, #0]
 80091d2:	b103      	cbz	r3, 80091d6 <_close_r+0x1a>
 80091d4:	6023      	str	r3, [r4, #0]
 80091d6:	bd38      	pop	{r3, r4, r5, pc}
 80091d8:	20000090 	.word	0x20000090

080091dc <__sflush_r>:
 80091dc:	898a      	ldrh	r2, [r1, #12]
 80091de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091e2:	4605      	mov	r5, r0
 80091e4:	0710      	lsls	r0, r2, #28
 80091e6:	460c      	mov	r4, r1
 80091e8:	d458      	bmi.n	800929c <__sflush_r+0xc0>
 80091ea:	684b      	ldr	r3, [r1, #4]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	dc05      	bgt.n	80091fc <__sflush_r+0x20>
 80091f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	dc02      	bgt.n	80091fc <__sflush_r+0x20>
 80091f6:	2000      	movs	r0, #0
 80091f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091fe:	2e00      	cmp	r6, #0
 8009200:	d0f9      	beq.n	80091f6 <__sflush_r+0x1a>
 8009202:	2300      	movs	r3, #0
 8009204:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009208:	682f      	ldr	r7, [r5, #0]
 800920a:	602b      	str	r3, [r5, #0]
 800920c:	d032      	beq.n	8009274 <__sflush_r+0x98>
 800920e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009210:	89a3      	ldrh	r3, [r4, #12]
 8009212:	075a      	lsls	r2, r3, #29
 8009214:	d505      	bpl.n	8009222 <__sflush_r+0x46>
 8009216:	6863      	ldr	r3, [r4, #4]
 8009218:	1ac0      	subs	r0, r0, r3
 800921a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800921c:	b10b      	cbz	r3, 8009222 <__sflush_r+0x46>
 800921e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009220:	1ac0      	subs	r0, r0, r3
 8009222:	2300      	movs	r3, #0
 8009224:	4602      	mov	r2, r0
 8009226:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009228:	6a21      	ldr	r1, [r4, #32]
 800922a:	4628      	mov	r0, r5
 800922c:	47b0      	blx	r6
 800922e:	1c43      	adds	r3, r0, #1
 8009230:	89a3      	ldrh	r3, [r4, #12]
 8009232:	d106      	bne.n	8009242 <__sflush_r+0x66>
 8009234:	6829      	ldr	r1, [r5, #0]
 8009236:	291d      	cmp	r1, #29
 8009238:	d82c      	bhi.n	8009294 <__sflush_r+0xb8>
 800923a:	4a2a      	ldr	r2, [pc, #168]	; (80092e4 <__sflush_r+0x108>)
 800923c:	40ca      	lsrs	r2, r1
 800923e:	07d6      	lsls	r6, r2, #31
 8009240:	d528      	bpl.n	8009294 <__sflush_r+0xb8>
 8009242:	2200      	movs	r2, #0
 8009244:	6062      	str	r2, [r4, #4]
 8009246:	04d9      	lsls	r1, r3, #19
 8009248:	6922      	ldr	r2, [r4, #16]
 800924a:	6022      	str	r2, [r4, #0]
 800924c:	d504      	bpl.n	8009258 <__sflush_r+0x7c>
 800924e:	1c42      	adds	r2, r0, #1
 8009250:	d101      	bne.n	8009256 <__sflush_r+0x7a>
 8009252:	682b      	ldr	r3, [r5, #0]
 8009254:	b903      	cbnz	r3, 8009258 <__sflush_r+0x7c>
 8009256:	6560      	str	r0, [r4, #84]	; 0x54
 8009258:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800925a:	602f      	str	r7, [r5, #0]
 800925c:	2900      	cmp	r1, #0
 800925e:	d0ca      	beq.n	80091f6 <__sflush_r+0x1a>
 8009260:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009264:	4299      	cmp	r1, r3
 8009266:	d002      	beq.n	800926e <__sflush_r+0x92>
 8009268:	4628      	mov	r0, r5
 800926a:	f000 f8fd 	bl	8009468 <_free_r>
 800926e:	2000      	movs	r0, #0
 8009270:	6360      	str	r0, [r4, #52]	; 0x34
 8009272:	e7c1      	b.n	80091f8 <__sflush_r+0x1c>
 8009274:	6a21      	ldr	r1, [r4, #32]
 8009276:	2301      	movs	r3, #1
 8009278:	4628      	mov	r0, r5
 800927a:	47b0      	blx	r6
 800927c:	1c41      	adds	r1, r0, #1
 800927e:	d1c7      	bne.n	8009210 <__sflush_r+0x34>
 8009280:	682b      	ldr	r3, [r5, #0]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d0c4      	beq.n	8009210 <__sflush_r+0x34>
 8009286:	2b1d      	cmp	r3, #29
 8009288:	d001      	beq.n	800928e <__sflush_r+0xb2>
 800928a:	2b16      	cmp	r3, #22
 800928c:	d101      	bne.n	8009292 <__sflush_r+0xb6>
 800928e:	602f      	str	r7, [r5, #0]
 8009290:	e7b1      	b.n	80091f6 <__sflush_r+0x1a>
 8009292:	89a3      	ldrh	r3, [r4, #12]
 8009294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009298:	81a3      	strh	r3, [r4, #12]
 800929a:	e7ad      	b.n	80091f8 <__sflush_r+0x1c>
 800929c:	690f      	ldr	r7, [r1, #16]
 800929e:	2f00      	cmp	r7, #0
 80092a0:	d0a9      	beq.n	80091f6 <__sflush_r+0x1a>
 80092a2:	0793      	lsls	r3, r2, #30
 80092a4:	680e      	ldr	r6, [r1, #0]
 80092a6:	bf08      	it	eq
 80092a8:	694b      	ldreq	r3, [r1, #20]
 80092aa:	600f      	str	r7, [r1, #0]
 80092ac:	bf18      	it	ne
 80092ae:	2300      	movne	r3, #0
 80092b0:	eba6 0807 	sub.w	r8, r6, r7
 80092b4:	608b      	str	r3, [r1, #8]
 80092b6:	f1b8 0f00 	cmp.w	r8, #0
 80092ba:	dd9c      	ble.n	80091f6 <__sflush_r+0x1a>
 80092bc:	6a21      	ldr	r1, [r4, #32]
 80092be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80092c0:	4643      	mov	r3, r8
 80092c2:	463a      	mov	r2, r7
 80092c4:	4628      	mov	r0, r5
 80092c6:	47b0      	blx	r6
 80092c8:	2800      	cmp	r0, #0
 80092ca:	dc06      	bgt.n	80092da <__sflush_r+0xfe>
 80092cc:	89a3      	ldrh	r3, [r4, #12]
 80092ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092d2:	81a3      	strh	r3, [r4, #12]
 80092d4:	f04f 30ff 	mov.w	r0, #4294967295
 80092d8:	e78e      	b.n	80091f8 <__sflush_r+0x1c>
 80092da:	4407      	add	r7, r0
 80092dc:	eba8 0800 	sub.w	r8, r8, r0
 80092e0:	e7e9      	b.n	80092b6 <__sflush_r+0xda>
 80092e2:	bf00      	nop
 80092e4:	20400001 	.word	0x20400001

080092e8 <_fflush_r>:
 80092e8:	b538      	push	{r3, r4, r5, lr}
 80092ea:	690b      	ldr	r3, [r1, #16]
 80092ec:	4605      	mov	r5, r0
 80092ee:	460c      	mov	r4, r1
 80092f0:	b913      	cbnz	r3, 80092f8 <_fflush_r+0x10>
 80092f2:	2500      	movs	r5, #0
 80092f4:	4628      	mov	r0, r5
 80092f6:	bd38      	pop	{r3, r4, r5, pc}
 80092f8:	b118      	cbz	r0, 8009302 <_fflush_r+0x1a>
 80092fa:	6983      	ldr	r3, [r0, #24]
 80092fc:	b90b      	cbnz	r3, 8009302 <_fflush_r+0x1a>
 80092fe:	f7ff fa15 	bl	800872c <__sinit>
 8009302:	4b14      	ldr	r3, [pc, #80]	; (8009354 <_fflush_r+0x6c>)
 8009304:	429c      	cmp	r4, r3
 8009306:	d11b      	bne.n	8009340 <_fflush_r+0x58>
 8009308:	686c      	ldr	r4, [r5, #4]
 800930a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d0ef      	beq.n	80092f2 <_fflush_r+0xa>
 8009312:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009314:	07d0      	lsls	r0, r2, #31
 8009316:	d404      	bmi.n	8009322 <_fflush_r+0x3a>
 8009318:	0599      	lsls	r1, r3, #22
 800931a:	d402      	bmi.n	8009322 <_fflush_r+0x3a>
 800931c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800931e:	f7ff faa3 	bl	8008868 <__retarget_lock_acquire_recursive>
 8009322:	4628      	mov	r0, r5
 8009324:	4621      	mov	r1, r4
 8009326:	f7ff ff59 	bl	80091dc <__sflush_r>
 800932a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800932c:	07da      	lsls	r2, r3, #31
 800932e:	4605      	mov	r5, r0
 8009330:	d4e0      	bmi.n	80092f4 <_fflush_r+0xc>
 8009332:	89a3      	ldrh	r3, [r4, #12]
 8009334:	059b      	lsls	r3, r3, #22
 8009336:	d4dd      	bmi.n	80092f4 <_fflush_r+0xc>
 8009338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800933a:	f7ff fa96 	bl	800886a <__retarget_lock_release_recursive>
 800933e:	e7d9      	b.n	80092f4 <_fflush_r+0xc>
 8009340:	4b05      	ldr	r3, [pc, #20]	; (8009358 <_fflush_r+0x70>)
 8009342:	429c      	cmp	r4, r3
 8009344:	d101      	bne.n	800934a <_fflush_r+0x62>
 8009346:	68ac      	ldr	r4, [r5, #8]
 8009348:	e7df      	b.n	800930a <_fflush_r+0x22>
 800934a:	4b04      	ldr	r3, [pc, #16]	; (800935c <_fflush_r+0x74>)
 800934c:	429c      	cmp	r4, r3
 800934e:	bf08      	it	eq
 8009350:	68ec      	ldreq	r4, [r5, #12]
 8009352:	e7da      	b.n	800930a <_fflush_r+0x22>
 8009354:	080095d8 	.word	0x080095d8
 8009358:	080095f8 	.word	0x080095f8
 800935c:	080095b8 	.word	0x080095b8

08009360 <_lseek_r>:
 8009360:	b538      	push	{r3, r4, r5, lr}
 8009362:	4d07      	ldr	r5, [pc, #28]	; (8009380 <_lseek_r+0x20>)
 8009364:	4604      	mov	r4, r0
 8009366:	4608      	mov	r0, r1
 8009368:	4611      	mov	r1, r2
 800936a:	2200      	movs	r2, #0
 800936c:	602a      	str	r2, [r5, #0]
 800936e:	461a      	mov	r2, r3
 8009370:	f7ff f836 	bl	80083e0 <_lseek>
 8009374:	1c43      	adds	r3, r0, #1
 8009376:	d102      	bne.n	800937e <_lseek_r+0x1e>
 8009378:	682b      	ldr	r3, [r5, #0]
 800937a:	b103      	cbz	r3, 800937e <_lseek_r+0x1e>
 800937c:	6023      	str	r3, [r4, #0]
 800937e:	bd38      	pop	{r3, r4, r5, pc}
 8009380:	20000090 	.word	0x20000090

08009384 <__swhatbuf_r>:
 8009384:	b570      	push	{r4, r5, r6, lr}
 8009386:	460e      	mov	r6, r1
 8009388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800938c:	2900      	cmp	r1, #0
 800938e:	b096      	sub	sp, #88	; 0x58
 8009390:	4614      	mov	r4, r2
 8009392:	461d      	mov	r5, r3
 8009394:	da08      	bge.n	80093a8 <__swhatbuf_r+0x24>
 8009396:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800939a:	2200      	movs	r2, #0
 800939c:	602a      	str	r2, [r5, #0]
 800939e:	061a      	lsls	r2, r3, #24
 80093a0:	d410      	bmi.n	80093c4 <__swhatbuf_r+0x40>
 80093a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093a6:	e00e      	b.n	80093c6 <__swhatbuf_r+0x42>
 80093a8:	466a      	mov	r2, sp
 80093aa:	f000 f8bb 	bl	8009524 <_fstat_r>
 80093ae:	2800      	cmp	r0, #0
 80093b0:	dbf1      	blt.n	8009396 <__swhatbuf_r+0x12>
 80093b2:	9a01      	ldr	r2, [sp, #4]
 80093b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80093b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80093bc:	425a      	negs	r2, r3
 80093be:	415a      	adcs	r2, r3
 80093c0:	602a      	str	r2, [r5, #0]
 80093c2:	e7ee      	b.n	80093a2 <__swhatbuf_r+0x1e>
 80093c4:	2340      	movs	r3, #64	; 0x40
 80093c6:	2000      	movs	r0, #0
 80093c8:	6023      	str	r3, [r4, #0]
 80093ca:	b016      	add	sp, #88	; 0x58
 80093cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080093d0 <__smakebuf_r>:
 80093d0:	898b      	ldrh	r3, [r1, #12]
 80093d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80093d4:	079d      	lsls	r5, r3, #30
 80093d6:	4606      	mov	r6, r0
 80093d8:	460c      	mov	r4, r1
 80093da:	d507      	bpl.n	80093ec <__smakebuf_r+0x1c>
 80093dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80093e0:	6023      	str	r3, [r4, #0]
 80093e2:	6123      	str	r3, [r4, #16]
 80093e4:	2301      	movs	r3, #1
 80093e6:	6163      	str	r3, [r4, #20]
 80093e8:	b002      	add	sp, #8
 80093ea:	bd70      	pop	{r4, r5, r6, pc}
 80093ec:	ab01      	add	r3, sp, #4
 80093ee:	466a      	mov	r2, sp
 80093f0:	f7ff ffc8 	bl	8009384 <__swhatbuf_r>
 80093f4:	9900      	ldr	r1, [sp, #0]
 80093f6:	4605      	mov	r5, r0
 80093f8:	4630      	mov	r0, r6
 80093fa:	f7ff fa57 	bl	80088ac <_malloc_r>
 80093fe:	b948      	cbnz	r0, 8009414 <__smakebuf_r+0x44>
 8009400:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009404:	059a      	lsls	r2, r3, #22
 8009406:	d4ef      	bmi.n	80093e8 <__smakebuf_r+0x18>
 8009408:	f023 0303 	bic.w	r3, r3, #3
 800940c:	f043 0302 	orr.w	r3, r3, #2
 8009410:	81a3      	strh	r3, [r4, #12]
 8009412:	e7e3      	b.n	80093dc <__smakebuf_r+0xc>
 8009414:	4b0d      	ldr	r3, [pc, #52]	; (800944c <__smakebuf_r+0x7c>)
 8009416:	62b3      	str	r3, [r6, #40]	; 0x28
 8009418:	89a3      	ldrh	r3, [r4, #12]
 800941a:	6020      	str	r0, [r4, #0]
 800941c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009420:	81a3      	strh	r3, [r4, #12]
 8009422:	9b00      	ldr	r3, [sp, #0]
 8009424:	6163      	str	r3, [r4, #20]
 8009426:	9b01      	ldr	r3, [sp, #4]
 8009428:	6120      	str	r0, [r4, #16]
 800942a:	b15b      	cbz	r3, 8009444 <__smakebuf_r+0x74>
 800942c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009430:	4630      	mov	r0, r6
 8009432:	f000 f889 	bl	8009548 <_isatty_r>
 8009436:	b128      	cbz	r0, 8009444 <__smakebuf_r+0x74>
 8009438:	89a3      	ldrh	r3, [r4, #12]
 800943a:	f023 0303 	bic.w	r3, r3, #3
 800943e:	f043 0301 	orr.w	r3, r3, #1
 8009442:	81a3      	strh	r3, [r4, #12]
 8009444:	89a0      	ldrh	r0, [r4, #12]
 8009446:	4305      	orrs	r5, r0
 8009448:	81a5      	strh	r5, [r4, #12]
 800944a:	e7cd      	b.n	80093e8 <__smakebuf_r+0x18>
 800944c:	080086c5 	.word	0x080086c5

08009450 <__malloc_lock>:
 8009450:	4801      	ldr	r0, [pc, #4]	; (8009458 <__malloc_lock+0x8>)
 8009452:	f7ff ba09 	b.w	8008868 <__retarget_lock_acquire_recursive>
 8009456:	bf00      	nop
 8009458:	20000084 	.word	0x20000084

0800945c <__malloc_unlock>:
 800945c:	4801      	ldr	r0, [pc, #4]	; (8009464 <__malloc_unlock+0x8>)
 800945e:	f7ff ba04 	b.w	800886a <__retarget_lock_release_recursive>
 8009462:	bf00      	nop
 8009464:	20000084 	.word	0x20000084

08009468 <_free_r>:
 8009468:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800946a:	2900      	cmp	r1, #0
 800946c:	d044      	beq.n	80094f8 <_free_r+0x90>
 800946e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009472:	9001      	str	r0, [sp, #4]
 8009474:	2b00      	cmp	r3, #0
 8009476:	f1a1 0404 	sub.w	r4, r1, #4
 800947a:	bfb8      	it	lt
 800947c:	18e4      	addlt	r4, r4, r3
 800947e:	f7ff ffe7 	bl	8009450 <__malloc_lock>
 8009482:	4a1e      	ldr	r2, [pc, #120]	; (80094fc <_free_r+0x94>)
 8009484:	9801      	ldr	r0, [sp, #4]
 8009486:	6813      	ldr	r3, [r2, #0]
 8009488:	b933      	cbnz	r3, 8009498 <_free_r+0x30>
 800948a:	6063      	str	r3, [r4, #4]
 800948c:	6014      	str	r4, [r2, #0]
 800948e:	b003      	add	sp, #12
 8009490:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009494:	f7ff bfe2 	b.w	800945c <__malloc_unlock>
 8009498:	42a3      	cmp	r3, r4
 800949a:	d908      	bls.n	80094ae <_free_r+0x46>
 800949c:	6825      	ldr	r5, [r4, #0]
 800949e:	1961      	adds	r1, r4, r5
 80094a0:	428b      	cmp	r3, r1
 80094a2:	bf01      	itttt	eq
 80094a4:	6819      	ldreq	r1, [r3, #0]
 80094a6:	685b      	ldreq	r3, [r3, #4]
 80094a8:	1949      	addeq	r1, r1, r5
 80094aa:	6021      	streq	r1, [r4, #0]
 80094ac:	e7ed      	b.n	800948a <_free_r+0x22>
 80094ae:	461a      	mov	r2, r3
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	b10b      	cbz	r3, 80094b8 <_free_r+0x50>
 80094b4:	42a3      	cmp	r3, r4
 80094b6:	d9fa      	bls.n	80094ae <_free_r+0x46>
 80094b8:	6811      	ldr	r1, [r2, #0]
 80094ba:	1855      	adds	r5, r2, r1
 80094bc:	42a5      	cmp	r5, r4
 80094be:	d10b      	bne.n	80094d8 <_free_r+0x70>
 80094c0:	6824      	ldr	r4, [r4, #0]
 80094c2:	4421      	add	r1, r4
 80094c4:	1854      	adds	r4, r2, r1
 80094c6:	42a3      	cmp	r3, r4
 80094c8:	6011      	str	r1, [r2, #0]
 80094ca:	d1e0      	bne.n	800948e <_free_r+0x26>
 80094cc:	681c      	ldr	r4, [r3, #0]
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	6053      	str	r3, [r2, #4]
 80094d2:	4421      	add	r1, r4
 80094d4:	6011      	str	r1, [r2, #0]
 80094d6:	e7da      	b.n	800948e <_free_r+0x26>
 80094d8:	d902      	bls.n	80094e0 <_free_r+0x78>
 80094da:	230c      	movs	r3, #12
 80094dc:	6003      	str	r3, [r0, #0]
 80094de:	e7d6      	b.n	800948e <_free_r+0x26>
 80094e0:	6825      	ldr	r5, [r4, #0]
 80094e2:	1961      	adds	r1, r4, r5
 80094e4:	428b      	cmp	r3, r1
 80094e6:	bf04      	itt	eq
 80094e8:	6819      	ldreq	r1, [r3, #0]
 80094ea:	685b      	ldreq	r3, [r3, #4]
 80094ec:	6063      	str	r3, [r4, #4]
 80094ee:	bf04      	itt	eq
 80094f0:	1949      	addeq	r1, r1, r5
 80094f2:	6021      	streq	r1, [r4, #0]
 80094f4:	6054      	str	r4, [r2, #4]
 80094f6:	e7ca      	b.n	800948e <_free_r+0x26>
 80094f8:	b003      	add	sp, #12
 80094fa:	bd30      	pop	{r4, r5, pc}
 80094fc:	20000088 	.word	0x20000088

08009500 <_read_r>:
 8009500:	b538      	push	{r3, r4, r5, lr}
 8009502:	4d07      	ldr	r5, [pc, #28]	; (8009520 <_read_r+0x20>)
 8009504:	4604      	mov	r4, r0
 8009506:	4608      	mov	r0, r1
 8009508:	4611      	mov	r1, r2
 800950a:	2200      	movs	r2, #0
 800950c:	602a      	str	r2, [r5, #0]
 800950e:	461a      	mov	r2, r3
 8009510:	f7fe ff06 	bl	8008320 <_read>
 8009514:	1c43      	adds	r3, r0, #1
 8009516:	d102      	bne.n	800951e <_read_r+0x1e>
 8009518:	682b      	ldr	r3, [r5, #0]
 800951a:	b103      	cbz	r3, 800951e <_read_r+0x1e>
 800951c:	6023      	str	r3, [r4, #0]
 800951e:	bd38      	pop	{r3, r4, r5, pc}
 8009520:	20000090 	.word	0x20000090

08009524 <_fstat_r>:
 8009524:	b538      	push	{r3, r4, r5, lr}
 8009526:	4d07      	ldr	r5, [pc, #28]	; (8009544 <_fstat_r+0x20>)
 8009528:	2300      	movs	r3, #0
 800952a:	4604      	mov	r4, r0
 800952c:	4608      	mov	r0, r1
 800952e:	4611      	mov	r1, r2
 8009530:	602b      	str	r3, [r5, #0]
 8009532:	f7fe ff3a 	bl	80083aa <_fstat>
 8009536:	1c43      	adds	r3, r0, #1
 8009538:	d102      	bne.n	8009540 <_fstat_r+0x1c>
 800953a:	682b      	ldr	r3, [r5, #0]
 800953c:	b103      	cbz	r3, 8009540 <_fstat_r+0x1c>
 800953e:	6023      	str	r3, [r4, #0]
 8009540:	bd38      	pop	{r3, r4, r5, pc}
 8009542:	bf00      	nop
 8009544:	20000090 	.word	0x20000090

08009548 <_isatty_r>:
 8009548:	b538      	push	{r3, r4, r5, lr}
 800954a:	4d06      	ldr	r5, [pc, #24]	; (8009564 <_isatty_r+0x1c>)
 800954c:	2300      	movs	r3, #0
 800954e:	4604      	mov	r4, r0
 8009550:	4608      	mov	r0, r1
 8009552:	602b      	str	r3, [r5, #0]
 8009554:	f7fe ff39 	bl	80083ca <_isatty>
 8009558:	1c43      	adds	r3, r0, #1
 800955a:	d102      	bne.n	8009562 <_isatty_r+0x1a>
 800955c:	682b      	ldr	r3, [r5, #0]
 800955e:	b103      	cbz	r3, 8009562 <_isatty_r+0x1a>
 8009560:	6023      	str	r3, [r4, #0]
 8009562:	bd38      	pop	{r3, r4, r5, pc}
 8009564:	20000090 	.word	0x20000090

08009568 <_init>:
 8009568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800956a:	bf00      	nop
 800956c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800956e:	bc08      	pop	{r3}
 8009570:	469e      	mov	lr, r3
 8009572:	4770      	bx	lr

08009574 <_fini>:
 8009574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009576:	bf00      	nop
 8009578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800957a:	bc08      	pop	{r3}
 800957c:	469e      	mov	lr, r3
 800957e:	4770      	bx	lr
